<शैली गुरु>
// Support क्रम enabling/disabling BIOS ram shaकरोwing.
//
// Copyright (C) 2008-2010  Kevin O'Connor <kevin@koconnor.net>
// Copyright (C) 2006 Fabrice Bellard
//
// This file may be distributed under the terms of the GNU LGPLv3 license.

#समावेश "config.h" // CONFIG_*
#समावेश "dev-q35.h" // PCI_VENDOR_ID_INTEL
#समावेश "dev-piix.h" // I440FX_PAM0
#समावेश "hw/pci.h" // pci_config_ग_लिखोb
#समावेश "hw/pci_ids.h" // PCI_VENDOR_ID_INTEL
#समावेश "hw/pci_regs.h" // PCI_VENDOR_ID
#समावेश "malloc.h" // rom_get_last
#समावेश "output.h" // dम_लिखो
#समावेश "paravirt.h" // runningOnXen
#समावेश "string.h" // स_रखो
#समावेश "util.h" // make_bios_writable
#समावेश "x86.h" // wbinvd

// On the emulators, the bios at 0xf0000 is also at 0xffff0000
#घोषणा BIOS_SRC_OFFSET 0xfff00000

जोड़ pamdata_u अणु
    u8 data8[8];
    u32 data32[2];
पूर्ण;

// Enable shaकरोwing and copy bios.
अटल व्योम
__make_bios_writable_पूर्णांकel(u16 bdf, u32 pam0)
अणु
    // Read in current PAM settings from pci config space
    जोड़ pamdata_u pamdata;
    pamdata.data32[0] = pci_config_पढ़ोl(bdf, ALIGN_DOWN(pam0, 4));
    pamdata.data32[1] = pci_config_पढ़ोl(bdf, ALIGN_DOWN(pam0, 4) + 4);
    u8 *pam = &pamdata.data8[pam0 & 0x03];

    // Make ram from 0xc0000-0xf0000 writable
    पूर्णांक i;
    क्रम (i=0; i<6; i++)
        pam[i + 1] = 0x33;

    // Make ram from 0xf0000-0x100000 writable
    पूर्णांक ram_present = pam[0] & 0x10;
    pam[0] = 0x30;

    // Write PAM settings back to pci config space
    pci_config_ग_लिखोl(bdf, ALIGN_DOWN(pam0, 4), pamdata.data32[0]);
    pci_config_ग_लिखोl(bdf, ALIGN_DOWN(pam0, 4) + 4, pamdata.data32[1]);

    अगर (!ram_present)
        // Copy bios.
        स_नकल(VSYMBOL(code32flat_start)
               , VSYMBOL(code32flat_start) + BIOS_SRC_OFFSET
               , SYMBOL(code32flat_end) - SYMBOL(code32flat_start));
पूर्ण

अटल व्योम
make_bios_writable_पूर्णांकel(u16 bdf, u32 pam0)
अणु
    पूर्णांक reg = pci_config_पढ़ोb(bdf, pam0);
    अगर (!(reg & 0x10)) अणु
        // QEMU करोesn't fully implement the piix shaकरोw capabilities -
        // अगर ram isn't backing the bios segment when shaकरोwing is
        // disabled, the code itself won't be in memory.  So, run the
        // code from the high-memory flash location.
        u32 pos = (u32)__make_bios_writable_पूर्णांकel + BIOS_SRC_OFFSET;
        व्योम (*func)(u16 bdf, u32 pam0) = (व्योम*)pos;
        func(bdf, pam0);
        वापस;
    पूर्ण
    // Ram alपढ़ोy present - just enable ग_लिखोs
    __make_bios_writable_पूर्णांकel(bdf, pam0);
पूर्ण

अटल व्योम
make_bios_पढ़ोonly_पूर्णांकel(u16 bdf, u32 pam0)
अणु
    // Flush any pending ग_लिखोs beक्रमe locking memory.
    wbinvd();

    // Read in current PAM settings from pci config space
    जोड़ pamdata_u pamdata;
    pamdata.data32[0] = pci_config_पढ़ोl(bdf, ALIGN_DOWN(pam0, 4));
    pamdata.data32[1] = pci_config_पढ़ोl(bdf, ALIGN_DOWN(pam0, 4) + 4);
    u8 *pam = &pamdata.data8[pam0 & 0x03];

    // Write protect roms from 0xc0000-0xf0000
    u32 romlast = BUILD_BIOS_ADDR, rommax = BUILD_BIOS_ADDR;
    अगर (CONFIG_WRITABLE_UPPERMEMORY)
        romlast = rom_get_last();
    अगर (CONFIG_MALLOC_UPPERMEMORY)
        rommax = rom_get_max();
    पूर्णांक i;
    क्रम (i=0; i<6; i++) अणु
        u32 mem = BUILD_ROM_START + i * 32*1024;
        अगर (romlast < mem + 16*1024 || rommax < mem + 32*1024) अणु
            अगर (romlast >= mem && rommax >= mem + 16*1024)
                pam[i + 1] = 0x31;
            अवरोध;
        पूर्ण
        pam[i + 1] = 0x11;
    पूर्ण

    // Write protect 0xf0000-0x100000
    pam[0] = 0x10;

    // Write PAM settings back to pci config space
    pci_config_ग_लिखोl(bdf, ALIGN_DOWN(pam0, 4), pamdata.data32[0]);
    pci_config_ग_लिखोl(bdf, ALIGN_DOWN(pam0, 4) + 4, pamdata.data32[1]);
पूर्ण

अटल पूर्णांक ShaकरोwBDF = -1;

// Make the 0xc0000-0x100000 area पढ़ो/writable.
व्योम
make_bios_writable(व्योम)
अणु
    अगर (!CONFIG_QEMU || runningOnXen())
        वापस;

    dम_लिखो(3, "enabling shadow ram\n");

    // At this poपूर्णांक, अटलally allocated variables can't be written,
    // so करो this search manually.
    पूर्णांक bdf;
    क्रमeachbdf(bdf, 0) अणु
        u32 vendev = pci_config_पढ़ोl(bdf, PCI_VENDOR_ID);
        u16 venकरोr = vendev & 0xffff, device = vendev >> 16;
        अगर (venकरोr == PCI_VENDOR_ID_INTEL
            && device == PCI_DEVICE_ID_INTEL_82441) अणु
            make_bios_writable_पूर्णांकel(bdf, I440FX_PAM0);
            code_mutable_preinit();
            ShaकरोwBDF = bdf;
            वापस;
        पूर्ण
        अगर (venकरोr == PCI_VENDOR_ID_INTEL
            && device == PCI_DEVICE_ID_INTEL_Q35_MCH) अणु
            make_bios_writable_पूर्णांकel(bdf, Q35_HOST_BRIDGE_PAM0);
            code_mutable_preinit();
            ShaकरोwBDF = bdf;
            वापस;
        पूर्ण
    पूर्ण
    dम_लिखो(1, "Unable to unlock ram - bridge not found\n");
पूर्ण

// Make the BIOS code segment area (0xf0000) पढ़ो-only.
व्योम
make_bios_पढ़ोonly(व्योम)
अणु
    अगर (!CONFIG_QEMU || runningOnXen())
        वापस;
    dम_लिखो(3, "locking shadow ram\n");

    अगर (ShaकरोwBDF < 0) अणु
        dम_लिखो(1, "Unable to lock ram - bridge not found\n");
        वापस;
    पूर्ण

    u16 device = pci_config_पढ़ोw(ShaकरोwBDF, PCI_DEVICE_ID);
    अगर (device == PCI_DEVICE_ID_INTEL_82441)
        make_bios_पढ़ोonly_पूर्णांकel(ShaकरोwBDF, I440FX_PAM0);
    अन्यथा
        make_bios_पढ़ोonly_पूर्णांकel(ShaकरोwBDF, Q35_HOST_BRIDGE_PAM0);
पूर्ण

व्योम
qemu_reboot(व्योम)
अणु
    अगर (!CONFIG_QEMU || runningOnXen())
        वापस;
    // QEMU करोesn't map 0xc0000-0xfffff back to the original rom on a
    // reset, so करो that manually beक्रमe invoking a hard reset.
    व्योम *flash = (व्योम*)BIOS_SRC_OFFSET;
    u32 hrp = (u32)&HaveRunPost;
    अगर (पढ़ोl(flash + hrp)) अणु
        // There isn't a pristine copy of the BIOS at 0xffff0000 to copy
        अगर (HaveRunPost == 3) अणु
            // In a reboot loop.  Try to shutकरोwn the machine instead.
            dम_लिखो(1, "Unable to hard-reboot machine - attempting shutdown.\n");
            apm_shutकरोwn();
        पूर्ण
        make_bios_writable();
        HaveRunPost = 3;
    पूर्ण अन्यथा अणु
        // Copy the BIOS making sure to only reset HaveRunPost at end
        make_bios_writable();
        u32 cstart = SYMBOL(code32flat_start), cend = SYMBOL(code32flat_end);
        स_नकल((व्योम*)cstart, flash + cstart, hrp - cstart);
        स_नकल((व्योम*)hrp + 4, flash + hrp + 4, cend - (hrp + 4));
        barrier();
        HaveRunPost = 0;
        barrier();
    पूर्ण

    // Request a QEMU प्रणाली reset.  Do the reset in this function as
    // the BIOS code was overwritten above and not all BIOS
    // functionality may be available.

    // Attempt PCI style reset
    outb(0x02, PORT_PCI_REBOOT);
    outb(0x06, PORT_PCI_REBOOT);

    // Next try triple faulting the CPU to क्रमce a reset
    यंत्र अस्थिर("int3");
पूर्ण

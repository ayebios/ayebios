<शैली गुरु>
// Paraभवization support.
//
// Copyright (C) 2013  Kevin O'Connor <kevin@koconnor.net>
// Copyright (C) 2009 Red Hat Inc.
//
// Authors:
//  Gleb Natapov <gnatapov@redhat.com>
//
// This file may be distributed under the terms of the GNU LGPLv3 license.

#समावेश "byteorder.h" // be32_to_cpu
#समावेश "config.h" // CONFIG_QEMU
#समावेश "e820map.h" // e820_add
#समावेश "hw/pci.h" // pci_config_पढ़ोw
#समावेश "hw/pcidevice.h" // pci_probe_devices
#समावेश "hw/pci_regs.h" // PCI_DEVICE_ID
#समावेश "hw/serialio.h" // PORT_SERIAL1
#समावेश "hw/rtc.h" // CMOS_*
#समावेश "hw/virtio-mmio.h" // virtio_mmio_acpi
#समावेश "malloc.h" // दो_स्मृति_पंचांगp
#समावेश "output.h" // dम_लिखो
#समावेश "paravirt.h" // qemu_cfg_preinit
#समावेश "romfile.h" // romfile_loadपूर्णांक
#समावेश "romfile_loader.h" // romfile_loader_execute
#समावेश "string.h" // स_रखो
#समावेश "util.h" // pci_setup
#समावेश "x86.h" // cpuid
#समावेश "xen.h" // xen_biostable_setup
#समावेश "stacks.h" // yield

// Amount of continuous ram under 4Gig
u32 RamSize;
// Amount of continuous ram >4Gig
u64 RamSizeOver4G;
// Type of emulator platक्रमm.
पूर्णांक Platक्रमmRunningOn VARFSEG;
// cfg enabled
पूर्णांक cfg_enabled = 0;
// cfg_dma enabled
पूर्णांक cfg_dma_enabled = 0;

अंतरभूत पूर्णांक qemu_cfg_enabled(व्योम)
अणु
    वापस cfg_enabled;
पूर्ण

अंतरभूत पूर्णांक qemu_cfg_dma_enabled(व्योम)
अणु
    वापस cfg_dma_enabled;
पूर्ण

/* This CPUID वापसs the signature 'KVMKVMKVM' in ebx, ecx, and edx.  It
 * should be used to determine that a VM is running under KVM.
 */
#घोषणा KVM_CPUID_SIGNATURE     0x40000000

अटल व्योम kvm_detect(व्योम)
अणु
    अचिन्हित पूर्णांक eax, ebx, ecx, edx;
    अक्षर signature[13];

    cpuid(KVM_CPUID_SIGNATURE, &eax, &ebx, &ecx, &edx);
    स_नकल(signature + 0, &ebx, 4);
    स_नकल(signature + 4, &ecx, 4);
    स_नकल(signature + 8, &edx, 4);
    signature[12] = 0;

    अगर (म_भेद(signature, "KVMKVMKVM") == 0) अणु
        dम_लिखो(1, "Running on KVM\n");
        Platक्रमmRunningOn |= PF_KVM;
        अगर (eax >= KVM_CPUID_SIGNATURE + 0x10) अणु
            cpuid(KVM_CPUID_SIGNATURE + 0x10, &eax, &ebx, &ecx, &edx);
            dम_लिखो(1, "kvm: have invtsc, freq %u kHz\n", eax);
            tsस_समयr_setfreq(eax, "invtsc");
        पूर्ण
    पूर्ण
पूर्ण

#घोषणा KVM_FEATURE_CLOCKSOURCE           0
#घोषणा KVM_FEATURE_CLOCKSOURCE2          3

#घोषणा MSR_KVM_SYSTEM_TIME            0x12
#घोषणा MSR_KVM_SYSTEM_TIME_NEW  0x4b564d01

#घोषणा PVCLOCK_TSC_STABLE_BIT     (1 << 0)

काष्ठा pvघड़ी_vcpu_समय_info *kvmघड़ी;

अटल व्योम kvmघड़ी_init(व्योम)
अणु
    अचिन्हित पूर्णांक eax, ebx, ecx, edx, msr;

    अगर (!runningOnKVM())
        वापस;

    cpuid(KVM_CPUID_SIGNATURE + 0x01, &eax, &ebx, &ecx, &edx);
    अगर (eax & (1 <<  KVM_FEATURE_CLOCKSOURCE2))
        msr = MSR_KVM_SYSTEM_TIME_NEW;
    अन्यथा अगर (eax & (1 <<  KVM_FEATURE_CLOCKSOURCE))
        msr = MSR_KVM_SYSTEM_TIME;
    अन्यथा
        वापस;

    kvmघड़ी = memalign_low(माप(*kvmघड़ी), 32);
    स_रखो(kvmघड़ी, 0, माप(*kvmघड़ी));
    u32 value = (u32)(kvmघड़ी);
    dम_लिखो(1, "kvmclock: at 0x%x (msr 0x%x)\n", value, msr);
    wrmsr(msr, value | 0x01);

    अगर (!(kvmघड़ी->flags & PVCLOCK_TSC_STABLE_BIT))
        वापस;
    u32 MHz = (1000 << 16) / (kvmघड़ी->tsc_to_प्रणाली_mul >> 16);
    अगर (kvmघड़ी->tsc_shअगरt < 0)
        MHz <<= -kvmघड़ी->tsc_shअगरt;
    अन्यथा
        MHz >>= kvmघड़ी->tsc_shअगरt;
    dम_लिखो(1, "kvmclock: stable tsc, %d MHz\n", MHz);
    tsस_समयr_setfreq(MHz * 1000, "kvmclock");
पूर्ण

अटल व्योम qemu_detect(व्योम)
अणु
    अगर (!CONFIG_QEMU_HARDWARE)
        वापस;

    // Setup QEMU debug output port
    qemu_debug_preinit();

    // check northbridge @ 00:00.0
    u16 v = pci_config_पढ़ोw(0, PCI_VENDOR_ID);
    अगर (v == 0x0000 || v == 0xffff)
        वापस;
    u16 d = pci_config_पढ़ोw(0, PCI_DEVICE_ID);
    u16 sv = pci_config_पढ़ोw(0, PCI_SUBSYSTEM_VENDOR_ID);
    u16 sd = pci_config_पढ़ोw(0, PCI_SUBSYSTEM_ID);

    अगर (sv != 0x1af4 || /* Red Hat, Inc */
        sd != 0x1100)   /* Qemu भव machine */
        वापस;

    Platक्रमmRunningOn |= PF_QEMU;
    चयन (d) अणु
    हाल 0x1237:
        dम_लिखो(1, "Running on QEMU (i440fx)\n");
        अवरोध;
    हाल 0x29c0:
        dम_लिखो(1, "Running on QEMU (q35)\n");
        अवरोध;
    शेष:
        dम_लिखो(1, "Running on QEMU (unknown nb: %04x:%04x)\n", v, d);
        अवरोध;
    पूर्ण
पूर्ण

अटल पूर्णांक qemu_early_e820(व्योम);

व्योम
qemu_preinit(व्योम)
अणु
    qemu_detect();
    kvm_detect();

    अगर (!CONFIG_QEMU)
        वापस;

    अगर (runningOnXen()) अणु
        xen_ramsize_preinit();
        वापस;
    पूर्ण

    // try पढ़ो e820 table first
    अगर (!qemu_early_e820()) अणु
        // when it fails get memory size from nvram.
        u32 rs = ((rtc_पढ़ो(CMOS_MEM_EXTMEM2_LOW) << 16)
                  | (rtc_पढ़ो(CMOS_MEM_EXTMEM2_HIGH) << 24));
        अगर (rs)
            rs += 16 * 1024 * 1024;
        अन्यथा
            rs = (((rtc_पढ़ो(CMOS_MEM_EXTMEM_LOW) << 10)
                   | (rtc_पढ़ो(CMOS_MEM_EXTMEM_HIGH) << 18))
                  + 1 * 1024 * 1024);
        RamSize = rs;
        e820_add(0, rs, E820_RAM);
        dम_लिखो(1, "RamSize: 0x%08x [cmos]\n", RamSize);
    पूर्ण

    /* reserve 256KB BIOS area at the end of 4 GB */
    e820_add(0xfffc0000, 256*1024, E820_RESERVED);
पूर्ण

#घोषणा MSR_IA32_FEATURE_CONTROL 0x0000003a

अटल व्योम msr_feature_control_setup(व्योम)
अणु
    u64 feature_control_bits = romfile_loadपूर्णांक("etc/msr_feature_control", 0);
    अगर (feature_control_bits)
        wrmsr_smp(MSR_IA32_FEATURE_CONTROL, feature_control_bits);
पूर्ण

व्योम
qemu_platक्रमm_setup(व्योम)
अणु
    अगर (!CONFIG_QEMU)
        वापस;

    अगर (runningOnXen()) अणु
        pci_probe_devices();
        xen_hypercall_setup();
        xen_biostable_setup();
        वापस;
    पूर्ण

    kvmघड़ी_init();

    // Initialize pci
    pci_setup();
    smm_device_setup();
    smm_setup();

    // Initialize mtrr, msr_feature_control and smp
    mtrr_setup();
    msr_feature_control_setup();
    smp_setup();

    // Create bios tables
    अगर (MaxCountCPUs <= 255) अणु
        pirtable_setup();
        mptable_setup();
    पूर्ण
    smbios_setup();

    अगर (CONFIG_FW_ROMखाता_LOAD) अणु
        पूर्णांक loader_err;

        dम_लिखो(3, "load ACPI tables\n");

        loader_err = romfile_loader_execute("etc/table-loader");

        RsdpAddr = find_acpi_rsdp();

        अगर (RsdpAddr) अणु
            acpi_dsdt_parse();
            virtio_mmio_setup_acpi();
            वापस;
        पूर्ण
        /* If present, loader should have installed an RSDP.
         * Not installed? We might still be able to जारी
         * using the builtin RSDP.
         */
        अगर (!loader_err)
            warn_पूर्णांकernalerror();
    पूर्ण

    acpi_setup();
पूर्ण


/****************************************************************
 * QEMU firmware config (fw_cfg) पूर्णांकerface
 ****************************************************************/

// List of QEMU fw_cfg entries.  DO NOT ADD MORE.  (All new content
// should be passed via the fw_cfg "file" पूर्णांकerface.)
#घोषणा QEMU_CFG_SIGNATURE              0x00
#घोषणा QEMU_CFG_ID                     0x01
#घोषणा QEMU_CFG_UUID                   0x02
#घोषणा QEMU_CFG_NOGRAPHIC              0x04
#घोषणा QEMU_CFG_NUMA                   0x0d
#घोषणा QEMU_CFG_BOOT_MENU              0x0e
#घोषणा QEMU_CFG_NB_CPUS                0x05
#घोषणा QEMU_CFG_MAX_CPUS               0x0f
#घोषणा QEMU_CFG_खाता_सूची               0x19
#घोषणा QEMU_CFG_ARCH_LOCAL             0x8000
#घोषणा QEMU_CFG_ACPI_TABLES            (QEMU_CFG_ARCH_LOCAL + 0)
#घोषणा QEMU_CFG_SMBIOS_ENTRIES         (QEMU_CFG_ARCH_LOCAL + 1)
#घोषणा QEMU_CFG_IRQ0_OVERRIDE          (QEMU_CFG_ARCH_LOCAL + 2)
#घोषणा QEMU_CFG_E820_TABLE             (QEMU_CFG_ARCH_LOCAL + 3)

अटल व्योम
qemu_cfg_select(u16 f)
अणु
    outw(f, PORT_QEMU_CFG_CTL);
पूर्ण

अटल व्योम
qemu_cfg_dma_transfer(व्योम *address, u32 length, u32 control)
अणु
    QemuCfgDmaAccess access;

    access.address = cpu_to_be64((u64)(u32)address);
    access.length = cpu_to_be32(length);
    access.control = cpu_to_be32(control);

    barrier();

    outl(cpu_to_be32((u32)&access), PORT_QEMU_CFG_DMA_ADDR_LOW);

    जबतक(be32_to_cpu(access.control) & ~QEMU_CFG_DMA_CTL_ERROR) अणु
        yield();
    पूर्ण
पूर्ण

अटल व्योम
qemu_cfg_पढ़ो(व्योम *buf, पूर्णांक len)
अणु
    अगर (len == 0) अणु
        वापस;
    पूर्ण

    अगर (qemu_cfg_dma_enabled()) अणु
        qemu_cfg_dma_transfer(buf, len, QEMU_CFG_DMA_CTL_READ);
    पूर्ण अन्यथा अणु
        insb(PORT_QEMU_CFG_DATA, buf, len);
    पूर्ण
पूर्ण

अटल व्योम
qemu_cfg_ग_लिखो(व्योम *buf, पूर्णांक len)
अणु
    अगर (len == 0) अणु
        वापस;
    पूर्ण

    अगर (qemu_cfg_dma_enabled()) अणु
        qemu_cfg_dma_transfer(buf, len, QEMU_CFG_DMA_CTL_WRITE);
    पूर्ण अन्यथा अणु
        warn_पूर्णांकernalerror();
    पूर्ण
पूर्ण

अटल व्योम
qemu_cfg_skip(पूर्णांक len)
अणु
    अगर (len == 0) अणु
        वापस;
    पूर्ण

    अगर (qemu_cfg_dma_enabled()) अणु
        qemu_cfg_dma_transfer(0, len, QEMU_CFG_DMA_CTL_SKIP);
    पूर्ण अन्यथा अणु
        जबतक (len--)
            inb(PORT_QEMU_CFG_DATA);
    पूर्ण
पूर्ण

अटल व्योम
qemu_cfg_पढ़ो_entry(व्योम *buf, पूर्णांक e, पूर्णांक len)
अणु
    अगर (qemu_cfg_dma_enabled()) अणु
        u32 control = (e << 16) | QEMU_CFG_DMA_CTL_SELECT
                        | QEMU_CFG_DMA_CTL_READ;
        qemu_cfg_dma_transfer(buf, len, control);
    पूर्ण अन्यथा अणु
        qemu_cfg_select(e);
        qemu_cfg_पढ़ो(buf, len);
    पूर्ण
पूर्ण

अटल व्योम
qemu_cfg_ग_लिखो_entry(व्योम *buf, पूर्णांक e, पूर्णांक len)
अणु
    अगर (qemu_cfg_dma_enabled()) अणु
        u32 control = (e << 16) | QEMU_CFG_DMA_CTL_SELECT
                        | QEMU_CFG_DMA_CTL_WRITE;
        qemu_cfg_dma_transfer(buf, len, control);
    पूर्ण अन्यथा अणु
        warn_पूर्णांकernalerror();
    पूर्ण
पूर्ण

काष्ठा qemu_romfile_s अणु
    काष्ठा romfile_s file;
    पूर्णांक select, skip;
पूर्ण;

अटल पूर्णांक
qemu_cfg_पढ़ो_file(काष्ठा romfile_s *file, व्योम *dst, u32 maxlen)
अणु
    अगर (file->size > maxlen)
        वापस -1;
    काष्ठा qemu_romfile_s *qfile;
    qfile = container_of(file, काष्ठा qemu_romfile_s, file);
    अगर (qfile->skip == 0) अणु
        /* Do it in one transfer */
        qemu_cfg_पढ़ो_entry(dst, qfile->select, file->size);
    पूर्ण अन्यथा अणु
        qemu_cfg_select(qfile->select);
        qemu_cfg_skip(qfile->skip);
        qemu_cfg_पढ़ो(dst, file->size);
    पूर्ण
    वापस file->size;
पूर्ण

// Bare-bones function क्रम writing a file knowing only its unique
// identअगरying key (select)
पूर्णांक
qemu_cfg_ग_लिखो_file_simple(व्योम *src, u16 key, u32 offset, u32 len)
अणु
    अगर (offset == 0) अणु
        /* Do it in one transfer */
        qemu_cfg_ग_लिखो_entry(src, key, len);
    पूर्ण अन्यथा अणु
        qemu_cfg_select(key);
        qemu_cfg_skip(offset);
        qemu_cfg_ग_लिखो(src, len);
    पूर्ण
    वापस len;
पूर्ण

पूर्णांक
qemu_cfg_ग_लिखो_file(व्योम *src, काष्ठा romfile_s *file, u32 offset, u32 len)
अणु
    अगर ((offset + len) > file->size)
        वापस -1;

    अगर (!qemu_cfg_dma_enabled() || (file->copy != qemu_cfg_पढ़ो_file)) अणु
        warn_पूर्णांकernalerror();
        वापस -1;
    पूर्ण
    वापस qemu_cfg_ग_लिखो_file_simple(src, qemu_get_romfile_key(file),
                                      offset, len);
पूर्ण

अटल व्योम
qemu_romfile_add(अक्षर *name, पूर्णांक select, पूर्णांक skip, पूर्णांक size)
अणु
    काष्ठा qemu_romfile_s *qfile = दो_स्मृति_पंचांगp(माप(*qfile));
    अगर (!qfile) अणु
        warn_noalloc();
        वापस;
    पूर्ण
    स_रखो(qfile, 0, माप(*qfile));
    strtcpy(qfile->file.name, name, माप(qfile->file.name));
    qfile->file.size = size;
    qfile->select = select;
    qfile->skip = skip;
    qfile->file.copy = qemu_cfg_पढ़ो_file;
    romfile_add(&qfile->file);
पूर्ण

u16
qemu_get_romfile_key(काष्ठा romfile_s *file)
अणु
    काष्ठा qemu_romfile_s *qfile;
    अगर (file->copy != qemu_cfg_पढ़ो_file) अणु
        warn_पूर्णांकernalerror();
        वापस 0;
    पूर्ण
    qfile = container_of(file, काष्ठा qemu_romfile_s, file);
    वापस qfile->select;
पूर्ण

अटल पूर्णांक rtc_present(व्योम)
अणु
    वापस rtc_पढ़ो(CMOS_RTC_MONTH) != 0xff;
पूर्ण

u16
qemu_get_present_cpus_count(व्योम)
अणु
    u16 smp_count = 0;
    अगर (qemu_cfg_enabled()) अणु
        qemu_cfg_पढ़ो_entry(&smp_count, QEMU_CFG_NB_CPUS, माप(smp_count));
    पूर्ण
    अगर (rtc_present()) अणु
        u16 cmos_cpu_count = rtc_पढ़ो(CMOS_BIOS_SMP_COUNT) + 1;
        अगर (smp_count < cmos_cpu_count) अणु
            smp_count = cmos_cpu_count;
        पूर्ण
    पूर्ण
    वापस smp_count;
पूर्ण

काष्ठा e820_reservation अणु
    u64 address;
    u64 length;
    u32 type;
पूर्ण;

#घोषणा SMBIOS_FIELD_ENTRY 0
#घोषणा SMBIOS_TABLE_ENTRY 1

काष्ठा qemu_smbios_header अणु
    u16 length;
    u8 headertype;
    u8 tabletype;
    u16 fielकरोffset;
पूर्ण PACKED;

अटल व्योम
qemu_cfg_e820(व्योम)
अणु
    अगर (!CONFIG_QEMU)
        वापस;

    अगर (romfile_find("etc/e820")) अणु
        // qemu_early_e820() has handled everything
        वापस;
    पूर्ण

    // QEMU_CFG_E820_TABLE has reservations only
    u32 count32;
    qemu_cfg_पढ़ो_entry(&count32, QEMU_CFG_E820_TABLE, माप(count32));
    अगर (count32) अणु
        काष्ठा e820_reservation entry;
        पूर्णांक i;
        क्रम (i = 0; i < count32; i++) अणु
            qemu_cfg_पढ़ो(&entry, माप(entry));
            e820_add(entry.address, entry.length, entry.type);
        पूर्ण
    पूर्ण अन्यथा अगर (runningOnKVM()) अणु
        // Backwards compatibility - provide hard coded range.
        // 4 pages beक्रमe the bios, 3 pages क्रम vmx tss pages, the
        // other page क्रम EPT real mode pagetable
        e820_add(0xfffbc000, 4*4096, E820_RESERVED);
    पूर्ण

    // Check क्रम memory over 4Gig in cmos
    u64 high = ((rtc_पढ़ो(CMOS_MEM_HIGHMEM_LOW) << 16)
                | ((u32)rtc_पढ़ो(CMOS_MEM_HIGHMEM_MID) << 24)
                | ((u64)rtc_पढ़ो(CMOS_MEM_HIGHMEM_HIGH) << 32));
    RamSizeOver4G = high;
    e820_add(0x100000000ull, high, E820_RAM);
    dम_लिखो(1, "RamSizeOver4G: 0x%016llx [cmos]\n", RamSizeOver4G);
पूर्ण

// Populate romfile entries क्रम legacy fw_cfg ports (that predate the
// "file" पूर्णांकerface).
अटल व्योम
qemu_cfg_legacy(व्योम)
अणु
    अगर (!CONFIG_QEMU)
        वापस;

    // Misc config items.
    qemu_romfile_add("etc/show-boot-menu", QEMU_CFG_BOOT_MENU, 0, 2);
    qemu_romfile_add("etc/irq0-override", QEMU_CFG_IRQ0_OVERRIDE, 0, 1);
    qemu_romfile_add("etc/max-cpus", QEMU_CFG_MAX_CPUS, 0, 2);

    // NUMA data
    u64 numacount;
    qemu_cfg_पढ़ो_entry(&numacount, QEMU_CFG_NUMA, माप(numacount));
    पूर्णांक max_cpu = romfile_loadपूर्णांक("etc/max-cpus", 0);
    qemu_romfile_add("etc/numa-cpu-map", QEMU_CFG_NUMA, माप(numacount)
                     , max_cpu*माप(u64));
    qemu_romfile_add("etc/numa-nodes", QEMU_CFG_NUMA
                     , माप(numacount) + max_cpu*माप(u64)
                     , numacount*माप(u64));

    // ACPI tables
    अक्षर name[128];
    u16 cnt;
    qemu_cfg_पढ़ो_entry(&cnt, QEMU_CFG_ACPI_TABLES, माप(cnt));
    पूर्णांक i, offset = माप(cnt);
    क्रम (i = 0; i < cnt; i++) अणु
        u16 len;
        qemu_cfg_पढ़ो(&len, माप(len));
        offset += माप(len);
        snम_लिखो(name, माप(name), "acpi/table%d", i);
        qemu_romfile_add(name, QEMU_CFG_ACPI_TABLES, offset, len);
        qemu_cfg_skip(len);
        offset += len;
    पूर्ण

    // SMBIOS info
    qemu_cfg_पढ़ो_entry(&cnt, QEMU_CFG_SMBIOS_ENTRIES, माप(cnt));
    offset = माप(cnt);
    क्रम (i = 0; i < cnt; i++) अणु
        काष्ठा qemu_smbios_header header;
        qemu_cfg_पढ़ो(&header, माप(header));
        अगर (header.headertype == SMBIOS_FIELD_ENTRY) अणु
            snम_लिखो(name, माप(name), "smbios/field%d-%d"
                     , header.tabletype, header.fielकरोffset);
            qemu_romfile_add(name, QEMU_CFG_SMBIOS_ENTRIES
                             , offset + माप(header)
                             , header.length - माप(header));
        पूर्ण अन्यथा अणु
            snम_लिखो(name, माप(name), "smbios/table%d-%d"
                     , header.tabletype, i);
            qemu_romfile_add(name, QEMU_CFG_SMBIOS_ENTRIES
                             , offset + 3, header.length - 3);
        पूर्ण
        qemu_cfg_skip(header.length - माप(header));
        offset += header.length;
    पूर्ण
पूर्ण

काष्ठा QemuCfgFile अणु
    u32  size;        /* file size */
    u16  select;      /* ग_लिखो this to 0x510 to पढ़ो it */
    u16  reserved;
    अक्षर name[56];
पूर्ण;

अटल पूर्णांक qemu_cfg_detect(व्योम)
अणु
    अगर (cfg_enabled)
        वापस 1;

    // Detect fw_cfg पूर्णांकerface.
    qemu_cfg_select(QEMU_CFG_SIGNATURE);
    अक्षर *sig = "QEMU";
    पूर्णांक i;
    क्रम (i = 0; i < 4; i++)
        अगर (inb(PORT_QEMU_CFG_DATA) != sig[i])
            वापस 0;

    dम_लिखो(1, "Found QEMU fw_cfg\n");
    cfg_enabled = 1;

    // Detect DMA पूर्णांकerface.
    u32 id;
    qemu_cfg_पढ़ो_entry(&id, QEMU_CFG_ID, माप(id));

    अगर (id & QEMU_CFG_VERSION_DMA) अणु
        dम_लिखो(1, "QEMU fw_cfg DMA interface supported\n");
        cfg_dma_enabled = 1;
    पूर्ण
    वापस 1;
पूर्ण

व्योम qemu_cfg_init(व्योम)
अणु
    अगर (!runningOnQEMU())
        वापस;

    अगर (!qemu_cfg_detect())
        वापस;

    // Populate romfiles क्रम legacy fw_cfg entries
    qemu_cfg_legacy();

    // Load files found in the fw_cfg file directory
    u32 count;
    qemu_cfg_पढ़ो_entry(&count, QEMU_CFG_खाता_सूची, माप(count));
    count = be32_to_cpu(count);
    u32 e;
    क्रम (e = 0; e < count; e++) अणु
        काष्ठा QemuCfgFile qfile;
        qemu_cfg_पढ़ो(&qfile, माप(qfile));
        qemu_romfile_add(qfile.name, be16_to_cpu(qfile.select)
                         , 0, be32_to_cpu(qfile.size));
    पूर्ण

    qemu_cfg_e820();

    अगर (romfile_find("etc/table-loader")) अणु
        acpi_pm_base = 0x0600;
        dम_लिखो(1, "Moving pm_base to 0x%x\n", acpi_pm_base);
    पूर्ण

    // serial console
    u16 nogfx = 0;
    qemu_cfg_पढ़ो_entry(&nogfx, QEMU_CFG_NOGRAPHIC, माप(nogfx));
    अगर (nogfx && !romfile_find("etc/sercon-port")
        && !romfile_find("vgaroms/sgabios.bin"))
        स्थिर_romfile_add_पूर्णांक("etc/sercon-port", PORT_SERIAL1);
पूर्ण

/*
 * This runs beक्रमe दो_स्मृति and romfile are पढ़ोy, so we have to work
 * with stack allocations and पढ़ो from fw_cfg in chunks.
 */
अटल पूर्णांक qemu_early_e820(व्योम)
अणु
    काष्ठा e820_reservation table;
    काष्ठा QemuCfgFile qfile;
    u32 select = 0, size = 0;
    u32 count, i;

    अगर (!qemu_cfg_detect())
        वापस 0;

    // find e820 table
    qemu_cfg_पढ़ो_entry(&count, QEMU_CFG_खाता_सूची, माप(count));
    count = be32_to_cpu(count);
    क्रम (i = 0; i < count; i++) अणु
        qemu_cfg_पढ़ो(&qfile, माप(qfile));
        अगर (स_भेद(qfile.name, "etc/e820", 9) != 0)
            जारी;
        select = be16_to_cpu(qfile.select);
        size = be32_to_cpu(qfile.size);
        अवरोध;
    पूर्ण
    अगर (select == 0) अणु
        // may happen on old qemu
        dम_लिखो(1, "qemu/e820: fw_cfg file etc/e820 not found\n");
        वापस 0;
    पूर्ण

    // walk e820 table
    qemu_cfg_select(select);
    count = size/माप(table);
    क्रम (i = 0, select = 0; i < count; i++) अणु
        qemu_cfg_पढ़ो(&table, माप(table));
        चयन (table.type) अणु
        हाल E820_RESERVED:
            e820_add(table.address, table.length, table.type);
            dम_लिखो(3, "qemu/e820: addr 0x%016llx len 0x%016llx [reserved]\n",
                    table.address, table.length);
            अवरोध;
        हाल E820_RAM:
            e820_add(table.address, table.length, table.type);
            dम_लिखो(1, "qemu/e820: addr 0x%016llx len 0x%016llx [RAM]\n",
                    table.address, table.length);
            अगर (table.address < 0x100000000LL) अणु
                // below 4g
                अगर (RamSize < table.address + table.length)
                    RamSize = table.address + table.length;
            पूर्ण अन्यथा अणु
                // above 4g
                अगर (RamSizeOver4G < table.address + table.length - 0x100000000LL)
                    RamSizeOver4G = table.address + table.length - 0x100000000LL;
            पूर्ण
        पूर्ण
    पूर्ण

    dम_लिखो(3, "qemu/e820: RamSize: 0x%08x\n", RamSize);
    dम_लिखो(3, "qemu/e820: RamSizeOver4G: 0x%016llx\n", RamSizeOver4G);
    वापस 1;
पूर्ण

<शैली गुरु>
// Internal dynamic memory allocations.
//
// Copyright (C) 2009-2013  Kevin O'Connor <kevin@koconnor.net>
//
// This file may be distributed under the terms of the GNU LGPLv3 license.

#समावेश "biosvar.h" // GET_BDA
#समावेश "config.h" // BUILD_BIOS_ADDR
#समावेश "e820map.h" // काष्ठा e820entry
#समावेश "list.h" // hlist_node
#समावेश "malloc.h" // _दो_स्मृति
#समावेश "memmap.h" // PAGE_SIZE
#समावेश "output.h" // dम_लिखो
#समावेश "stacks.h" // रुको_preempt
#समावेश "std/optionrom.h" // OPTION_ROM_ALIGN
#समावेश "string.h" // स_रखो

// Inक्रमmation on a reserved area.
काष्ठा allocinfo_s अणु
    काष्ठा hlist_node node;
    u32 range_start, range_end, alloc_size;
पूर्ण;

// Inक्रमmation on a tracked memory allocation.
काष्ठा allocdetail_s अणु
    काष्ठा allocinfo_s detailinfo;
    काष्ठा allocinfo_s datainfo;
    u32 handle;
पूर्ण;

// The various memory zones.
काष्ठा zone_s अणु
    काष्ठा hlist_head head;
पूर्ण;

काष्ठा zone_s ZoneLow VARVERIFY32INIT, ZoneHigh VARVERIFY32INIT;
काष्ठा zone_s ZoneFSeg VARVERIFY32INIT;
काष्ठा zone_s ZoneTmpLow VARVERIFY32INIT, ZoneTmpHigh VARVERIFY32INIT;

अटल काष्ठा zone_s *Zones[] VARVERIFY32INIT = अणु
    &ZoneTmpLow, &ZoneLow, &ZoneFSeg, &ZoneTmpHigh, &ZoneHigh
पूर्ण;


/****************************************************************
 * low-level memory reservations
 ****************************************************************/

// Find and reserve space from a given zone
अटल u32
alloc_new(काष्ठा zone_s *zone, u32 size, u32 align, काष्ठा allocinfo_s *fill)
अणु
    काष्ठा allocinfo_s *info;
    hlist_क्रम_each_entry(info, &zone->head, node) अणु
        u32 alloc_end = info->range_start + info->alloc_size;
        u32 range_end = info->range_end;
        u32 new_range_end = ALIGN_DOWN(range_end - size, align);
        अगर (new_range_end >= alloc_end && new_range_end <= range_end) अणु
            // Found space - now reserve it.
            fill->range_start = new_range_end;
            fill->range_end = range_end;
            fill->alloc_size = size;

            info->range_end = new_range_end;
            hlist_add_beक्रमe(&fill->node, &info->node);
            वापस new_range_end;
        पूर्ण
    पूर्ण
    वापस 0;
पूर्ण

// Reserve space क्रम a 'struct allocdetail_s' and fill
अटल काष्ठा allocdetail_s *
alloc_new_detail(काष्ठा allocdetail_s *temp)
अणु
    u32 detail_addr = alloc_new(&ZoneTmpHigh, माप(काष्ठा allocdetail_s)
                                , MALLOC_MIN_ALIGN, &temp->detailinfo);
    अगर (!detail_addr) अणु
        detail_addr = alloc_new(&ZoneTmpLow, माप(काष्ठा allocdetail_s)
                                , MALLOC_MIN_ALIGN, &temp->detailinfo);
        अगर (!detail_addr) अणु
            warn_noalloc();
            वापस शून्य;
        पूर्ण
    पूर्ण
    काष्ठा allocdetail_s *detail = memremap(detail_addr, माप(*detail));

    // Fill final 'detail' allocation from data in 'temp'
    स_नकल(detail, temp, माप(*detail));
    hlist_replace(&temp->detailinfo.node, &detail->detailinfo.node);
    hlist_replace(&temp->datainfo.node, &detail->datainfo.node);
    वापस detail;
पूर्ण

// Add new memory to a zone
अटल व्योम
alloc_add(काष्ठा zone_s *zone, u32 start, u32 end)
अणु
    // Find position to add space
    काष्ठा allocinfo_s *info;
    काष्ठा hlist_node **pprev;
    hlist_क्रम_each_entry_pprev(info, pprev, &zone->head, node) अणु
        अगर (info->range_start < start)
            अवरोध;
    पूर्ण

    // Add space using temporary allocation info.
    काष्ठा allocdetail_s tempdetail;
    tempdetail.handle = MALLOC_DEFAULT_HANDLE;
    tempdetail.datainfo.range_start = start;
    tempdetail.datainfo.range_end = end;
    tempdetail.datainfo.alloc_size = 0;
    hlist_add(&tempdetail.datainfo.node, pprev);

    // Allocate final allocation info.
    काष्ठा allocdetail_s *detail = alloc_new_detail(&tempdetail);
    अगर (!detail)
        hlist_del(&tempdetail.datainfo.node);
पूर्ण

// Release space allocated with alloc_new()
अटल व्योम
alloc_मुक्त(काष्ठा allocinfo_s *info)
अणु
    काष्ठा allocinfo_s *next = container_of_or_null(
        info->node.next, काष्ठा allocinfo_s, node);
    अगर (next && next->range_end == info->range_start)
        next->range_end = info->range_end;
    hlist_del(&info->node);
पूर्ण

// Search all zones क्रम an allocation obtained from alloc_new()
अटल काष्ठा allocinfo_s *
alloc_find(u32 data)
अणु
    पूर्णांक i;
    क्रम (i=0; i<ARRAY_SIZE(Zones); i++) अणु
        काष्ठा allocinfo_s *info;
        hlist_क्रम_each_entry(info, &Zones[i]->head, node) अणु
            अगर (info->range_start == data)
                वापस info;
        पूर्ण
    पूर्ण
    वापस शून्य;
पूर्ण

// Find the lowest memory range added by alloc_add()
अटल काष्ठा allocinfo_s *
alloc_find_lowest(काष्ठा zone_s *zone)
अणु
    काष्ठा allocinfo_s *info, *last = शून्य;
    hlist_क्रम_each_entry(info, &zone->head, node) अणु
        last = info;
    पूर्ण
    वापस last;
पूर्ण


/****************************************************************
 * ebda movement
 ****************************************************************/

// Move ebda
अटल पूर्णांक
relocate_ebda(u32 newebda, u32 oldebda, u8 ebda_size)
अणु
    u32 lowram = GET_BDA(mem_size_kb) * 1024;
    अगर (oldebda != lowram)
        // EBDA isn't at end of ram - give up.
        वापस -1;

    // Do copy
    स_हटाओ((व्योम*)newebda, (व्योम*)oldebda, ebda_size * 1024);

    // Update indexes
    dम_लिखो(1, "ebda moved from %x to %x\n", oldebda, newebda);
    SET_BDA(mem_size_kb, newebda / 1024);
    SET_BDA(ebda_seg, FLATPTR_TO_SEG(newebda));
    वापस 0;
पूर्ण

// Support expanding the ZoneLow dynamically.
अटल u32
zonelow_expand(u32 size, u32 align, काष्ठा allocinfo_s *fill)
अणु
    // Make sure to not move ebda जबतक an optionrom is running.
    अगर (unlikely(रुको_preempt())) अणु
        u32 data = alloc_new(&ZoneLow, size, align, fill);
        अगर (data)
            वापस data;
    पूर्ण

    काष्ठा allocinfo_s *info = alloc_find_lowest(&ZoneLow);
    अगर (!info)
        वापस 0;
    u32 oldpos = info->range_end;
    u32 newpos = ALIGN_DOWN(oldpos - size, align);
    u32 bottom = info->range_start + info->alloc_size;
    अगर (newpos >= bottom && newpos <= oldpos)
        // Space alपढ़ोy present.
        वापस alloc_new(&ZoneLow, size, align, fill);
    u16 ebda_seg = get_ebda_seg();
    u32 ebda_pos = (u32)MAKE_FLATPTR(ebda_seg, 0);
    u8 ebda_size = GET_EBDA(ebda_seg, size);
    u32 ebda_end = ebda_pos + ebda_size * 1024;
    अगर (ebda_end != bottom)
        // Something अन्यथा is after ebda - can't use any existing space.
        newpos = ALIGN_DOWN(ebda_end - size, align);
    u32 newbottom = ALIGN_DOWN(newpos, 1024);
    u32 newebda = ALIGN_DOWN(newbottom - ebda_size * 1024, 1024);
    अगर (newebda < BUILD_EBDA_MINIMUM)
        // Not enough space.
        वापस 0;

    // Move ebda
    पूर्णांक ret = relocate_ebda(newebda, ebda_pos, ebda_size);
    अगर (ret)
        वापस 0;

    // Update zone
    अगर (ebda_end == bottom)
        info->range_start = newbottom;
    अन्यथा
        alloc_add(&ZoneLow, newbottom, ebda_end);

    वापस alloc_new(&ZoneLow, size, align, fill);
पूर्ण


/****************************************************************
 * tracked memory allocations
 ****************************************************************/

// Allocate physical memory from the given zone and track it as a PMM allocation
u32
दो_स्मृति_palloc(काष्ठा zone_s *zone, u32 size, u32 align)
अणु
    ASSERT32FLAT();
    अगर (!size)
        वापस 0;

    // Find and reserve space क्रम मुख्य allocation
    काष्ठा allocdetail_s tempdetail;
    tempdetail.handle = MALLOC_DEFAULT_HANDLE;
    u32 data = alloc_new(zone, size, align, &tempdetail.datainfo);
    अगर (!CONFIG_MALLOC_UPPERMEMORY && !data && zone == &ZoneLow)
        data = zonelow_expand(size, align, &tempdetail.datainfo);
    अगर (!data)
        वापस 0;

    // Find and reserve space क्रम bookkeeping.
    काष्ठा allocdetail_s *detail = alloc_new_detail(&tempdetail);
    अगर (!detail) अणु
        alloc_मुक्त(&tempdetail.datainfo);
        वापस 0;
    पूर्ण

    dम_लिखो(8, "phys_alloc zone=%p size=%d align=%x ret=%x (detail=%p)\n"
            , zone, size, align, data, detail);

    वापस data;
पूर्ण

// Allocate भव memory from the given zone
व्योम * __दो_स्मृति
_दो_स्मृति(काष्ठा zone_s *zone, u32 size, u32 align)
अणु
    वापस memremap(दो_स्मृति_palloc(zone, size, align), size);
पूर्ण

// Free a data block allocated with phys_alloc
पूर्णांक
दो_स्मृति_pमुक्त(u32 data)
अणु
    ASSERT32FLAT();
    काष्ठा allocinfo_s *info = alloc_find(data);
    अगर (!info || data == virt_to_phys(info) || !info->alloc_size)
        वापस -1;
    काष्ठा allocdetail_s *detail = container_of(
        info, काष्ठा allocdetail_s, datainfo);
    dम_लिखो(8, "phys_free %x (detail=%p)\n", data, detail);
    alloc_मुक्त(info);
    alloc_मुक्त(&detail->detailinfo);
    वापस 0;
पूर्ण

व्योम
मुक्त(व्योम *data)
अणु
    अगर (!data)
        वापस;
    पूर्णांक ret = दो_स्मृति_pमुक्त(virt_to_phys(data));
    अगर (ret)
        warn_पूर्णांकernalerror();
पूर्ण

// Find the amount of मुक्त space in a given zone.
u32
दो_स्मृति_माला_लोpace(काष्ठा zone_s *zone)
अणु
    // XXX - करोesn't account क्रम ZoneLow being able to grow.
    // XXX - results not reliable when CONFIG_THREAD_OPTIONROMS
    u32 maxspace = 0;
    काष्ठा allocinfo_s *info;
    hlist_क्रम_each_entry(info, &zone->head, node) अणु
        u32 space = info->range_end - info->range_start - info->alloc_size;
        अगर (space > maxspace)
            maxspace = space;
    पूर्ण

    अगर (zone != &ZoneTmpHigh && zone != &ZoneTmpLow)
        वापस maxspace;
    // Account क्रम space needed क्रम PMM tracking.
    u32 reserve = ALIGN(माप(काष्ठा allocdetail_s), MALLOC_MIN_ALIGN);
    अगर (maxspace <= reserve)
        वापस 0;
    वापस maxspace - reserve;
पूर्ण

// Set a handle associated with an allocation.
व्योम
दो_स्मृति_sethandle(u32 data, u32 handle)
अणु
    ASSERT32FLAT();
    काष्ठा allocinfo_s *info = alloc_find(data);
    अगर (!info || data == virt_to_phys(info) || !info->alloc_size)
        वापस;
    काष्ठा allocdetail_s *detail = container_of(
        info, काष्ठा allocdetail_s, datainfo);
    detail->handle = handle;
पूर्ण

// Find the data block allocated with phys_alloc with a given handle.
u32
दो_स्मृति_findhandle(u32 handle)
अणु
    पूर्णांक i;
    क्रम (i=0; i<ARRAY_SIZE(Zones); i++) अणु
        काष्ठा allocinfo_s *info;
        hlist_क्रम_each_entry(info, &Zones[i]->head, node) अणु
            अगर (info->range_start != virt_to_phys(info))
                जारी;
            काष्ठा allocdetail_s *detail = container_of(
                info, काष्ठा allocdetail_s, detailinfo);
            अगर (detail->handle == handle)
                वापस detail->datainfo.range_start;
        पूर्ण
    पूर्ण
    वापस 0;
पूर्ण


/****************************************************************
 * 0xc0000-0xf0000 management
 ****************************************************************/

अटल u32 RomEnd = BUILD_ROM_START;
अटल काष्ठा allocinfo_s *RomBase;

#घोषणा OPROM_HEADER_RESERVE 16

// Return the maximum memory position option roms may use.
u32
rom_get_max(व्योम)
अणु
    अगर (CONFIG_MALLOC_UPPERMEMORY)
        वापस ALIGN_DOWN(RomBase->range_end - OPROM_HEADER_RESERVE
                          , OPTION_ROM_ALIGN);
    वापस SYMBOL(final_पढ़ोonly_start);
पूर्ण

// Return the end of the last deployed option rom.
u32
rom_get_last(व्योम)
अणु
    वापस RomEnd;
पूर्ण

// Request space क्रम an optionrom in 0xc0000-0xf0000 area.
काष्ठा rom_header *
rom_reserve(u32 size)
अणु
    u32 newend = ALIGN(RomEnd + size, OPTION_ROM_ALIGN);
    अगर (newend > rom_get_max())
        वापस शून्य;
    अगर (CONFIG_MALLOC_UPPERMEMORY) अणु
        अगर (newend < SYMBOL(zonelow_base))
            newend = SYMBOL(zonelow_base);
        RomBase->range_start = newend + OPROM_HEADER_RESERVE;
    पूर्ण
    वापस (व्योम*)RomEnd;
पूर्ण

// Confirm space as in use by an optionrom.
पूर्णांक
rom_confirm(u32 size)
अणु
    व्योम *new = rom_reserve(size);
    अगर (!new) अणु
        warn_noalloc();
        वापस -1;
    पूर्ण
    RomEnd = ALIGN(RomEnd + size, OPTION_ROM_ALIGN);
    वापस 0;
पूर्ण


/****************************************************************
 * Setup
 ****************************************************************/

व्योम
दो_स्मृति_preinit(व्योम)
अणु
    ASSERT32FLAT();
    dम_लिखो(3, "malloc preinit\n");

    // Don't declare any memory between 0xa0000 and 0x100000
    e820_हटाओ(BUILD_LOWRAM_END, BUILD_BIOS_ADDR-BUILD_LOWRAM_END);

    // Mark known areas as reserved.
    e820_add(BUILD_BIOS_ADDR, BUILD_BIOS_SIZE, E820_RESERVED);

    // Populate temp high ram
    u32 highram = 0;
    पूर्णांक i;
    क्रम (i=e820_count-1; i>=0; i--) अणु
        काष्ठा e820entry *en = &e820_list[i];
        u64 end = en->start + en->size;
        अगर (end < 1024*1024)
            अवरोध;
        अगर (en->type != E820_RAM || end > 0xffffffff)
            जारी;
        u32 s = en->start, e = end;
        अगर (!highram) अणु
            u32 newe = ALIGN_DOWN(e - BUILD_MAX_HIGHTABLE, MALLOC_MIN_ALIGN);
            अगर (newe <= e && newe >= s) अणु
                highram = newe;
                e = newe;
            पूर्ण
        पूर्ण
        alloc_add(&ZoneTmpHigh, s, e);
    पूर्ण

    // Populate regions
    alloc_add(&ZoneTmpLow, BUILD_STACK_ADDR, BUILD_EBDA_MINIMUM);
    अगर (highram) अणु
        alloc_add(&ZoneHigh, highram, highram + BUILD_MAX_HIGHTABLE);
        e820_add(highram, BUILD_MAX_HIGHTABLE, E820_RESERVED);
    पूर्ण
पूर्ण

व्योम
दो_स्मृति_csm_preinit(u32 low_pmm, u32 low_pmm_size, u32 hi_pmm, u32 hi_pmm_size)
अणु
    ASSERT32FLAT();

    अगर (hi_pmm_size > BUILD_MAX_HIGHTABLE) अणु
        u32 hi_pmm_end = hi_pmm + hi_pmm_size;
        alloc_add(&ZoneTmpHigh, hi_pmm, hi_pmm_end - BUILD_MAX_HIGHTABLE);
        alloc_add(&ZoneHigh, hi_pmm_end - BUILD_MAX_HIGHTABLE, hi_pmm_end);
    पूर्ण अन्यथा अणु
        alloc_add(&ZoneTmpHigh, hi_pmm, hi_pmm + hi_pmm_size);
    पूर्ण
    alloc_add(&ZoneTmpLow, low_pmm, low_pmm + low_pmm_size);
पूर्ण

u32 LegacyRamSize VARFSEG;

// Calculate the maximum ramsize (less than 4gig) from e820 map.
अटल व्योम
calcRamSize(व्योम)
अणु
    u32 rs = 0;
    पूर्णांक i;
    क्रम (i=e820_count-1; i>=0; i--) अणु
        काष्ठा e820entry *en = &e820_list[i];
        u64 end = en->start + en->size;
        u32 type = en->type;
        अगर (end <= 0xffffffff && (type == E820_ACPI || type == E820_RAM)) अणु
            rs = end;
            अवरोध;
        पूर्ण
    पूर्ण
    LegacyRamSize = rs >= 1024*1024 ? rs : 1024*1024;
पूर्ण

// Update poपूर्णांकers after code relocation.
व्योम
दो_स्मृति_init(व्योम)
अणु
    ASSERT32FLAT();
    dम_लिखो(3, "malloc init\n");

    अगर (CONFIG_RELOCATE_INIT) अणु
        // Fixup दो_स्मृति poपूर्णांकers after relocation
        पूर्णांक i;
        क्रम (i=0; i<ARRAY_SIZE(Zones); i++) अणु
            काष्ठा zone_s *zone = Zones[i];
            अगर (zone->head.first)
                zone->head.first->pprev = &zone->head.first;
        पूर्ण
    पूर्ण

    // Initialize low-memory region
    स_हटाओ(VSYMBOL(final_varlow_start), VSYMBOL(varlow_start)
            , SYMBOL(varlow_end) - SYMBOL(varlow_start));
    अगर (CONFIG_MALLOC_UPPERMEMORY) अणु
        alloc_add(&ZoneLow, SYMBOL(zonelow_base) + OPROM_HEADER_RESERVE
                  , SYMBOL(final_varlow_start));
        RomBase = alloc_find_lowest(&ZoneLow);
    पूर्ण अन्यथा अणु
        alloc_add(&ZoneLow, ALIGN_DOWN(SYMBOL(final_varlow_start), 1024)
                  , SYMBOL(final_varlow_start));
    पूर्ण

    // Add space available in f-segment to ZoneFSeg
    स_रखो(VSYMBOL(zonefseg_start), 0
           , SYMBOL(zonefseg_end) - SYMBOL(zonefseg_start));
    alloc_add(&ZoneFSeg, SYMBOL(zonefseg_start), SYMBOL(zonefseg_end));

    calcRamSize();
पूर्ण

व्योम
दो_स्मृति_prepboot(व्योम)
अणु
    ASSERT32FLAT();
    dम_लिखो(3, "malloc finalize\n");

    u32 base = rom_get_max();
    स_रखो((व्योम*)RomEnd, 0, base-RomEnd);
    अगर (CONFIG_MALLOC_UPPERMEMORY) अणु
        // Place an optionrom signature around used low mem area.
        काष्ठा rom_header *dummyrom = (व्योम*)base;
        dummyrom->signature = OPTION_ROM_SIGNATURE;
        पूर्णांक size = (BUILD_BIOS_ADDR - base) / 512;
        dummyrom->size = (size > 255) ? 255 : size;
    पूर्ण

    // Reserve more low-mem अगर needed.
    u32 endlow = GET_BDA(mem_size_kb)*1024;
    e820_add(endlow, BUILD_LOWRAM_END-endlow, E820_RESERVED);

    // Clear unused f-seg ram.
    काष्ठा allocinfo_s *info = alloc_find_lowest(&ZoneFSeg);
    u32 size = info->range_end - info->range_start;
    स_रखो(memremap(info->range_start, size), 0, size);
    dम_लिखो(1, "Space available for UMB: %x-%x, %x-%x\n"
            , RomEnd, base, info->range_start, info->range_end);

    // Give back unused high ram.
    info = alloc_find_lowest(&ZoneHigh);
    अगर (info) अणु
        u32 giveback = ALIGN_DOWN(info->range_end-info->range_start, PAGE_SIZE);
        e820_add(info->range_start, giveback, E820_RAM);
        dम_लिखो(1, "Returned %d bytes of ZoneHigh\n", giveback);
    पूर्ण

    calcRamSize();
पूर्ण

<शैली गुरु>
// Support क्रम booting from cdroms (the "El Torito" spec).
//
// Copyright (C) 2008,2009  Kevin O'Connor <kevin@koconnor.net>
// Copyright (C) 2002  MandrakeSoft S.A.
//
// This file may be distributed under the terms of the GNU LGPLv3 license.

#समावेश "biosvar.h" // GET_GLOBAL
#समावेश "block.h" // काष्ठा drive_s
#समावेश "bregs.h" // काष्ठा bregs
#समावेश "hw/ata.h" // ATA_CMD_REQUEST_SENSE
#समावेश "hw/blockcmd.h" // CDB_CMD_REQUEST_SENSE
#समावेश "malloc.h" // मुक्त
#समावेश "output.h" // dम_लिखो
#समावेश "std/disk.h" // DISK_RET_SUCCESS
#समावेश "string.h" // स_रखो
#समावेश "util.h" // cdrom_prepboot
#समावेश "tcgbios.h" // tpm_*


/****************************************************************
 * CD emulation
 ****************************************************************/

काष्ठा eltorito_s CDEmu VARLOW = अणु .size=माप(CDEmu) पूर्ण;
काष्ठा drive_s *emulated_drive_gf VARLOW;
काष्ठा drive_s *cdemu_drive_gf VARFSEG;

अटल पूर्णांक
cdemu_पढ़ो(काष्ठा disk_op_s *op)
अणु
    काष्ठा drive_s *drive_gf = GET_LOW(emulated_drive_gf);
    काष्ठा disk_op_s करोp;
    करोp.drive_fl = drive_gf;
    करोp.command = op->command;
    करोp.lba = GET_LOW(CDEmu.ilba) + op->lba / 4;

    पूर्णांक count = op->count;
    op->count = 0;
    u8 *cdbuf_fl = GET_GLOBAL(bounce_buf_fl);

    अगर (op->lba & 3) अणु
        // Partial पढ़ो of first block.
        करोp.count = 1;
        करोp.buf_fl = cdbuf_fl;
        पूर्णांक ret = process_op(&करोp);
        अगर (ret)
            वापस ret;
        u8 thiscount = 4 - (op->lba & 3);
        अगर (thiscount > count)
            thiscount = count;
        count -= thiscount;
        स_नकल_fl(op->buf_fl, cdbuf_fl + (op->lba & 3) * 512, thiscount * 512);
        op->buf_fl += thiscount * 512;
        op->count += thiscount;
        करोp.lba++;
    पूर्ण

    अगर (count > 3) अणु
        // Read n number of regular blocks.
        करोp.count = count / 4;
        करोp.buf_fl = op->buf_fl;
        पूर्णांक ret = process_op(&करोp);
        op->count += करोp.count * 4;
        अगर (ret)
            वापस ret;
        u8 thiscount = count & ~3;
        count &= 3;
        op->buf_fl += thiscount * 512;
        करोp.lba += thiscount / 4;
    पूर्ण

    अगर (count) अणु
        // Partial पढ़ो on last block.
        करोp.count = 1;
        करोp.buf_fl = cdbuf_fl;
        पूर्णांक ret = process_op(&करोp);
        अगर (ret)
            वापस ret;
        u8 thiscount = count;
        स_नकल_fl(op->buf_fl, cdbuf_fl, thiscount * 512);
        op->count += thiscount;
    पूर्ण

    वापस DISK_RET_SUCCESS;
पूर्ण

पूर्णांक
cdemu_process_op(काष्ठा disk_op_s *op)
अणु
    अगर (!CONFIG_CDROM_EMU)
        वापस 0;

    चयन (op->command) अणु
    हाल CMD_READ:
        वापस cdemu_पढ़ो(op);
    हाल CMD_WRITE:
    हाल CMD_FORMAT:
        वापस DISK_RET_EWRITEPROTECT;
    शेष:
        वापस शेष_process_op(op);
    पूर्ण
पूर्ण

व्योम
cdrom_prepboot(व्योम)
अणु
    अगर (!CONFIG_CDROM_EMU)
        वापस;
    अगर (!CDCount)
        वापस;
    अगर (create_bounce_buf() < 0)
        वापस;

    काष्ठा drive_s *drive = दो_स्मृति_fseg(माप(*drive));
    अगर (!drive) अणु
        warn_noalloc();
        वापस;
    पूर्ण
    cdemu_drive_gf = drive;
    स_रखो(drive, 0, माप(*drive));
    drive->type = DTYPE_CDEMU;
    drive->blksize = DISK_SECTOR_SIZE;
    drive->sectors = (u64)-1;
पूर्ण


/****************************************************************
 * CD booting
 ****************************************************************/

पूर्णांक
cdrom_boot(काष्ठा drive_s *drive)
अणु
    ASSERT32FLAT();
    काष्ठा disk_op_s करोp;
    पूर्णांक cdid = getDriveId(EXTTYPE_CD, drive);
    स_रखो(&करोp, 0, माप(करोp));
    करोp.drive_fl = drive;
    अगर (!करोp.drive_fl || cdid < 0)
        वापस 1;

    पूर्णांक ret = scsi_is_पढ़ोy(&करोp);
    अगर (ret)
        dम_लिखो(5, "scsi_is_ready returned %d\n", ret);

    // Read the Boot Record Volume Descriptor
    u8 buffer[CDROM_SECTOR_SIZE];
    करोp.command = CMD_READ;
    करोp.lba = 0x11;
    करोp.count = 1;
    करोp.buf_fl = buffer;
    ret = process_op(&करोp);
    अगर (ret)
        वापस 3;

    // Validity checks
    अगर (buffer[0])
        वापस 4;
    अगर (म_भेद((अक्षर*)&buffer[1], "CD001\001EL TORITO SPECIFICATION") != 0)
        वापस 5;

    // ok, now we calculate the Boot catalog address
    u32 lba = *(u32*)&buffer[0x47];

    // And we पढ़ो the Boot Catalog
    करोp.lba = lba;
    करोp.count = 1;
    ret = process_op(&करोp);
    अगर (ret)
        वापस 7;

    // Validation entry
    अगर (buffer[0x00] != 0x01)
        वापस 8;   // Header
    अगर (buffer[0x01] != 0x00)
        वापस 9;   // Platक्रमm
    अगर (buffer[0x1E] != 0x55)
        वापस 10;  // key 1
    अगर (buffer[0x1F] != 0xAA)
        वापस 10;  // key 2

    // Initial/Default Entry
    अगर (buffer[0x20] != 0x88)
        वापस 11; // Bootable

    /* measure 2048 bytes (one sector) */
    tpm_add_cdrom_catalog(MAKE_FLATPTR(GET_SEG(SS), buffer), माप(buffer));

    // Fill in el-torito cdrom emulation fields.
    emulated_drive_gf = drive;
    u8 media = buffer[0x21];

    u16 boot_segment = *(u16*)&buffer[0x22];
    अगर (!boot_segment)
        boot_segment = 0x07C0;
    CDEmu.load_segment = boot_segment;
    CDEmu.buffer_segment = 0x0000;

    u16 nbsectors = *(u16*)&buffer[0x26];
    CDEmu.sector_count = nbsectors;

    lba = *(u32*)&buffer[0x28];
    CDEmu.ilba = lba;

    CDEmu.controller_index = drive->cntl_id / 2;
    CDEmu.device_spec = drive->cntl_id % 2;

    // And we पढ़ो the image in memory
    nbsectors = DIV_ROUND_UP(nbsectors, 4);
    करोp.lba = lba;
    करोp.buf_fl = MAKE_FLATPTR(boot_segment, 0);
    जबतक (nbsectors) अणु
        पूर्णांक count = nbsectors;
        अगर (count > 64*1024/CDROM_SECTOR_SIZE)
            count = 64*1024/CDROM_SECTOR_SIZE;
        करोp.count = count;
        ret = process_op(&करोp);
        अगर (ret)
            वापस 12;
        nbsectors -= count;
        करोp.lba += count;
        करोp.buf_fl += count*CDROM_SECTOR_SIZE;
    पूर्ण

    अगर (media == 0) अणु
        // No emulation requested - वापस success.
        CDEmu.emulated_drive = EXTSTART_CD + cdid;
        वापस 0;
    पूर्ण

    // Emulation of a floppy/harddisk requested
    अगर (! CONFIG_CDROM_EMU || !cdemu_drive_gf)
        वापस 13;

    // Set emulated drive id and increase bios installed hardware
    // number of devices
    अगर (media < 4) अणु
        // Floppy emulation
        CDEmu.emulated_drive = 0x00;
        // XXX - get and set actual floppy count.
        set_equipment_flags(0x41, 0x41);

        चयन (media) अणु
        हाल 0x01:  // 1.2M floppy
            CDEmu.chs.sptcyl = 15;
            CDEmu.chs.cyllow = 79;
            CDEmu.chs.heads = 1;
            अवरोध;
        हाल 0x02:  // 1.44M floppy
            CDEmu.chs.sptcyl = 18;
            CDEmu.chs.cyllow = 79;
            CDEmu.chs.heads = 1;
            अवरोध;
        हाल 0x03:  // 2.88M floppy
            CDEmu.chs.sptcyl = 36;
            CDEmu.chs.cyllow = 79;
            CDEmu.chs.heads = 1;
            अवरोध;
        पूर्ण
    पूर्ण अन्यथा अणु
        // Harddrive emulation
        CDEmu.emulated_drive = 0x80;
        SET_BDA(hdcount, GET_BDA(hdcount) + 1);

        // Peak at partition table to get chs.
        काष्ठा mbr_s *mbr = MAKE_FLATPTR(boot_segment, 0);
        CDEmu.chs = mbr->partitions[0].last;
    पूर्ण

    // everything is ok, so from now on, the emulation is active
    CDEmu.media = media;
    dम_लिखो(6, "cdemu media=%d\n", media);

    वापस 0;
पूर्ण

// check अगर media is present and the drive is bootable.
// in हाल it is वापस the volume label.
अक्षर*
cdrom_media_info(काष्ठा drive_s *drive)
अणु
    ASSERT32FLAT();

    काष्ठा disk_op_s करोp;
    स_रखो(&करोp, 0, माप(करोp));
    करोp.drive_fl = drive;

    पूर्णांक ret = scsi_is_पढ़ोy(&करोp);
    अगर (ret)
        वापस शून्य;

    // Read the Boot Record Volume Descriptor
    u8 buffer[CDROM_SECTOR_SIZE];
    करोp.command = CMD_READ;
    करोp.lba = 0x11;
    करोp.count = 1;
    करोp.buf_fl = buffer;
    ret = process_op(&करोp);
    अगर (ret)
        वापस शून्य;

    // Is it bootable?
    अगर (buffer[0])
        वापस शून्य;
    अगर (म_भेद((अक्षर*)&buffer[1], "CD001\001EL TORITO SPECIFICATION") != 0)
        वापस शून्य;

    // Read the Primary Volume Descriptor
    करोp.command = CMD_READ;
    करोp.lba = 0x10;
    करोp.count = 1;
    करोp.buf_fl = buffer;
    ret = process_op(&करोp);
    अगर (ret)
        वापस शून्य;

    // Read volume id, trim trailing spaces
    अक्षर *volume = znम_लिखो(30, "%s", buffer + 40);
    nullTrailingSpace(volume);
    वापस volume;
पूर्ण

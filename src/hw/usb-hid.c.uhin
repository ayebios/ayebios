<शैली गुरु>
// Code क्रम handling USB Human Interface Devices (HID).
//
// Copyright (C) 2009  Kevin O'Connor <kevin@koconnor.net>
//
// This file may be distributed under the terms of the GNU LGPLv3 license.

#समावेश "biosvar.h" // GET_GLOBAL
#समावेश "config.h" // CONFIG_*
#समावेश "output.h" // dम_लिखो
#समावेश "ps2port.h" // ATKBD_CMD_GETID
#समावेश "usb.h" // usb_ctrlrequest
#समावेश "usb-hid.h" // usb_keyboard_setup
#समावेश "util.h" // process_key

काष्ठा usb_pipe *keyboard_pipe VARFSEG;
काष्ठा usb_pipe *mouse_pipe VARFSEG;


/****************************************************************
 * Setup
 ****************************************************************/

// Send USB HID protocol message.
अटल पूर्णांक
set_protocol(काष्ठा usb_pipe *pipe, u16 val)
अणु
    काष्ठा usb_ctrlrequest req;
    req.bRequestType = USB_सूची_OUT | USB_TYPE_CLASS | USB_RECIP_INTERFACE;
    req.bRequest = HID_REQ_SET_PROTOCOL;
    req.wValue = val;
    req.wIndex = 0;
    req.wLength = 0;
    वापस usb_send_शेष_control(pipe, &req, शून्य);
पूर्ण

// Send USB HID SetIdle request.
अटल पूर्णांक
set_idle(काष्ठा usb_pipe *pipe, पूर्णांक ms)
अणु
    काष्ठा usb_ctrlrequest req;
    req.bRequestType = USB_सूची_OUT | USB_TYPE_CLASS | USB_RECIP_INTERFACE;
    req.bRequest = HID_REQ_SET_IDLE;
    req.wValue = (ms/4)<<8;
    req.wIndex = 0;
    req.wLength = 0;
    वापस usb_send_शेष_control(pipe, &req, शून्य);
पूर्ण

#घोषणा KEYREPEATWAITMS 500
#घोषणा KEYREPEATMS 33

// Format of USB keyboard event data
काष्ठा keyevent अणु
    u8 modअगरiers;
    u8 reserved;
    u8 keys[6];
पूर्ण;

#घोषणा MAX_KBD_EVENT 16

अटल पूर्णांक
usb_kbd_setup(काष्ठा usbdevice_s *usbdev
              , काष्ठा usb_endpoपूर्णांक_descriptor *epdesc)
अणु
    अगर (! CONFIG_USB_KEYBOARD)
        वापस -1;
    अगर (keyboard_pipe)
        // XXX - this enables the first found keyboard (could be अक्रमom)
        वापस -1;

    अगर (epdesc->wMaxPacketSize < माप(काष्ठा keyevent)
        || epdesc->wMaxPacketSize > MAX_KBD_EVENT) अणु
        dम_लिखो(1, "USB keyboard wMaxPacketSize=%d; aborting\n"
                , epdesc->wMaxPacketSize);
        वापस -1;
    पूर्ण

    // Enable "boot" protocol.
    पूर्णांक ret = set_protocol(usbdev->defpipe, 0);
    अगर (ret)
        वापस -1;
    // Periodically send reports to enable key repeat.
    ret = set_idle(usbdev->defpipe, KEYREPEATMS);
    अगर (ret)
        dम_लिखो(3, "Warning: Failed to set key repeat rate\n");

    keyboard_pipe = usb_alloc_pipe(usbdev, epdesc);
    अगर (!keyboard_pipe)
        वापस -1;

    dम_लिखो(1, "USB keyboard initialized\n");
    वापस 0;
पूर्ण

// Format of USB mouse event data
काष्ठा mouseevent अणु
    u8 buttons;
    u8 x, y;
पूर्ण;

#घोषणा MAX_MOUSE_EVENT 8

अटल पूर्णांक
usb_mouse_setup(काष्ठा usbdevice_s *usbdev
                , काष्ठा usb_endpoपूर्णांक_descriptor *epdesc)
अणु
    अगर (! CONFIG_USB_MOUSE)
        वापस -1;
    अगर (mouse_pipe)
        // XXX - this enables the first found mouse (could be अक्रमom)
        वापस -1;

    अगर (epdesc->wMaxPacketSize < माप(काष्ठा mouseevent)
        || epdesc->wMaxPacketSize > MAX_MOUSE_EVENT) अणु
        dम_लिखो(1, "USB mouse wMaxPacketSize=%d; aborting\n"
                , epdesc->wMaxPacketSize);
        वापस -1;
    पूर्ण

    // Enable "boot" protocol.
    पूर्णांक ret = set_protocol(usbdev->defpipe, 0);
    अगर (ret)
        वापस -1;

    mouse_pipe = usb_alloc_pipe(usbdev, epdesc);
    अगर (!mouse_pipe)
        वापस -1;

    dम_लिखो(1, "USB mouse initialized\n");
    वापस 0;
पूर्ण

// Initialize a found USB HID device (अगर applicable).
पूर्णांक
usb_hid_setup(काष्ठा usbdevice_s *usbdev)
अणु
    अगर (! CONFIG_USB_KEYBOARD && ! CONFIG_USB_MOUSE)
        वापस -1;
    dम_लिखो(2, "usb_hid_setup %p\n", usbdev->defpipe);

    काष्ठा usb_पूर्णांकerface_descriptor *अगरace = usbdev->अगरace;
    अगर (अगरace->bInterfaceSubClass != USB_INTERFACE_SUBCLASS_BOOT)
        // Doesn't support boot protocol.
        वापस -1;

    // Find पूर्णांकr in endpoपूर्णांक.
    काष्ठा usb_endpoपूर्णांक_descriptor *epdesc = usb_find_desc(
        usbdev, USB_ENDPOINT_XFER_INT, USB_सूची_IN);
    अगर (!epdesc) अणु
        dम_लिखो(1, "No usb hid intr in?\n");
        वापस -1;
    पूर्ण

    अगर (अगरace->bInterfaceProtocol == USB_INTERFACE_PROTOCOL_KEYBOARD)
        वापस usb_kbd_setup(usbdev, epdesc);
    अगर (अगरace->bInterfaceProtocol == USB_INTERFACE_PROTOCOL_MOUSE)
        वापस usb_mouse_setup(usbdev, epdesc);
    वापस -1;
पूर्ण


/****************************************************************
 * Keyboard events
 ****************************************************************/

// Mapping from USB key id to ps2 key sequence.
अटल u16 KeyToScanCode[] VAR16 = अणु
    0x0000, 0x0000, 0x0000, 0x0000, 0x001e, 0x0030, 0x002e, 0x0020,
    0x0012, 0x0021, 0x0022, 0x0023, 0x0017, 0x0024, 0x0025, 0x0026,
    0x0032, 0x0031, 0x0018, 0x0019, 0x0010, 0x0013, 0x001f, 0x0014,
    0x0016, 0x002f, 0x0011, 0x002d, 0x0015, 0x002c, 0x0002, 0x0003,
    0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000a, 0x000b,
    0x001c, 0x0001, 0x000e, 0x000f, 0x0039, 0x000c, 0x000d, 0x001a,
    0x001b, 0x002b, 0x0000, 0x0027, 0x0028, 0x0029, 0x0033, 0x0034,
    0x0035, 0x003a, 0x003b, 0x003c, 0x003d, 0x003e, 0x003f, 0x0040,
    0x0041, 0x0042, 0x0043, 0x0044, 0x0057, 0x0058, 0xe037, 0x0046,
    0xe145, 0xe052, 0xe047, 0xe049, 0xe053, 0xe04f, 0xe051, 0xe04d,
    0xe04b, 0xe050, 0xe048, 0x0045, 0xe035, 0x0037, 0x004a, 0x004e,
    0xe01c, 0x004f, 0x0050, 0x0051, 0x004b, 0x004c, 0x004d, 0x0047,
    0x0048, 0x0049, 0x0052, 0x0053
पूर्ण;

// Mapping from USB modअगरier id to ps2 key sequence.
अटल u16 ModअगरierToScanCode[] VAR16 = अणु
    //lcntl, lshअगरt, lalt, lgui, rcntl, rshअगरt, ralt, rgui
    0x001d, 0x002a, 0x0038, 0xe05b, 0xe01d, 0x0036, 0xe038, 0xe05c
पूर्ण;

#घोषणा RELEASEBIT 0x80

// Translate data from KeyToScanCode[] to calls to process_key().
अटल व्योम
prockeys(u16 scancode, u8 key_release, u8 mods)
अणु
    अगर (scancode > 0xff) अणु
        अगर (scancode == 0xe145) अणु
            // XXX - a real AT keyboard would immediately send the key release
            अगर (mods & ((1<<0) | (1<<4))) अणु
                // Cntr+Break key
                process_key(0xe0);
                process_key(0x46 | key_release);
            पूर्ण अन्यथा अणु
                // Pause key
                process_key(0xe1);
                process_key(0x1d | key_release);
                process_key(0x45 | key_release);
            पूर्ण
            वापस;
        पूर्ण अन्यथा अगर (scancode == 0xe037 && mods & ((1<<2) | (1<<6))) अणु
            // Alt+SysReq key
            process_key(0x54 | key_release);
            वापस;
        पूर्ण
        process_key(0xe0);
    पूर्ण
    process_key(scancode | key_release);
पूर्ण

// Handle a USB key press/release event.
अटल व्योम
procscankey(u8 key, u8 key_release, u8 mods)
अणु
    अगर (key >= ARRAY_SIZE(KeyToScanCode))
        वापस;
    u16 scancode = GET_GLOBAL(KeyToScanCode[key]);
    अगर (scancode)
        prockeys(scancode, key_release, mods);
पूर्ण

// Handle a USB modअगरier press/release event.
अटल व्योम
procmodkey(u8 mods, u8 key_release)
अणु
    पूर्णांक i;
    क्रम (i=0; mods; i++)
        अगर (mods & (1<<i)) अणु
            // Modअगरier key change.
            prockeys(GET_GLOBAL(ModअगरierToScanCode[i]), key_release, 0);
            mods &= ~(1<<i);
        पूर्ण
पूर्ण

काष्ठा usbkeyinfo अणु
    जोड़ अणु
        काष्ठा अणु
            u8 modअगरiers;
            u8 repeatcount;
            u8 keys[6];
        पूर्ण;
        u64 data;
    पूर्ण;
पूर्ण;
काष्ठा usbkeyinfo LastUSBkey VARLOW;

// Process USB keyboard data.
अटल व्योम
handle_key(काष्ठा keyevent *data)
अणु
    dम_लिखो(9, "Got key %x %x\n", data->modअगरiers, data->keys[0]);

    // Load old keys.
    काष्ठा usbkeyinfo old;
    old.data = GET_LOW(LastUSBkey.data);

    // Check क्रम keys no दीर्घer pressed.
    पूर्णांक addpos = 0;
    पूर्णांक i;
    क्रम (i=0; i<ARRAY_SIZE(old.keys); i++) अणु
        u8 key = old.keys[i];
        अगर (!key)
            अवरोध;
        पूर्णांक j;
        क्रम (j=0;; j++) अणु
            अगर (j>=ARRAY_SIZE(data->keys)) अणु
                // Key released.
                procscankey(key, RELEASEBIT, data->modअगरiers);
                अगर (i+1 >= ARRAY_SIZE(old.keys) || !old.keys[i+1])
                    // Last pressed key released - disable repeat.
                    old.repeatcount = 0xff;
                अवरोध;
            पूर्ण
            अगर (data->keys[j] == key) अणु
                // Key still pressed.
                data->keys[j] = 0;
                old.keys[addpos++] = key;
                अवरोध;
            पूर्ण
        पूर्ण
    पूर्ण
    procmodkey(old.modअगरiers & ~data->modअगरiers, RELEASEBIT);

    // Process new keys
    procmodkey(data->modअगरiers & ~old.modअगरiers, 0);
    old.modअगरiers = data->modअगरiers;
    क्रम (i=0; i<ARRAY_SIZE(data->keys); i++) अणु
        u8 key = data->keys[i];
        अगर (!key)
            जारी;
        // New key pressed.
        procscankey(key, 0, data->modअगरiers);
        old.keys[addpos++] = key;
        old.repeatcount = KEYREPEATWAITMS / KEYREPEATMS + 1;
    पूर्ण
    अगर (addpos < ARRAY_SIZE(old.keys))
        old.keys[addpos] = 0;

    // Check क्रम key repeat event.
    अगर (addpos) अणु
        अगर (!old.repeatcount)
            procscankey(old.keys[addpos-1], 0, data->modअगरiers);
        अन्यथा अगर (old.repeatcount != 0xff)
            old.repeatcount--;
    पूर्ण

    // Update old keys
    SET_LOW(LastUSBkey.data, old.data);
पूर्ण

// Check अगर a USB keyboard event is pending and process it अगर so.
अटल व्योम
usb_check_key(व्योम)
अणु
    अगर (! CONFIG_USB_KEYBOARD)
        वापस;
    काष्ठा usb_pipe *pipe = GET_GLOBAL(keyboard_pipe);
    अगर (!pipe)
        वापस;

    क्रम (;;) अणु
        u8 data[MAX_KBD_EVENT];
        पूर्णांक ret = usb_poll_पूर्णांकr(pipe, data);
        अगर (ret)
            अवरोध;
        handle_key((व्योम*)data);
    पूर्ण
पूर्ण

// Test अगर USB keyboard is active.
अंतरभूत पूर्णांक
usb_kbd_active(व्योम)
अणु
    अगर (! CONFIG_USB_KEYBOARD)
        वापस 0;
    वापस GET_GLOBAL(keyboard_pipe) != शून्य;
पूर्ण

// Handle a ps2 style keyboard command.
अंतरभूत पूर्णांक
usb_kbd_command(पूर्णांक command, u8 *param)
अणु
    अगर (! CONFIG_USB_KEYBOARD)
        वापस -1;
    dम_लिखो(9, "usb keyboard cmd=%x\n", command);
    चयन (command) अणु
    हाल ATKBD_CMD_GETID:
        // Return the id of a standard AT keyboard.
        param[0] = 0xab;
        param[1] = 0x83;
        वापस 0;
    शेष:
        वापस -1;
    पूर्ण
पूर्ण


/****************************************************************
 * Mouse events
 ****************************************************************/

// Process USB mouse data.
अटल व्योम
handle_mouse(काष्ठा mouseevent *data)
अणु
    dम_लिखो(9, "Got mouse b=%x x=%x y=%x\n", data->buttons, data->x, data->y);

    s8 x = data->x, y = -data->y;
    u8 flag = ((data->buttons & 0x7) | (1<<3)
               | (x & 0x80 ? (1<<4) : 0) | (y & 0x80 ? (1<<5) : 0));
    process_mouse(flag);
    process_mouse(x);
    process_mouse(y);
पूर्ण

// Check अगर a USB mouse event is pending and process it अगर so.
अटल व्योम
usb_check_mouse(व्योम)
अणु
    अगर (! CONFIG_USB_MOUSE)
        वापस;
    काष्ठा usb_pipe *pipe = GET_GLOBAL(mouse_pipe);
    अगर (!pipe)
        वापस;

    क्रम (;;) अणु
        u8 data[MAX_MOUSE_EVENT];
        पूर्णांक ret = usb_poll_पूर्णांकr(pipe, data);
        अगर (ret)
            अवरोध;
        handle_mouse((व्योम*)data);
    पूर्ण
पूर्ण

// Test अगर USB mouse is active.
अंतरभूत पूर्णांक
usb_mouse_active(व्योम)
अणु
    अगर (! CONFIG_USB_MOUSE)
        वापस 0;
    वापस GET_GLOBAL(mouse_pipe) != शून्य;
पूर्ण

// Handle a ps2 style mouse command.
अंतरभूत पूर्णांक
usb_mouse_command(पूर्णांक command, u8 *param)
अणु
    अगर (! CONFIG_USB_MOUSE)
        वापस -1;
    dम_लिखो(9, "usb mouse cmd=%x\n", command);
    चयन (command) अणु
    हाल PSMOUSE_CMD_ENABLE:
    हाल PSMOUSE_CMD_DISABLE:
    हाल PSMOUSE_CMD_SETSCALE11:
        वापस 0;
    हाल PSMOUSE_CMD_SETSCALE21:
    हाल PSMOUSE_CMD_SETRATE:
    हाल PSMOUSE_CMD_SETRES:
        // XXX
        वापस 0;
    हाल PSMOUSE_CMD_RESET_BAT:
    हाल PSMOUSE_CMD_GETID:
        // Return the id of a standard AT mouse.
        param[0] = 0xaa;
        param[1] = 0x00;
        वापस 0;

    हाल PSMOUSE_CMD_GETINFO:
        param[0] = 0x00;
        param[1] = 4;
        param[2] = 100;
        वापस 0;

    शेष:
        वापस -1;
    पूर्ण
पूर्ण

// Check क्रम USB events pending - called periodically from समयr पूर्णांकerrupt.
व्योम
usb_check_event(व्योम)
अणु
    usb_check_key();
    usb_check_mouse();
पूर्ण

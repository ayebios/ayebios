<शैली गुरु>
// Code to मुख्यtain and access the pci_device cache
//
// Copyright (C) 2008-2016  Kevin O'Connor <kevin@koconnor.net>
//
// This file may be distributed under the terms of the GNU LGPLv3 license.

#समावेश "malloc.h" // दो_स्मृति_पंचांगp
#समावेश "output.h" // dम_लिखो
#समावेश "pci.h" // pci_config_ग_लिखोl
#समावेश "pcidevice.h" // pci_probe_devices
#समावेश "pci_regs.h" // PCI_VENDOR_ID
#समावेश "romfile.h" // romfile_loadपूर्णांक
#समावेश "stacks.h" // रुको_preempt
#समावेश "string.h" // स_रखो

काष्ठा hlist_head PCIDevices VARVERIFY32INIT;
पूर्णांक MaxPCIBus VARFSEG;

// Find all PCI devices and populate PCIDevices linked list.
व्योम
pci_probe_devices(व्योम)
अणु
    dम_लिखो(3, "PCI probe\n");
    काष्ठा pci_device *busdevs[256];
    स_रखो(busdevs, 0, माप(busdevs));
    काष्ठा hlist_node **pprev = &PCIDevices.first;
    पूर्णांक extraroots = romfile_loadपूर्णांक("etc/extra-pci-roots", 0);
    पूर्णांक bus = -1, lastbus = 0, rootbuses = 0, count=0;
    जबतक (bus < 0xff && (bus < MaxPCIBus || rootbuses < extraroots)) अणु
        bus++;
        पूर्णांक bdf;
        क्रमeachbdf(bdf, bus) अणु
            // Create new pci_device काष्ठा and add to list.
            काष्ठा pci_device *dev = दो_स्मृति_पंचांगp(माप(*dev));
            अगर (!dev) अणु
                warn_noalloc();
                वापस;
            पूर्ण
            स_रखो(dev, 0, माप(*dev));
            hlist_add(&dev->node, pprev);
            pprev = &dev->node.next;
            count++;

            // Find parent device.
            पूर्णांक rootbus;
            काष्ठा pci_device *parent = busdevs[bus];
            अगर (!parent) अणु
                अगर (bus != lastbus)
                    rootbuses++;
                lastbus = bus;
                rootbus = rootbuses;
                अगर (bus > MaxPCIBus)
                    MaxPCIBus = bus;
            पूर्ण अन्यथा अणु
                rootbus = parent->rootbus;
            पूर्ण

            // Populate pci_device info.
            dev->bdf = bdf;
            dev->parent = parent;
            dev->rootbus = rootbus;
            u32 vendev = pci_config_पढ़ोl(bdf, PCI_VENDOR_ID);
            dev->venकरोr = vendev & 0xffff;
            dev->device = vendev >> 16;
            u32 classrev = pci_config_पढ़ोl(bdf, PCI_CLASS_REVISION);
            dev->class = classrev >> 16;
            dev->prog_अगर = classrev >> 8;
            dev->revision = classrev & 0xff;
            dev->header_type = pci_config_पढ़ोb(bdf, PCI_HEADER_TYPE);
            u8 v = dev->header_type & 0x7f;
            अगर (v == PCI_HEADER_TYPE_BRIDGE || v == PCI_HEADER_TYPE_CARDBUS) अणु
                u8 secbus = pci_config_पढ़ोb(bdf, PCI_SECONDARY_BUS);
                dev->secondary_bus = secbus;
                अगर (secbus > bus && !busdevs[secbus])
                    busdevs[secbus] = dev;
                अगर (secbus > MaxPCIBus)
                    MaxPCIBus = secbus;
            पूर्ण
            dम_लिखो(4, "PCI device %pP (vd=%04x:%04x c=%04x)\n"
                    , dev, dev->venकरोr, dev->device, dev->class);
        पूर्ण
    पूर्ण
    dम_लिखो(1, "Found %d PCI devices (max PCI bus is %02x)\n", count, MaxPCIBus);
पूर्ण

// Search क्रम a device with the specअगरied venकरोr and device ids.
काष्ठा pci_device *
pci_find_device(u16 vendid, u16 devid)
अणु
    काष्ठा pci_device *pci;
    क्रमeachpci(pci) अणु
        अगर (pci->venकरोr == vendid && pci->device == devid)
            वापस pci;
    पूर्ण
    वापस शून्य;
पूर्ण

// Search क्रम a device with the specअगरied class id.
काष्ठा pci_device *
pci_find_class(u16 classid)
अणु
    काष्ठा pci_device *pci;
    क्रमeachpci(pci) अणु
        अगर (pci->class == classid)
            वापस pci;
    पूर्ण
    वापस शून्य;
पूर्ण

पूर्णांक pci_init_device(स्थिर काष्ठा pci_device_id *ids
                    , काष्ठा pci_device *pci, व्योम *arg)
अणु
    जबतक (ids->vendid || ids->class_mask) अणु
        अगर ((ids->vendid == PCI_ANY_ID || ids->vendid == pci->venकरोr) &&
            (ids->devid == PCI_ANY_ID || ids->devid == pci->device) &&
            !((ids->class ^ pci->class) & ids->class_mask)) अणु
            अगर (ids->func)
                ids->func(pci, arg);
            वापस 0;
        पूर्ण
        ids++;
    पूर्ण
    वापस -1;
पूर्ण

काष्ठा pci_device *
pci_find_init_device(स्थिर काष्ठा pci_device_id *ids, व्योम *arg)
अणु
    काष्ठा pci_device *pci;
    क्रमeachpci(pci) अणु
        अगर (pci_init_device(ids, pci, arg) == 0)
            वापस pci;
    पूर्ण
    वापस शून्य;
पूर्ण

// Enable PCI bus-mastering (ie, DMA) support on a pci device
व्योम
pci_enable_busmaster(काष्ठा pci_device *pci)
अणु
    रुको_preempt();
    pci_config_maskw(pci->bdf, PCI_COMMAND, 0, PCI_COMMAND_MASTER);
    pci->have_driver = 1;
पूर्ण

// Verअगरy an IO bar and वापस it to the caller
u16
pci_enable_iobar(काष्ठा pci_device *pci, u32 addr)
अणु
    रुको_preempt();
    u32 bar = pci_config_पढ़ोl(pci->bdf, addr);
    अगर (!(bar & PCI_BASE_ADDRESS_SPACE_IO)) अणु
        warn_पूर्णांकernalerror();
        वापस 0;
    पूर्ण
    bar &= PCI_BASE_ADDRESS_IO_MASK;
    अगर (bar == 0 || bar > 0xffff) अणु
        warn_पूर्णांकernalerror();
        वापस 0;
    पूर्ण
    pci_config_maskw(pci->bdf, PCI_COMMAND, 0, PCI_COMMAND_IO);
    pci->have_driver = 1;
    वापस bar;
पूर्ण

// Verअगरy a memory bar and वापस it to the caller
व्योम *
pci_enable_membar(काष्ठा pci_device *pci, u32 addr)
अणु
    रुको_preempt();
    u32 bar = pci_config_पढ़ोl(pci->bdf, addr);
    अगर (bar & PCI_BASE_ADDRESS_SPACE_IO) अणु
        warn_पूर्णांकernalerror();
        वापस शून्य;
    पूर्ण
    अगर (bar & PCI_BASE_ADDRESS_MEM_TYPE_64) अणु
        u32 high = pci_config_पढ़ोl(pci->bdf, addr+4);
        अगर (high) अणु
            dम_लिखो(1, "Can not map memory bar over 4Gig\n");
            वापस शून्य;
        पूर्ण
    पूर्ण
    bar &= PCI_BASE_ADDRESS_MEM_MASK;
    अगर (bar + 4*1024*1024 < 20*1024*1024) अणु
        // Bar करोesn't look valid (it is in last 4M or first 16M)
        warn_पूर्णांकernalerror();
        वापस शून्य;
    पूर्ण
    pci_config_maskw(pci->bdf, PCI_COMMAND, 0, PCI_COMMAND_MEMORY);
    pci->have_driver = 1;
    वापस (व्योम*)bar;
पूर्ण

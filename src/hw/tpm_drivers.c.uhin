<शैली गुरु>
// Implementation of a TPM driver क्रम the TPM TIS पूर्णांकerface
//
// Copyright (C) 2006-2011 IBM Corporation
//
// Authors:
//     Stefan Berger <stefanb@linux.vnet.ibm.com>
//
// This file may be distributed under the terms of the GNU LGPLv3 license.

#समावेश "byteorder.h" // be32_to_cpu
#समावेश "config.h" // CONFIG_TPM_TIS_SHA1THRESHOLD
#समावेश "hw/tpm_drivers.h" // काष्ठा tpm_driver
#समावेश "std/tcg.h" // TCG_RESPONSE_TIMEOUT
#समावेश "output.h" // warn_समयout
#समावेश "stacks.h" // yield
#समावेश "string.h" // स_नकल
#समावेश "util.h" // समयr_calc_usec
#समावेश "x86.h" // पढ़ोl

/* low level driver implementation */
काष्ठा tpm_driver अणु
    u32 *समयouts;
    u32 *durations;
    व्योम (*set_समयouts)(u32 समयouts[4], u32 durations[3]);
    u32 (*probe)(व्योम);
    TPMVersion (*get_tpm_version)(व्योम);
    u32 (*init)(व्योम);
    u32 (*activate)(u8 locty);
    u32 (*पढ़ोy)(व्योम);
    u32 (*senddata)(स्थिर u8 *स्थिर data, u32 len);
    u32 (*पढ़ोresp)(u8 *buffer, u32 *len);
    u32 (*रुकोdatavalid)(व्योम);
    u32 (*रुकोrespपढ़ोy)(क्रमागत tpmDurationType to_t);
पूर्ण;

बाह्य काष्ठा tpm_driver tpm_drivers[];

#घोषणा TIS_DRIVER_IDX       0
#घोषणा CRB_DRIVER_IDX       1
#घोषणा TPM_NUM_DRIVERS      2

#घोषणा TPM_INVALID_DRIVER   0xf

अटल स्थिर u32 tis_शेष_समयouts[4] = अणु
    TIS_DEFAULT_TIMEOUT_A,
    TIS_DEFAULT_TIMEOUT_B,
    TIS_DEFAULT_TIMEOUT_C,
    TIS_DEFAULT_TIMEOUT_D,
पूर्ण;

अटल स्थिर u32 tpm_शेष_durations[3] = अणु
    TPM_DEFAULT_DURATION_SHORT,
    TPM_DEFAULT_DURATION_MEDIUM,
    TPM_DEFAULT_DURATION_LONG,
पूर्ण;

/* determined values */
अटल u32 tpm_शेष_dur[3];
अटल u32 tpm_शेष_to[4];

अटल u32 crb_cmd_size;
अटल व्योम *crb_cmd;
अटल u32 crb_resp_size;
अटल व्योम *crb_resp;

अटल u32 रुको_reg8(u8* reg, u32 समय, u8 mask, u8 expect)
अणु
    अगर (!CONFIG_TCGBIOS)
        वापस 0;

    u32 rc = 1;
    u32 end = समयr_calc_usec(समय);

    क्रम (;;) अणु
        u8 value = पढ़ोl(reg);
        अगर ((value & mask) == expect) अणु
            rc = 0;
            अवरोध;
        पूर्ण
        अगर (समयr_check(end)) अणु
            warn_समयout();
            अवरोध;
        पूर्ण
        yield();
    पूर्ण
    वापस rc;
पूर्ण

अटल u32 tis_रुको_access(u8 locty, u32 समय, u8 mask, u8 expect)
अणु
    वापस रुको_reg8(TIS_REG(locty, TIS_REG_ACCESS), समय, mask, expect);
पूर्ण

अटल u32 tis_रुको_sts(u8 locty, u32 समय, u8 mask, u8 expect)
अणु
    वापस रुको_reg8(TIS_REG(locty, TIS_REG_STS), समय, mask, expect);
पूर्ण

अटल u32 crb_रुको_reg(u8 locty, u16 reg, u32 समय, u8 mask, u8 expect)
अणु
    वापस रुको_reg8(CRB_REG(locty, reg), समय, mask, expect);
पूर्ण

/* अगर device is not there, वापस '0', '1' otherwise */
अटल u32 tis_probe(व्योम)
अणु
    अगर (!CONFIG_TCGBIOS)
        वापस 0;

    /* Wait क्रम the पूर्णांकerface to report it's पढ़ोy */
    u32 rc = tis_रुको_access(0, TIS_DEFAULT_TIMEOUT_A,
                             TIS_ACCESS_TPM_REG_VALID_STS,
                             TIS_ACCESS_TPM_REG_VALID_STS);
    अगर (rc)
        वापस 0;

    u32 didvid = पढ़ोl(TIS_REG(0, TIS_REG_DID_VID));

    अगर ((didvid != 0) && (didvid != 0xffffffff))
        rc = 1;

    /* TPM 2 has an पूर्णांकerface रेजिस्टर */
    u32 अगरaceid = पढ़ोl(TIS_REG(0, TIS_REG_IFACE_ID));

    अगर ((अगरaceid & 0xf) != 0xf) अणु
        अगर ((अगरaceid & 0xf) == 1) अणु
            /* CRB is active; no TIS */
            वापस 0;
        पूर्ण
        अगर ((अगरaceid & (1 << 13)) == 0) अणु
            /* TIS cannot be selected */
            वापस 0;
        पूर्ण
        /* ग_लिखो of 0 to bits 17-18 selects TIS */
        ग_लिखोl(TIS_REG(0, TIS_REG_IFACE_ID), 0);
        /* since we only support TIS, we lock it */
        ग_लिखोl(TIS_REG(0, TIS_REG_IFACE_ID), (1 << 19));
    पूर्ण

    वापस rc;
पूर्ण

अटल TPMVersion tis_get_tpm_version(व्योम)
अणु
    u32 reg = पढ़ोl(TIS_REG(0, TIS_REG_IFACE_ID));

    /*
     * FIFO पूर्णांकerface as defined in TIS1.3 is active
     * Interface capabilities are defined in TIS_REG_INTF_CAPABILITY
     */
    अगर ((reg & 0xf) == 0xf) अणु
        reg = पढ़ोl(TIS_REG(0, TIS_REG_INTF_CAPABILITY));
        /* Interface 1.3 क्रम TPM 2.0 */
        अगर (((reg >> 28) & 0x7) == 3)
            वापस TPM_VERSION_2;
    पूर्ण
    /* FIFO पूर्णांकerface as defined in PTP क्रम TPM 2.0 is active */
    अन्यथा अगर ((reg & 0xf) == 0) अणु
        वापस TPM_VERSION_2;
    पूर्ण

    वापस TPM_VERSION_1_2;
पूर्ण

अटल व्योम init_समयout(पूर्णांक driver)
अणु
    अगर (tpm_drivers[driver].durations == शून्य) अणु
        u32 *durations = tpm_शेष_dur;
        स_नकल(durations, tpm_शेष_durations,
               माप(tpm_शेष_durations));
        tpm_drivers[driver].durations = durations;
    पूर्ण

    अगर (tpm_drivers[driver].समयouts == शून्य) अणु
        u32 *समयouts = tpm_शेष_to;
        स_नकल(समयouts, tis_शेष_समयouts,
               माप(tis_शेष_समयouts));
        tpm_drivers[driver].समयouts = समयouts;
    पूर्ण
पूर्ण

अटल u32 tis_init(व्योम)
अणु
    अगर (!CONFIG_TCGBIOS)
        वापस 1;

    ग_लिखोb(TIS_REG(0, TIS_REG_INT_ENABLE), 0);

    init_समयout(TIS_DRIVER_IDX);

    वापस 1;
पूर्ण


अटल व्योम set_समयouts(u32 समयouts[4], u32 durations[3])
अणु
    अगर (!CONFIG_TCGBIOS)
        वापस;

    u32 *tos = tpm_drivers[TIS_DRIVER_IDX].समयouts;
    u32 *dus = tpm_drivers[TIS_DRIVER_IDX].durations;

    अगर (tos && tos != tis_शेष_समयouts && समयouts)
        स_नकल(tos, समयouts, 4 * माप(u32));
    अगर (dus && dus != tpm_शेष_durations && durations)
        स_नकल(dus, durations, 3 * माप(u32));
पूर्ण

अटल u32 tis_activate(u8 locty)
अणु
    अगर (!CONFIG_TCGBIOS)
        वापस 0;

    u32 rc = 0;
    u8 acc;
    पूर्णांक l;
    u32 समयout_a = tpm_drivers[TIS_DRIVER_IDX].समयouts[TIS_TIMEOUT_TYPE_A];

    अगर (!(पढ़ोb(TIS_REG(locty, TIS_REG_ACCESS)) &
          TIS_ACCESS_ACTIVE_LOCALITY)) अणु
        /* release locality in use top-करोwnwards */
        क्रम (l = 4; l >= 0; l--)
            ग_लिखोb(TIS_REG(l, TIS_REG_ACCESS),
                   TIS_ACCESS_ACTIVE_LOCALITY);
    पूर्ण

    /* request access to locality */
    ग_लिखोb(TIS_REG(locty, TIS_REG_ACCESS), TIS_ACCESS_REQUEST_USE);

    acc = पढ़ोb(TIS_REG(locty, TIS_REG_ACCESS));
    अगर ((acc & TIS_ACCESS_ACTIVE_LOCALITY)) अणु
        ग_लिखोb(TIS_REG(locty, TIS_REG_STS), TIS_STS_COMMAND_READY);
        rc = tis_रुको_sts(locty, समयout_a,
                          TIS_STS_COMMAND_READY, TIS_STS_COMMAND_READY);
    पूर्ण

    वापस rc;
पूर्ण

अटल u32 tis_find_active_locality(व्योम)
अणु
    अगर (!CONFIG_TCGBIOS)
        वापस 0;

    u8 locty;

    क्रम (locty = 0; locty <= 4; locty++) अणु
        अगर ((पढ़ोb(TIS_REG(locty, TIS_REG_ACCESS)) &
             TIS_ACCESS_ACTIVE_LOCALITY))
            वापस locty;
    पूर्ण

    tis_activate(0);

    वापस 0;
पूर्ण

अटल u32 tis_पढ़ोy(व्योम)
अणु
    अगर (!CONFIG_TCGBIOS)
        वापस 0;

    u32 rc = 0;
    u8 locty = tis_find_active_locality();
    u32 समयout_b = tpm_drivers[TIS_DRIVER_IDX].समयouts[TIS_TIMEOUT_TYPE_B];

    ग_लिखोb(TIS_REG(locty, TIS_REG_STS), TIS_STS_COMMAND_READY);
    rc = tis_रुको_sts(locty, समयout_b,
                      TIS_STS_COMMAND_READY, TIS_STS_COMMAND_READY);

    वापस rc;
पूर्ण

अटल u32 tis_senddata(स्थिर u8 *स्थिर data, u32 len)
अणु
    अगर (!CONFIG_TCGBIOS)
        वापस 0;

    u32 rc = 0;
    u32 offset = 0;
    u32 end_loop = 0;
    u16 burst = 0;
    u8 locty = tis_find_active_locality();
    u32 समयout_d = tpm_drivers[TIS_DRIVER_IDX].समयouts[TIS_TIMEOUT_TYPE_D];
    u32 end = समयr_calc_usec(समयout_d);

    करो अणु
        जबतक (burst == 0) अणु
               burst = पढ़ोl(TIS_REG(locty, TIS_REG_STS)) >> 8;
            अगर (burst == 0) अणु
                अगर (समयr_check(end)) अणु
                    warn_समयout();
                    अवरोध;
                पूर्ण
                yield();
            पूर्ण
        पूर्ण

        अगर (burst == 0) अणु
            rc = TCG_RESPONSE_TIMEOUT;
            अवरोध;
        पूर्ण

        जबतक (1) अणु
            ग_लिखोb(TIS_REG(locty, TIS_REG_DATA_FIFO), data[offset++]);
            burst--;

            अगर (burst == 0 || offset == len)
                अवरोध;
        पूर्ण

        अगर (offset == len)
            end_loop = 1;
    पूर्ण जबतक (end_loop == 0);

    वापस rc;
पूर्ण

अटल u32 tis_पढ़ोresp(u8 *buffer, u32 *len)
अणु
    अगर (!CONFIG_TCGBIOS)
        वापस 0;

    u32 rc = 0;
    u32 offset = 0;
    u32 sts;
    u8 locty = tis_find_active_locality();

    जबतक (offset < *len) अणु
        buffer[offset] = पढ़ोb(TIS_REG(locty, TIS_REG_DATA_FIFO));
        offset++;
        sts = पढ़ोb(TIS_REG(locty, TIS_REG_STS));
        /* data left ? */
        अगर ((sts & TIS_STS_DATA_AVAILABLE) == 0)
            अवरोध;
    पूर्ण

    *len = offset;

    वापस rc;
पूर्ण


अटल u32 tis_रुकोdatavalid(व्योम)
अणु
    अगर (!CONFIG_TCGBIOS)
        वापस 0;

    u32 rc = 0;
    u8 locty = tis_find_active_locality();
    u32 समयout_c = tpm_drivers[TIS_DRIVER_IDX].समयouts[TIS_TIMEOUT_TYPE_C];

    अगर (tis_रुको_sts(locty, समयout_c, TIS_STS_VALID, TIS_STS_VALID) != 0)
        rc = 1;

    वापस rc;
पूर्ण

अटल u32 tis_रुकोrespपढ़ोy(क्रमागत tpmDurationType to_t)
अणु
    अगर (!CONFIG_TCGBIOS)
        वापस 0;

    u32 rc = 0;
    u8 locty = tis_find_active_locality();
    u32 समयout = tpm_drivers[TIS_DRIVER_IDX].durations[to_t];

    ग_लिखोb(TIS_REG(locty ,TIS_REG_STS), TIS_STS_TPM_GO);

    अगर (tis_रुको_sts(locty, समयout,
                     TIS_STS_DATA_AVAILABLE, TIS_STS_DATA_AVAILABLE) != 0)
        rc = 1;

    वापस rc;
पूर्ण

#घोषणा CRB_STATE_VALID_STS 0b10000000
#घोषणा CRB_STATE_LOC_ASSIGNED 0x00000010
#घोषणा CRB_STATE_READY_MASK (CRB_STATE_VALID_STS | CRB_STATE_LOC_ASSIGNED)

/* अगर device is not there, वापस '0', '1' otherwise */
अटल u32 crb_probe(व्योम)
अणु
    अगर (!CONFIG_TCGBIOS)
        वापस 0;

    /* Wait क्रम the पूर्णांकerface to report it's पढ़ोy */
    u32 rc = crb_रुको_reg(0, CRB_REG_LOC_STATE, TIS2_DEFAULT_TIMEOUT_D,
                          CRB_STATE_READY_MASK, CRB_STATE_VALID_STS);
    अगर (rc)
        वापस 0;

    u32 अगरaceid = पढ़ोl(CRB_REG(0, CRB_REG_INTF_ID));

    अगर ((अगरaceid & 0xf) != 0xf) अणु
        अगर ((अगरaceid & 0xf) == 1) अणु
            /* CRB is active */
        पूर्ण अन्यथा अगर ((अगरaceid & (1 << 14)) == 0) अणु
            /* CRB cannot be selected */
            वापस 0;
        पूर्ण
        /* ग_लिखो of 1 to bits 17-18 selects CRB */
        ग_लिखोl(CRB_REG(0, CRB_REG_INTF_ID), (1 << 17));
        /* lock it */
        ग_लिखोl(CRB_REG(0, CRB_REG_INTF_ID), (1 << 19));
    पूर्ण

    /* no support क्रम 64 bit addressing yet */
    अगर (पढ़ोl(CRB_REG(0, CRB_REG_CTRL_CMD_HADDR)))
        वापस 0;

    u64 addr = पढ़ोq(CRB_REG(0, CRB_REG_CTRL_RSP_ADDR));
    अगर (addr > 0xffffffff)
        वापस 0;

    वापस 1;
पूर्ण

अटल TPMVersion crb_get_tpm_version(व्योम)
अणु
    /* CRB is supposed to be TPM 2.0 only */
    वापस TPM_VERSION_2;
पूर्ण

अटल u32 crb_init(व्योम)
अणु
    अगर (!CONFIG_TCGBIOS)
        वापस 1;

    crb_cmd = (व्योम*)पढ़ोl(CRB_REG(0, CRB_REG_CTRL_CMD_LADDR));
    crb_cmd_size = पढ़ोl(CRB_REG(0, CRB_REG_CTRL_CMD_SIZE));
    crb_resp = (व्योम*)पढ़ोl(CRB_REG(0, CRB_REG_CTRL_RSP_ADDR));
    crb_resp_size = पढ़ोl(CRB_REG(0, CRB_REG_CTRL_RSP_SIZE));

    init_समयout(CRB_DRIVER_IDX);

    वापस 0;
पूर्ण

अटल u32 crb_activate(u8 locty)
अणु
    अगर (!CONFIG_TCGBIOS)
        वापस 0;

    ग_लिखोb(CRB_REG(locty, CRB_REG_LOC_CTRL), 1);

    वापस 0;
पूर्ण

अटल u32 crb_find_active_locality(व्योम)
अणु
    अगर (!CONFIG_TCGBIOS)
        वापस 0;

    वापस 0;
पूर्ण

#घोषणा CRB_CTRL_REQ_CMD_READY 0b1
#घोषणा CRB_START_INVOKE 0b1
#घोषणा CRB_CTRL_STS_ERROR 0b1

अटल u32 crb_पढ़ोy(व्योम)
अणु
    अगर (!CONFIG_TCGBIOS)
        वापस 0;

    u32 rc = 0;
    u8 locty = crb_find_active_locality();
    u32 समयout_c = tpm_drivers[CRB_DRIVER_IDX].समयouts[TIS_TIMEOUT_TYPE_C];

    ग_लिखोl(CRB_REG(locty, CRB_REG_CTRL_REQ), CRB_CTRL_REQ_CMD_READY);
    rc = crb_रुको_reg(locty, CRB_REG_CTRL_REQ, समयout_c,
                      CRB_CTRL_REQ_CMD_READY, 0);

    वापस rc;
पूर्ण

अटल u32 crb_senddata(स्थिर u8 *स्थिर data, u32 len)
अणु
    अगर (!CONFIG_TCGBIOS)
        वापस 0;

    अगर (len > crb_cmd_size)
        वापस 1;

    u8 locty = crb_find_active_locality();
    स_नकल(crb_cmd, data, len);
    ग_लिखोl(CRB_REG(locty, CRB_REG_CTRL_START), CRB_START_INVOKE);

    वापस 0;
पूर्ण

अटल u32 crb_पढ़ोresp(u8 *buffer, u32 *len)
अणु
    अगर (!CONFIG_TCGBIOS)
        वापस 0;

    u8 locty = crb_find_active_locality();
    अगर (पढ़ोl(CRB_REG(locty, CRB_REG_CTRL_STS)) & CRB_CTRL_STS_ERROR)
        वापस 1;

    अगर (*len < 6)
        वापस 1;

    स_नकल(buffer, crb_resp, 6);
    u32 expected = be32_to_cpu(*(u32 *) &buffer[2]);
    अगर (expected < 6)
        वापस 1;

    *len = (*len < expected) ? *len : expected;

    स_नकल(buffer + 6, crb_resp + 6, *len - 6);

    वापस 0;
पूर्ण


अटल u32 crb_रुकोdatavalid(व्योम)
अणु
    वापस 0;
पूर्ण

अटल u32 crb_रुकोrespपढ़ोy(क्रमागत tpmDurationType to_t)
अणु
    अगर (!CONFIG_TCGBIOS)
        वापस 0;

    u32 rc = 0;
    u8 locty = crb_find_active_locality();
    u32 समयout = tpm_drivers[CRB_DRIVER_IDX].durations[to_t];

    rc = crb_रुको_reg(locty, CRB_REG_CTRL_START, समयout,
                      CRB_START_INVOKE, 0);

    वापस rc;
पूर्ण

काष्ठा tpm_driver tpm_drivers[TPM_NUM_DRIVERS] = अणु
    [TIS_DRIVER_IDX] =
        अणु
            .समयouts      = शून्य,
            .durations     = शून्य,
            .set_समयouts  = set_समयouts,
            .probe         = tis_probe,
            .get_tpm_version = tis_get_tpm_version,
            .init          = tis_init,
            .activate      = tis_activate,
            .पढ़ोy         = tis_पढ़ोy,
            .senddata      = tis_senddata,
            .पढ़ोresp      = tis_पढ़ोresp,
            .रुकोdatavalid = tis_रुकोdatavalid,
            .रुकोrespपढ़ोy = tis_रुकोrespपढ़ोy,
        पूर्ण,
    [CRB_DRIVER_IDX] =
        अणु
            .समयouts      = शून्य,
            .durations     = शून्य,
            .set_समयouts  = set_समयouts,
            .probe         = crb_probe,
            .get_tpm_version = crb_get_tpm_version,
            .init          = crb_init,
            .activate      = crb_activate,
            .पढ़ोy         = crb_पढ़ोy,
            .senddata      = crb_senddata,
            .पढ़ोresp      = crb_पढ़ोresp,
            .रुकोdatavalid = crb_रुकोdatavalid,
            .रुकोrespपढ़ोy = crb_रुकोrespपढ़ोy,
        पूर्ण,
पूर्ण;

अटल u8 TPMHW_driver_to_use = TPM_INVALID_DRIVER;

TPMVersion
tpmhw_probe(व्योम)
अणु
    अचिन्हित पूर्णांक i;
    क्रम (i = 0; i < TPM_NUM_DRIVERS; i++) अणु
        काष्ठा tpm_driver *td = &tpm_drivers[i];
        अगर (td->probe() != 0) अणु
            td->init();
            TPMHW_driver_to_use = i;
            वापस td->get_tpm_version();
        पूर्ण
    पूर्ण
    वापस TPM_VERSION_NONE;
पूर्ण

पूर्णांक
tpmhw_is_present(व्योम)
अणु
    वापस TPMHW_driver_to_use != TPM_INVALID_DRIVER;
पूर्ण

पूर्णांक
tpmhw_transmit(u8 locty, काष्ठा tpm_req_header *req,
               व्योम *respbuffer, u32 *respbufferlen,
               क्रमागत tpmDurationType to_t)
अणु
    अगर (TPMHW_driver_to_use == TPM_INVALID_DRIVER)
        वापस -1;

    काष्ठा tpm_driver *td = &tpm_drivers[TPMHW_driver_to_use];

    u32 irc = td->activate(locty);
    अगर (irc != 0) अणु
        /* tpm could not be activated */
        वापस -1;
    पूर्ण

    irc = td->senddata((व्योम*)req, be32_to_cpu(req->totlen));
    अगर (irc != 0)
        वापस -1;

    irc = td->रुकोdatavalid();
    अगर (irc != 0)
        वापस -1;

    irc = td->रुकोrespपढ़ोy(to_t);
    अगर (irc != 0)
        वापस -1;

    irc = td->पढ़ोresp(respbuffer, respbufferlen);
    अगर (irc != 0 ||
        *respbufferlen < माप(काष्ठा tpm_rsp_header))
        वापस -1;

    td->पढ़ोy();

    वापस 0;
पूर्ण

व्योम
tpmhw_set_समयouts(u32 समयouts[4], u32 durations[3])
अणु
    काष्ठा tpm_driver *td = &tpm_drivers[TPMHW_driver_to_use];
    td->set_समयouts(समयouts, durations);
पूर्ण

<शैली गुरु>
// Low level ATA disk access
//
// Copyright (C) 2008,2009  Kevin O'Connor <kevin@koconnor.net>
// Copyright (C) 2002  MandrakeSoft S.A.
//
// This file may be distributed under the terms of the GNU LGPLv3 license.

#समावेश "ata.h" // ATA_CB_STAT
#समावेश "biosvar.h" // GET_GLOBALFLAT
#समावेश "block.h" // काष्ठा drive_s
#समावेश "blockcmd.h" // CDB_CMD_READ_10
#समावेश "byteorder.h" // be16_to_cpu
#समावेश "malloc.h" // दो_स्मृति_fseg
#समावेश "output.h" // dम_लिखो
#समावेश "pci.h" // pci_config_पढ़ोb
#समावेश "pcidevice.h" // क्रमeachpci
#समावेश "pci_ids.h" // PCI_CLASS_STORAGE_OTHER
#समावेश "pci_regs.h" // PCI_INTERRUPT_LINE
#समावेश "pic.h" // enable_hwirq
#समावेश "stacks.h" // yield
#समावेश "std/disk.h" // DISK_RET_SUCCESS
#समावेश "string.h" // स_रखो
#समावेश "util.h" // समयr_calc
#समावेश "x86.h" // inb

#घोषणा IDE_TIMEOUT 32000 //32 seconds max क्रम IDE ops


/****************************************************************
 * Helper functions
 ****************************************************************/

// Wait क्रम the specअगरied ide state
अटल अंतरभूत पूर्णांक
aरुको_ide(u8 mask, u8 flags, u16 base, u16 समयout)
अणु
    u32 end = समयr_calc(समयout);
    क्रम (;;) अणु
        u8 status = inb(base+ATA_CB_STAT);
        अगर ((status & mask) == flags)
            वापस status;
        अगर (समयr_check(end)) अणु
            warn_समयout();
            वापस -1;
        पूर्ण
        yield();
    पूर्ण
पूर्ण

// Wait क्रम the device to be not-busy.
अटल पूर्णांक
aरुको_not_bsy(u16 base)
अणु
    वापस aरुको_ide(ATA_CB_STAT_BSY, 0, base, IDE_TIMEOUT);
पूर्ण

// Wait क्रम the device to be पढ़ोy.
अटल पूर्णांक
aरुको_rdy(u16 base)
अणु
    वापस aरुको_ide(ATA_CB_STAT_RDY, ATA_CB_STAT_RDY, base, IDE_TIMEOUT);
पूर्ण

// Wait क्रम ide state - छोड़ोs क्रम one ata cycle first.
अटल अंतरभूत पूर्णांक
छोड़ो_aरुको_not_bsy(u16 iobase1, u16 iobase2)
अणु
    // Wait one PIO transfer cycle.
    inb(iobase2 + ATA_CB_ASTAT);

    वापस aरुको_not_bsy(iobase1);
पूर्ण

// Wait क्रम ide state - छोड़ो क्रम 400ns first.
अटल अंतरभूत पूर्णांक
ndelay_aरुको_not_bsy(u16 iobase1)
अणु
    ndelay(400);
    वापस aरुको_not_bsy(iobase1);
पूर्ण

// Reset a drive
अटल व्योम
ata_reset(काष्ठा atadrive_s *adrive_gf)
अणु
    काष्ठा ata_channel_s *chan_gf = GET_GLOBALFLAT(adrive_gf->chan_gf);
    u8 slave = GET_GLOBALFLAT(adrive_gf->slave);
    u16 iobase1 = GET_GLOBALFLAT(chan_gf->iobase1);
    u16 iobase2 = GET_GLOBALFLAT(chan_gf->iobase2);

    dम_लिखो(6, "ata_reset drive=%p\n", &adrive_gf->drive);
    // Pulse SRST
    outb(ATA_CB_DC_HD15 | ATA_CB_DC_NIEN | ATA_CB_DC_SRST, iobase2+ATA_CB_DC);
    udelay(5);
    outb(ATA_CB_DC_HD15 | ATA_CB_DC_NIEN, iobase2+ATA_CB_DC);
    msleep(2);

    // रुको क्रम device to become not busy.
    पूर्णांक status = aरुको_not_bsy(iobase1);
    अगर (status < 0)
        जाओ करोne;
    अगर (slave) अणु
        // Change device.
        u32 end = समयr_calc(IDE_TIMEOUT);
        क्रम (;;) अणु
            outb(ATA_CB_DH_DEV1, iobase1 + ATA_CB_DH);
            status = ndelay_aरुको_not_bsy(iobase1);
            अगर (status < 0)
                जाओ करोne;
            अगर (inb(iobase1 + ATA_CB_DH) == ATA_CB_DH_DEV1)
                अवरोध;
            // Change drive request failed to take effect - retry.
            अगर (समयr_check(end)) अणु
                warn_समयout();
                जाओ करोne;
            पूर्ण
        पूर्ण
    पूर्ण अन्यथा अणु
        // QEMU करोesn't reset dh on reset, so set it explicitly.
        outb(ATA_CB_DH_DEV0, iobase1 + ATA_CB_DH);
    पूर्ण

    // On a user-reset request, रुको क्रम RDY अगर it is an ATA device.
    u8 type=GET_GLOBALFLAT(adrive_gf->drive.type);
    अगर (type == DTYPE_ATA)
        status = aरुको_rdy(iobase1);

करोne:
    // Enable पूर्णांकerrupts
    outb(ATA_CB_DC_HD15, iobase2+ATA_CB_DC);

    dम_लिखो(6, "ata_reset exit status=%x\n", status);
पूर्ण

// Check क्रम drive RDY क्रम 16bit पूर्णांकerface command.
अटल पूर्णांक
isपढ़ोy(काष्ठा atadrive_s *adrive_gf)
अणु
    // Read the status from controller
    काष्ठा ata_channel_s *chan_gf = GET_GLOBALFLAT(adrive_gf->chan_gf);
    u16 iobase1 = GET_GLOBALFLAT(chan_gf->iobase1);
    u8 status = inb(iobase1 + ATA_CB_STAT);
    अगर ((status & (ATA_CB_STAT_BSY|ATA_CB_STAT_RDY)) == ATA_CB_STAT_RDY)
        वापस DISK_RET_SUCCESS;
    वापस DISK_RET_ENOTREADY;
पूर्ण


/****************************************************************
 * ATA send command
 ****************************************************************/

काष्ठा ata_pio_command अणु
    u8 feature;
    u8 sector_count;
    u8 lba_low;
    u8 lba_mid;
    u8 lba_high;
    u8 device;
    u8 command;

    u8 feature2;
    u8 sector_count2;
    u8 lba_low2;
    u8 lba_mid2;
    u8 lba_high2;
पूर्ण;

// Send an ata command to the drive.
अटल पूर्णांक
send_cmd(काष्ठा atadrive_s *adrive_gf, काष्ठा ata_pio_command *cmd)
अणु
    काष्ठा ata_channel_s *chan_gf = GET_GLOBALFLAT(adrive_gf->chan_gf);
    u8 slave = GET_GLOBALFLAT(adrive_gf->slave);
    u16 iobase1 = GET_GLOBALFLAT(chan_gf->iobase1);

    // Select device
    पूर्णांक status = aरुको_not_bsy(iobase1);
    अगर (status < 0)
        वापस status;
    u8 newdh = ((cmd->device & ~ATA_CB_DH_DEV1)
                | (slave ? ATA_CB_DH_DEV1 : ATA_CB_DH_DEV0));
    u8 olddh = inb(iobase1 + ATA_CB_DH);
    outb(newdh, iobase1 + ATA_CB_DH);
    अगर ((olddh ^ newdh) & (1<<4)) अणु
        // Was a device change - रुको क्रम device to become not busy.
        status = ndelay_aरुको_not_bsy(iobase1);
        अगर (status < 0)
            वापस status;
    पूर्ण

    // Check क्रम ATA_CMD_(READ|WRITE)_(SECTORS|DMA)_EXT commands.
    अगर ((cmd->command & ~0x11) == ATA_CMD_READ_SECTORS_EXT) अणु
        outb(cmd->feature2, iobase1 + ATA_CB_FR);
        outb(cmd->sector_count2, iobase1 + ATA_CB_SC);
        outb(cmd->lba_low2, iobase1 + ATA_CB_SN);
        outb(cmd->lba_mid2, iobase1 + ATA_CB_CL);
        outb(cmd->lba_high2, iobase1 + ATA_CB_CH);
    पूर्ण
    outb(cmd->feature, iobase1 + ATA_CB_FR);
    outb(cmd->sector_count, iobase1 + ATA_CB_SC);
    outb(cmd->lba_low, iobase1 + ATA_CB_SN);
    outb(cmd->lba_mid, iobase1 + ATA_CB_CL);
    outb(cmd->lba_high, iobase1 + ATA_CB_CH);
    outb(cmd->command, iobase1 + ATA_CB_CMD);

    वापस 0;
पूर्ण

// Wait क्रम data after calling 'send_cmd'.
अटल पूर्णांक
ata_रुको_data(u16 iobase1)
अणु
    पूर्णांक status = ndelay_aरुको_not_bsy(iobase1);
    अगर (status < 0)
        वापस status;

    अगर (status & ATA_CB_STAT_ERR) अणु
        dम_लिखो(6, "send_cmd : read error (status=%02x err=%02x)\n"
                , status, inb(iobase1 + ATA_CB_ERR));
        वापस -4;
    पूर्ण
    अगर (!(status & ATA_CB_STAT_DRQ)) अणु
        dम_लिखो(6, "send_cmd : DRQ not set (status %02x)\n", status);
        वापस -5;
    पूर्ण

    वापस 0;
पूर्ण

// Send an ata command that करोes not transfer any further data.
पूर्णांक
ata_cmd_nondata(काष्ठा atadrive_s *adrive_gf, काष्ठा ata_pio_command *cmd)
अणु
    काष्ठा ata_channel_s *chan_gf = GET_GLOBALFLAT(adrive_gf->chan_gf);
    u16 iobase1 = GET_GLOBALFLAT(chan_gf->iobase1);
    u16 iobase2 = GET_GLOBALFLAT(chan_gf->iobase2);

    // Disable पूर्णांकerrupts
    outb(ATA_CB_DC_HD15 | ATA_CB_DC_NIEN, iobase2 + ATA_CB_DC);

    पूर्णांक ret = send_cmd(adrive_gf, cmd);
    अगर (ret)
        जाओ fail;
    ret = ndelay_aरुको_not_bsy(iobase1);
    अगर (ret < 0)
        जाओ fail;

    अगर (ret & ATA_CB_STAT_ERR) अणु
        dम_लिखो(6, "nondata cmd : read error (status=%02x err=%02x)\n"
                , ret, inb(iobase1 + ATA_CB_ERR));
        ret = -4;
        जाओ fail;
    पूर्ण
    अगर (ret & ATA_CB_STAT_DRQ) अणु
        dम_लिखो(6, "nondata cmd : DRQ set (status %02x)\n", ret);
        ret = -5;
        जाओ fail;
    पूर्ण

fail:
    // Enable पूर्णांकerrupts
    outb(ATA_CB_DC_HD15, iobase2+ATA_CB_DC);

    वापस ret;
पूर्ण


/****************************************************************
 * ATA PIO transfers
 ****************************************************************/

// Transfer 'op->count' blocks (of 'blocksize' bytes) to/from drive
// 'op->drive_fl'.
अटल पूर्णांक
ata_pio_transfer(काष्ठा disk_op_s *op, पूर्णांक isग_लिखो, पूर्णांक blocksize)
अणु
    dम_लिखो(16, "ata_pio_transfer id=%p write=%d count=%d bs=%d buf=%p\n"
            , op->drive_fl, isग_लिखो, op->count, blocksize, op->buf_fl);

    काष्ठा atadrive_s *adrive_gf = container_of(
        op->drive_fl, काष्ठा atadrive_s, drive);
    काष्ठा ata_channel_s *chan_gf = GET_GLOBALFLAT(adrive_gf->chan_gf);
    u16 iobase1 = GET_GLOBALFLAT(chan_gf->iobase1);
    u16 iobase2 = GET_GLOBALFLAT(chan_gf->iobase2);
    पूर्णांक count = op->count;
    व्योम *buf_fl = op->buf_fl;
    पूर्णांक status;
    क्रम (;;) अणु
        अगर (isग_लिखो) अणु
            // Write data to controller
            dम_लिखो(16, "Write sector id=%p dest=%p\n", op->drive_fl, buf_fl);
            अगर (CONFIG_ATA_PIO32)
                outsl_fl(iobase1, buf_fl, blocksize / 4);
            अन्यथा
                outsw_fl(iobase1, buf_fl, blocksize / 2);
        पूर्ण अन्यथा अणु
            // Read data from controller
            dम_लिखो(16, "Read sector id=%p dest=%p\n", op->drive_fl, buf_fl);
            अगर (CONFIG_ATA_PIO32)
                insl_fl(iobase1, buf_fl, blocksize / 4);
            अन्यथा
                insw_fl(iobase1, buf_fl, blocksize / 2);
        पूर्ण
        buf_fl += blocksize;

        status = छोड़ो_aरुको_not_bsy(iobase1, iobase2);
        अगर (status < 0) अणु
            // Error
            op->count -= count;
            वापस status;
        पूर्ण

        count--;
        अगर (!count)
            अवरोध;
        status &= (ATA_CB_STAT_BSY | ATA_CB_STAT_DRQ | ATA_CB_STAT_ERR);
        अगर (status != ATA_CB_STAT_DRQ) अणु
            dम_लिखो(6, "ata_pio_transfer : more sectors left (status %02x)\n"
                    , status);
            op->count -= count;
            वापस -6;
        पूर्ण
    पूर्ण

    status &= (ATA_CB_STAT_BSY | ATA_CB_STAT_DF | ATA_CB_STAT_DRQ
               | ATA_CB_STAT_ERR);
    अगर (!isग_लिखो)
        status &= ~ATA_CB_STAT_DF;
    अगर (status != 0) अणु
        dम_लिखो(6, "ata_pio_transfer : no sectors left (status %02x)\n", status);
        वापस -7;
    पूर्ण

    वापस 0;
पूर्ण


/****************************************************************
 * ATA DMA transfers
 ****************************************************************/

#घोषणा BM_CMD    0
#घोषणा  BM_CMD_MEMWRITE  0x08
#घोषणा  BM_CMD_START     0x01
#घोषणा BM_STATUS 2
#घोषणा  BM_STATUS_IRQ    0x04
#घोषणा  BM_STATUS_ERROR  0x02
#घोषणा  BM_STATUS_ACTIVE 0x01
#घोषणा BM_TABLE  4

काष्ठा sff_dma_prd अणु
    u32 buf_fl;
    u32 count;
पूर्ण;

// Check अगर DMA available and setup transfer अगर so.
अटल पूर्णांक
ata_try_dma(काष्ठा disk_op_s *op, पूर्णांक isग_लिखो, पूर्णांक blocksize)
अणु
    ASSERT16();
    अगर (! CONFIG_ATA_DMA)
        वापस -1;
    u32 dest = (u32)op->buf_fl;
    अगर (dest & 1)
        // Need minimum alignment of 1.
        वापस -1;
    काष्ठा atadrive_s *adrive_gf = container_of(
        op->drive_fl, काष्ठा atadrive_s, drive);
    काष्ठा ata_channel_s *chan_gf = GET_GLOBALFLAT(adrive_gf->chan_gf);
    u16 iomaster = GET_GLOBALFLAT(chan_gf->iomaster);
    अगर (! iomaster)
        वापस -1;
    u32 bytes = op->count * blocksize;
    अगर (! bytes)
        वापस -1;

    // Build PRD dma काष्ठाure.
    काष्ठा sff_dma_prd *dma = MAKE_FLATPTR(SEG_LOW, ExtraStack);
    काष्ठा sff_dma_prd *origdma = dma;
    जबतक (bytes) अणु
        अगर (dma >= &origdma[16])
            // Too many descriptors..
            वापस -1;
        u32 count = bytes;
        u32 max = 0x10000 - (dest & 0xffff);
        अगर (count > max)
            count = max;

        SET_LOWFLAT(dma->buf_fl, dest);
        bytes -= count;
        अगर (!bytes)
            // Last descriptor.
            count |= 1<<31;
        dम_लिखो(16, "dma@%p: %08x %08x\n", dma, dest, count);
        dest += count;
        SET_LOWFLAT(dma->count, count);
        dma++;
    पूर्ण

    // Program bus-master controller.
    outl((u32)origdma, iomaster + BM_TABLE);
    u8 oldcmd = inb(iomaster + BM_CMD) & ~(BM_CMD_MEMWRITE|BM_CMD_START);
    outb(oldcmd | (isग_लिखो ? 0x00 : BM_CMD_MEMWRITE), iomaster + BM_CMD);
    outb(BM_STATUS_ERROR|BM_STATUS_IRQ, iomaster + BM_STATUS);

    वापस 0;
पूर्ण

// Transfer data using DMA.
अटल पूर्णांक
ata_dma_transfer(काष्ठा disk_op_s *op)
अणु
    अगर (! CONFIG_ATA_DMA)
        वापस -1;
    dम_लिखो(16, "ata_dma_transfer id=%p buf=%p\n", op->drive_fl, op->buf_fl);

    काष्ठा atadrive_s *adrive_gf = container_of(
        op->drive_fl, काष्ठा atadrive_s, drive);
    काष्ठा ata_channel_s *chan_gf = GET_GLOBALFLAT(adrive_gf->chan_gf);
    u16 iomaster = GET_GLOBALFLAT(chan_gf->iomaster);

    // Start bus-master controller.
    u8 oldcmd = inb(iomaster + BM_CMD);
    outb(oldcmd | BM_CMD_START, iomaster + BM_CMD);

    u32 end = समयr_calc(IDE_TIMEOUT);
    u8 status;
    क्रम (;;) अणु
        status = inb(iomaster + BM_STATUS);
        अगर (status & BM_STATUS_IRQ)
            अवरोध;
        // Transfer in progress
        अगर (समयr_check(end)) अणु
            // Timeout.
            warn_समयout();
            अवरोध;
        पूर्ण
        yield();
    पूर्ण
    outb(oldcmd & ~BM_CMD_START, iomaster + BM_CMD);

    u16 iobase1 = GET_GLOBALFLAT(chan_gf->iobase1);
    u16 iobase2 = GET_GLOBALFLAT(chan_gf->iobase2);
    पूर्णांक idestatus = छोड़ो_aरुको_not_bsy(iobase1, iobase2);

    अगर ((status & (BM_STATUS_IRQ|BM_STATUS_ACTIVE)) == BM_STATUS_IRQ
        && idestatus >= 0x00
        && (idestatus & (ATA_CB_STAT_BSY | ATA_CB_STAT_DF | ATA_CB_STAT_DRQ
                         | ATA_CB_STAT_ERR)) == 0x00)
        // Success.
        वापस 0;

    dम_लिखो(6, "IDE DMA error (dma=%x ide=%x/%x/%x)\n", status, idestatus
            , inb(iobase2 + ATA_CB_ASTAT), inb(iobase1 + ATA_CB_ERR));
    वापस -1;
पूर्ण


/****************************************************************
 * ATA hard drive functions
 ****************************************************************/

// Transfer data to harddrive using PIO protocol.
अटल पूर्णांक
ata_pio_cmd_data(काष्ठा disk_op_s *op, पूर्णांक isग_लिखो, काष्ठा ata_pio_command *cmd)
अणु
    काष्ठा atadrive_s *adrive_gf = container_of(
        op->drive_fl, काष्ठा atadrive_s, drive);
    काष्ठा ata_channel_s *chan_gf = GET_GLOBALFLAT(adrive_gf->chan_gf);
    u16 iobase1 = GET_GLOBALFLAT(chan_gf->iobase1);
    u16 iobase2 = GET_GLOBALFLAT(chan_gf->iobase2);

    // Disable पूर्णांकerrupts
    outb(ATA_CB_DC_HD15 | ATA_CB_DC_NIEN, iobase2 + ATA_CB_DC);

    पूर्णांक ret = send_cmd(adrive_gf, cmd);
    अगर (ret)
        जाओ fail;
    ret = ata_रुको_data(iobase1);
    अगर (ret)
        जाओ fail;
    ret = ata_pio_transfer(op, isग_लिखो, DISK_SECTOR_SIZE);

fail:
    // Enable पूर्णांकerrupts
    outb(ATA_CB_DC_HD15, iobase2+ATA_CB_DC);
    वापस ret;
पूर्ण

// Transfer data to harddrive using DMA protocol.
अटल पूर्णांक
ata_dma_cmd_data(काष्ठा disk_op_s *op, काष्ठा ata_pio_command *cmd)
अणु
    अगर (! CONFIG_ATA_DMA)
        वापस -1;
    काष्ठा atadrive_s *adrive_gf = container_of(
        op->drive_fl, काष्ठा atadrive_s, drive);
    पूर्णांक ret = send_cmd(adrive_gf, cmd);
    अगर (ret)
        वापस ret;
    वापस ata_dma_transfer(op);
पूर्ण

// Read/ग_लिखो count blocks from a harddrive.
अटल पूर्णांक
ata_पढ़ोग_लिखो(काष्ठा disk_op_s *op, पूर्णांक isग_लिखो)
अणु
    u64 lba = op->lba;

    पूर्णांक usepio = ata_try_dma(op, isग_लिखो, DISK_SECTOR_SIZE);

    काष्ठा ata_pio_command cmd;
    स_रखो(&cmd, 0, माप(cmd));

    अगर (op->count >= (1<<8) || lba + op->count >= (1<<28)) अणु
        cmd.sector_count2 = op->count >> 8;
        cmd.lba_low2 = lba >> 24;
        cmd.lba_mid2 = lba >> 32;
        cmd.lba_high2 = lba >> 40;
        lba &= 0xffffff;

        अगर (usepio)
            cmd.command = (isग_लिखो ? ATA_CMD_WRITE_SECTORS_EXT
                           : ATA_CMD_READ_SECTORS_EXT);
        अन्यथा
            cmd.command = (isग_लिखो ? ATA_CMD_WRITE_DMA_EXT
                           : ATA_CMD_READ_DMA_EXT);
    पूर्ण अन्यथा अणु
        अगर (usepio)
            cmd.command = (isग_लिखो ? ATA_CMD_WRITE_SECTORS
                           : ATA_CMD_READ_SECTORS);
        अन्यथा
            cmd.command = (isग_लिखो ? ATA_CMD_WRITE_DMA
                           : ATA_CMD_READ_DMA);
    पूर्ण

    cmd.sector_count = op->count;
    cmd.lba_low = lba;
    cmd.lba_mid = lba >> 8;
    cmd.lba_high = lba >> 16;
    cmd.device = ((lba >> 24) & 0xf) | ATA_CB_DH_LBA;

    पूर्णांक ret;
    अगर (usepio)
        ret = ata_pio_cmd_data(op, isग_लिखो, &cmd);
    अन्यथा
        ret = ata_dma_cmd_data(op, &cmd);
    अगर (ret)
        वापस DISK_RET_EBADTRACK;
    वापस DISK_RET_SUCCESS;
पूर्ण

// 16bit command demuxer क्रम ATA harddrives.
पूर्णांक
ata_process_op(काष्ठा disk_op_s *op)
अणु
    अगर (!CONFIG_ATA)
        वापस 0;

    काष्ठा atadrive_s *adrive_gf = container_of(
        op->drive_fl, काष्ठा atadrive_s, drive);
    चयन (op->command) अणु
    हाल CMD_READ:
        वापस ata_पढ़ोग_लिखो(op, 0);
    हाल CMD_WRITE:
        वापस ata_पढ़ोग_लिखो(op, 1);
    हाल CMD_RESET:
        ata_reset(adrive_gf);
        वापस DISK_RET_SUCCESS;
    हाल CMD_ISREADY:
        वापस isपढ़ोy(adrive_gf);
    शेष:
        वापस शेष_process_op(op);
    पूर्ण
पूर्ण


/****************************************************************
 * ATAPI functions
 ****************************************************************/

#घोषणा CDROM_CDB_SIZE 12

// Low-level atapi command transmit function.
पूर्णांक
ata_atapi_process_op(काष्ठा disk_op_s *op)
अणु
    अगर (! CONFIG_ATA)
        वापस 0;

    अगर (op->command == CMD_WRITE || op->command == CMD_FORMAT)
        वापस DISK_RET_EWRITEPROTECT;
    u8 cdbcmd[CDROM_CDB_SIZE];
    पूर्णांक blocksize = scsi_fill_cmd(op, cdbcmd, माप(cdbcmd));
    अगर (blocksize < 0)
        वापस शेष_process_op(op);

    काष्ठा atadrive_s *adrive_gf = container_of(
        op->drive_fl, काष्ठा atadrive_s, drive);
    काष्ठा ata_channel_s *chan_gf = GET_GLOBALFLAT(adrive_gf->chan_gf);
    u16 iobase1 = GET_GLOBALFLAT(chan_gf->iobase1);
    u16 iobase2 = GET_GLOBALFLAT(chan_gf->iobase2);

    काष्ठा ata_pio_command cmd;
    स_रखो(&cmd, 0, माप(cmd));
    cmd.lba_mid = blocksize;
    cmd.lba_high = blocksize >> 8;
    cmd.command = ATA_CMD_PACKET;

    // Disable पूर्णांकerrupts
    outb(ATA_CB_DC_HD15 | ATA_CB_DC_NIEN, iobase2 + ATA_CB_DC);

    पूर्णांक ret = send_cmd(adrive_gf, &cmd);
    अगर (ret)
        जाओ fail;
    ret = ata_रुको_data(iobase1);
    अगर (ret)
        जाओ fail;

    // Send command to device
    outsw_fl(iobase1, MAKE_FLATPTR(GET_SEG(SS), cdbcmd), CDROM_CDB_SIZE / 2);

    पूर्णांक status = छोड़ो_aरुको_not_bsy(iobase1, iobase2);
    अगर (status < 0) अणु
        ret = status;
        जाओ fail;
    पूर्ण

    अगर (status & ATA_CB_STAT_ERR) अणु
        u8 err = inb(iobase1 + ATA_CB_ERR);
        // skip "Not Ready"
        अगर (err != 0x20)
            dम_लिखो(6, "send_atapi_cmd : read error (status=%02x err=%02x)\n"
                    , status, err);
        ret = -2;
        जाओ fail;
    पूर्ण
    अगर (blocksize) अणु
        अगर (!(status & ATA_CB_STAT_DRQ)) अणु
            dम_लिखो(6, "send_atapi_cmd : DRQ not set (status %02x)\n", status);
            ret = -3;
            जाओ fail;
        पूर्ण

        ret = ata_pio_transfer(op, 0, blocksize);
    पूर्ण

fail:
    // Enable पूर्णांकerrupts
    outb(ATA_CB_DC_HD15, iobase2+ATA_CB_DC);
    अगर (ret)
        वापस DISK_RET_EBADTRACK;
    वापस DISK_RET_SUCCESS;
पूर्ण


/****************************************************************
 * ATA detect and init
 ****************************************************************/

// Send an identअगरy device or identअगरy device packet command.
अटल पूर्णांक
send_ata_identity(काष्ठा atadrive_s *adrive, u16 *buffer, पूर्णांक command)
अणु
    स_रखो(buffer, 0, DISK_SECTOR_SIZE);

    काष्ठा disk_op_s करोp;
    स_रखो(&करोp, 0, माप(करोp));
    करोp.drive_fl = &adrive->drive;
    करोp.count = 1;
    करोp.lba = 1;
    करोp.buf_fl = MAKE_FLATPTR(GET_SEG(SS), buffer);

    काष्ठा ata_pio_command cmd;
    स_रखो(&cmd, 0, माप(cmd));
    cmd.command = command;

    वापस ata_pio_cmd_data(&करोp, 0, &cmd);
पूर्ण

// Extract the ATA/ATAPI version info.
पूर्णांक
ata_extract_version(u16 *buffer)
अणु
    // Extract ATA/ATAPI version.
    u16 ataversion = buffer[80];
    u8 version;
    क्रम (version=15; version>0; version--)
        अगर (ataversion & (1<<version))
            अवरोध;
    वापस version;
पूर्ण

#घोषणा MAXMODEL 40

// Extract the ATA/ATAPI model info.
अक्षर *
ata_extract_model(अक्षर *model, u32 size, u16 *buffer)
अणु
    // Read model name
    पूर्णांक i;
    क्रम (i=0; i<size/2; i++)
        *(u16*)&model[i*2] = be16_to_cpu(buffer[27+i]);
    model[size] = 0x00;
    nullTrailingSpace(model);
    वापस model;
पूर्ण

// Common init code between ata and atapi
अटल काष्ठा atadrive_s *
init_atadrive(काष्ठा atadrive_s *dummy, u16 *buffer)
अणु
    काष्ठा atadrive_s *adrive = दो_स्मृति_fseg(माप(*adrive));
    अगर (!adrive) अणु
        warn_noalloc();
        वापस शून्य;
    पूर्ण
    स_रखो(adrive, 0, माप(*adrive));
    adrive->chan_gf = dummy->chan_gf;
    adrive->slave = dummy->slave;
    adrive->drive.cntl_id = adrive->chan_gf->ataid * 2 + dummy->slave;
    adrive->drive.removable = (buffer[0] & 0x80) ? 1 : 0;
    वापस adrive;
पूर्ण

// Detect अगर the given drive is an atapi - initialize it अगर so.
अटल काष्ठा atadrive_s *
init_drive_atapi(काष्ठा atadrive_s *dummy, u16 *buffer)
अणु
    // Send an IDENTIFY_DEVICE_PACKET command to device
    पूर्णांक ret = send_ata_identity(dummy, buffer, ATA_CMD_IDENTIFY_PACKET_DEVICE);
    अगर (ret)
        वापस शून्य;

    // Success - setup as ATAPI.
    काष्ठा atadrive_s *adrive = init_atadrive(dummy, buffer);
    अगर (!adrive)
        वापस शून्य;
    adrive->drive.type = DTYPE_ATA_ATAPI;
    adrive->drive.blksize = CDROM_SECTOR_SIZE;
    adrive->drive.sectors = (u64)-1;
    u8 iscd = ((buffer[0] >> 8) & 0x1f) == 0x05;
    अक्षर model[MAXMODEL+1];
    अक्षर *desc = znम_लिखो(MAXDESCSIZE
                          , "DVD/CD [ata%d-%d: %s ATAPI-%d %s]"
                          , adrive->chan_gf->ataid, adrive->slave
                          , ata_extract_model(model, MAXMODEL, buffer)
                          , ata_extract_version(buffer)
                          , (iscd ? "DVD/CD" : "Device"));
    dम_लिखो(1, "%s\n", desc);

    // fill cdidmap
    अगर (iscd) अणु
        पूर्णांक prio = bootprio_find_ata_device(adrive->chan_gf->pci_पंचांगp,
                                            adrive->chan_gf->chanid,
                                            adrive->slave);
        boot_lchs_find_ata_device(adrive->chan_gf->pci_पंचांगp,
                                  adrive->chan_gf->chanid,
                                  adrive->slave,
                                  &(adrive->drive.lchs));
        boot_add_cd(&adrive->drive, desc, prio);
    पूर्ण

    वापस adrive;
पूर्ण

// Detect अगर the given drive is a regular ata drive - initialize it अगर so.
अटल काष्ठा atadrive_s *
init_drive_ata(काष्ठा atadrive_s *dummy, u16 *buffer)
अणु
    // Send an IDENTIFY_DEVICE command to device
    पूर्णांक ret = send_ata_identity(dummy, buffer, ATA_CMD_IDENTIFY_DEVICE);
    अगर (ret)
        वापस शून्य;

    // Success - setup as ATA.
    काष्ठा atadrive_s *adrive = init_atadrive(dummy, buffer);
    अगर (!adrive)
        वापस शून्य;
    adrive->drive.type = DTYPE_ATA;
    adrive->drive.blksize = DISK_SECTOR_SIZE;

    adrive->drive.pchs.cylinder = buffer[1];
    adrive->drive.pchs.head = buffer[3];
    adrive->drive.pchs.sector = buffer[6];

    u64 sectors;
    अगर (buffer[83] & (1 << 10)) // word 83 - lba48 support
        sectors = *(u64*)&buffer[100]; // word 100-103
    अन्यथा
        sectors = *(u32*)&buffer[60]; // word 60 and word 61
    adrive->drive.sectors = sectors;
    u64 adjsize = sectors >> 11;
    अक्षर adjprefix = 'M';
    अगर (adjsize >= (1 << 16)) अणु
        adjsize >>= 10;
        adjprefix = 'G';
    पूर्ण
    अक्षर model[MAXMODEL+1];
    अक्षर *desc = znम_लिखो(MAXDESCSIZE
                          , "ata%d-%d: %s ATA-%d Hard-Disk (%u %ciBytes)"
                          , adrive->chan_gf->ataid, adrive->slave
                          , ata_extract_model(model, MAXMODEL, buffer)
                          , ata_extract_version(buffer)
                          , (u32)adjsize, adjprefix);
    dम_लिखो(1, "%s\n", desc);

    पूर्णांक prio = bootprio_find_ata_device(adrive->chan_gf->pci_पंचांगp,
                                        adrive->chan_gf->chanid,
                                        adrive->slave);
    boot_lchs_find_ata_device(adrive->chan_gf->pci_पंचांगp,
                              adrive->chan_gf->chanid,
                              adrive->slave,
                              &(adrive->drive.lchs));
    // Register with bcv प्रणाली.
    boot_add_hd(&adrive->drive, desc, prio);

    वापस adrive;
पूर्ण

अटल u32 SpinupEnd;

// Wait क्रम non-busy status and check क्रम "floating bus" condition.
अटल पूर्णांक
घातerup_aरुको_non_bsy(u16 base)
अणु
    u8 orstatus = 0;
    u8 status;
    क्रम (;;) अणु
        status = inb(base+ATA_CB_STAT);
        अगर (!(status & ATA_CB_STAT_BSY))
            अवरोध;
        orstatus |= status;
        अगर (orstatus == 0xff) अणु
            dम_लिखो(4, "powerup IDE floating\n");
            वापस orstatus;
        पूर्ण
        अगर (समयr_check(SpinupEnd)) अणु
            warn_समयout();
            वापस -1;
        पूर्ण
        yield();
    पूर्ण
    dम_लिखो(6, "powerup iobase=%x st=%x\n", base, status);
    वापस status;
पूर्ण

// Detect any drives attached to a given controller.
अटल व्योम
ata_detect(व्योम *data)
अणु
    काष्ठा ata_channel_s *chan_gf = data;
    काष्ठा atadrive_s dummy;
    स_रखो(&dummy, 0, माप(dummy));
    dummy.chan_gf = chan_gf;
    // Device detection
    पूर्णांक didreset = 0;
    u8 slave;
    क्रम (slave=0; slave<=1; slave++) अणु
        // Wait क्रम not-bsy.
        u16 iobase1 = chan_gf->iobase1;
        पूर्णांक status = घातerup_aरुको_non_bsy(iobase1);
        अगर (status < 0)
            जारी;
        u8 newdh = slave ? ATA_CB_DH_DEV1 : ATA_CB_DH_DEV0;
        outb(newdh, iobase1+ATA_CB_DH);
        ndelay(400);
        status = घातerup_aरुको_non_bsy(iobase1);
        अगर (status < 0)
            जारी;

        // Check अगर ioport रेजिस्टरs look valid.
        outb(newdh, iobase1+ATA_CB_DH);
        u8 dh = inb(iobase1+ATA_CB_DH);
        outb(0x55, iobase1+ATA_CB_SC);
        outb(0xaa, iobase1+ATA_CB_SN);
        u8 sc = inb(iobase1+ATA_CB_SC);
        u8 sn = inb(iobase1+ATA_CB_SN);
        dम_लिखो(6, "ata_detect ata%d-%d: sc=%x sn=%x dh=%x\n"
                , chan_gf->ataid, slave, sc, sn, dh);
        अगर (sc != 0x55 || sn != 0xaa || dh != newdh)
            जारी;

        // Prepare new drive.
        dummy.slave = slave;

        // reset the channel
        अगर (!didreset) अणु
            ata_reset(&dummy);
            didreset = 1;
        पूर्ण

        // check क्रम ATAPI
        u16 buffer[256];
        काष्ठा atadrive_s *adrive = init_drive_atapi(&dummy, buffer);
        अगर (!adrive) अणु
            // Didn't find an ATAPI drive - look क्रम ATA drive.
            u8 st = inb(iobase1+ATA_CB_STAT);
            अगर (!st)
                // Status not set - can't be a valid drive.
                जारी;

            // Wait क्रम RDY.
            पूर्णांक ret = aरुको_rdy(iobase1);
            अगर (ret < 0)
                जारी;

            // check क्रम ATA.
            adrive = init_drive_ata(&dummy, buffer);
            अगर (!adrive)
                // No ATA drive found
                जारी;
        पूर्ण

        u16 resetresult = buffer[93];
        dम_लिखो(6, "ata_detect resetresult=%04x\n", resetresult);
        अगर (!slave && (resetresult & 0xdf61) == 0x4041)
            // resetresult looks valid and device 0 is responding to
            // device 1 requests - device 1 must not be present - skip
            // detection.
            अवरोध;
    पूर्ण
पूर्ण

// Initialize an ata controller and detect its drives.
अटल व्योम
init_controller(काष्ठा pci_device *pci, पूर्णांक chanid, पूर्णांक irq
                , u32 port1, u32 port2, u32 master)
अणु
    अटल पूर्णांक ataid = 0;
    काष्ठा ata_channel_s *chan_gf = दो_स्मृति_fseg(माप(*chan_gf));
    अगर (!chan_gf) अणु
        warn_noalloc();
        वापस;
    पूर्ण
    chan_gf->ataid = ataid++;
    chan_gf->chanid = chanid;
    chan_gf->irq = irq;
    chan_gf->pci_bdf = pci ? pci->bdf : -1;
    chan_gf->pci_पंचांगp = pci;
    chan_gf->iobase1 = port1;
    chan_gf->iobase2 = port2;
    chan_gf->iomaster = master;
    dम_लिखो(1, "ATA controller %d at %x/%x/%x (irq %d dev %x)\n"
            , ataid, port1, port2, master, irq, chan_gf->pci_bdf);
    run_thपढ़ो(ata_detect, chan_gf);
पूर्ण

#घोषणा IRQ_ATA1 14
#घोषणा IRQ_ATA2 15

// Handle controllers on an ATA PCI device.
अटल व्योम
init_pciata(काष्ठा pci_device *pci, u8 prog_अगर)
अणु
    u8 pciirq = pci_config_पढ़ोb(pci->bdf, PCI_INTERRUPT_LINE);
    पूर्णांक master = 0;
    अगर (CONFIG_ATA_DMA && prog_अगर & 0x80) अणु
        // Check क्रम bus-mastering.
        u32 bar = pci_config_पढ़ोl(pci->bdf, PCI_BASE_ADDRESS_4);
        अगर (bar & PCI_BASE_ADDRESS_SPACE_IO) अणु
            master = pci_enable_iobar(pci, PCI_BASE_ADDRESS_4);
            pci_enable_busmaster(pci);
        पूर्ण
    पूर्ण

    u32 port1, port2, irq;
    अगर (prog_अगर & 1) अणु
        port1 = pci_enable_iobar(pci, PCI_BASE_ADDRESS_0);
        port2 = pci_enable_iobar(pci, PCI_BASE_ADDRESS_1);
        अगर (!port1 || !port2)
            वापस;
        irq = pciirq;
    पूर्ण अन्यथा अणु
        port1 = PORT_ATA1_CMD_BASE;
        port2 = PORT_ATA1_CTRL_BASE;
        irq = IRQ_ATA1;
    पूर्ण
    init_controller(pci, 0, irq, port1, port2, master);

    अगर (prog_अगर & 4) अणु
        port1 = pci_enable_iobar(pci, PCI_BASE_ADDRESS_2);
        port2 = pci_enable_iobar(pci, PCI_BASE_ADDRESS_3);
        अगर (!port1 || !port2)
            वापस;
        irq = pciirq;
    पूर्ण अन्यथा अणु
        port1 = PORT_ATA2_CMD_BASE;
        port2 = PORT_ATA2_CTRL_BASE;
        irq = IRQ_ATA2;
    पूर्ण
    init_controller(pci, 1, irq, port1, port2, master ? master + 8 : 0);
पूर्ण

अटल व्योम
found_genericata(काष्ठा pci_device *pci, व्योम *arg)
अणु
    init_pciata(pci, pci->prog_अगर);
पूर्ण

अटल व्योम
found_compatibleahci(काष्ठा pci_device *pci, व्योम *arg)
अणु
    अगर (CONFIG_AHCI)
        // Alपढ़ोy handled directly via native ahci पूर्णांकerface.
        वापस;
    init_pciata(pci, 0x8f);
पूर्ण

अटल स्थिर काष्ठा pci_device_id pci_ata_tbl[] = अणु
    PCI_DEVICE_CLASS(PCI_ANY_ID, PCI_ANY_ID, PCI_CLASS_STORAGE_IDE
                     , found_genericata),
    PCI_DEVICE(PCI_VENDOR_ID_ATI, 0x4391, found_compatibleahci),
    PCI_DEVICE_END,
पूर्ण;

// Locate and init ata controllers.
अटल व्योम
ata_scan(व्योम)
अणु
    अगर (CONFIG_QEMU && hlist_empty(&PCIDevices)) अणु
        // No PCI devices found - probably a QEMU "-M isapc" machine.
        // Try using ISA ports क्रम ATA controllers.
        init_controller(शून्य, 0, IRQ_ATA1
                        , PORT_ATA1_CMD_BASE, PORT_ATA1_CTRL_BASE, 0);
        init_controller(शून्य, 1, IRQ_ATA2
                        , PORT_ATA2_CMD_BASE, PORT_ATA2_CTRL_BASE, 0);
        वापस;
    पूर्ण

    // Scan PCI bus क्रम ATA adapters
    काष्ठा pci_device *pci;
    क्रमeachpci(pci) अणु
        pci_init_device(pci_ata_tbl, pci, शून्य);
    पूर्ण
पूर्ण

व्योम
ata_setup(व्योम)
अणु
    ASSERT32FLAT();
    अगर (!CONFIG_ATA)
        वापस;

    dम_लिखो(3, "init hard drives\n");

    SpinupEnd = समयr_calc(IDE_TIMEOUT);
    ata_scan();

    SET_BDA(disk_control_byte, 0xc0);

    enable_hwirq(14, FUNC16(entry_76));
पूर्ण

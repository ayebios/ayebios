<शैली गुरु>
// Code क्रम handling usb attached scsi devices.
//
// only usb 2.0 क्रम now.
//
// once we have xhci driver with usb 3.0 support this must
// be updated to use usb3 streams so booting from usb3
// devices actually works.
//
// Authors:
//  Gerd Hoffmann <kraxel@redhat.com>
//
// based on usb-msc.c which is written by:
//  Kevin O'Connor <kevin@koconnor.net>
//
// This file may be distributed under the terms of the GNU LGPLv3 license.

#समावेश "biosvar.h" // GET_GLOBALFLAT
#समावेश "block.h" // DTYPE_USB
#समावेश "blockcmd.h" // cdb_पढ़ो
#समावेश "config.h" // CONFIG_USB_UAS
#समावेश "malloc.h" // मुक्त
#समावेश "output.h" // dम_लिखो
#समावेश "std/disk.h" // DISK_RET_SUCCESS
#समावेश "string.h" // स_रखो
#समावेश "usb.h" // काष्ठा usb_s
#समावेश "usb-uas.h" // usb_uas_init
#समावेश "util.h" // bootprio_find_usb

#घोषणा UAS_UI_COMMAND              0x01
#घोषणा UAS_UI_SENSE                0x03
#घोषणा UAS_UI_RESPONSE             0x04
#घोषणा UAS_UI_TASK_MGMT            0x05
#घोषणा UAS_UI_READ_READY           0x06
#घोषणा UAS_UI_WRITE_READY          0x07

#घोषणा UAS_PIPE_ID_COMMAND         0x01
#घोषणा UAS_PIPE_ID_STATUS          0x02
#घोषणा UAS_PIPE_ID_DATA_IN         0x03
#घोषणा UAS_PIPE_ID_DATA_OUT        0x04

प्रकार काष्ठा अणु
    u8    id;
    u8    reserved;
    u16   tag;
पूर्ण PACKED  uas_ui_header;

प्रकार काष्ठा अणु
    u8    prio_taskattr;   /* 6:3 priority, 2:0 task attribute   */
    u8    reserved_1;
    u8    add_cdb_length;  /* 7:2 additional adb length (dwords) */
    u8    reserved_2;
    u8    lun[8];
    u8    cdb[16];
    u8    add_cdb[];
पूर्ण PACKED  uas_ui_command;

प्रकार काष्ठा अणु
    u16   status_qualअगरier;
    u8    status;
    u8    reserved[7];
    u16   sense_length;
    u8    sense_data[18];
पूर्ण PACKED  uas_ui_sense;

प्रकार काष्ठा अणु
    u16   add_response_info;
    u8    response_code;
पूर्ण PACKED  uas_ui_response;

प्रकार काष्ठा अणु
    u8    function;
    u8    reserved;
    u16   task_tag;
    u8    lun[8];
पूर्ण PACKED  uas_ui_task_mgmt;

प्रकार काष्ठा अणु
    uas_ui_header  hdr;
    जोड़ अणु
        uas_ui_command   command;
        uas_ui_sense     sense;
        uas_ui_task_mgmt task;
        uas_ui_response  response;
    पूर्ण;
पूर्ण PACKED  uas_ui;

काष्ठा uasdrive_s अणु
    काष्ठा drive_s drive;
    काष्ठा usbdevice_s *usbdev;
    काष्ठा usb_pipe *command, *status, *data_in, *data_out;
    u32 lun;
पूर्ण;

पूर्णांक
uas_process_op(काष्ठा disk_op_s *op)
अणु
    अगर (!CONFIG_USB_UAS)
        वापस DISK_RET_EBADTRACK;

    काष्ठा uasdrive_s *drive_gf = container_of(
        op->drive_fl, काष्ठा uasdrive_s, drive);

    uas_ui ui;
    स_रखो(&ui, 0, माप(ui));
    ui.hdr.id = UAS_UI_COMMAND;
    ui.hdr.tag = 0xdead;
    ui.command.lun[1] = GET_GLOBALFLAT(drive_gf->lun);
    पूर्णांक blocksize = scsi_fill_cmd(op, ui.command.cdb, माप(ui.command.cdb));
    अगर (blocksize < 0)
        वापस शेष_process_op(op);
    पूर्णांक ret = usb_send_bulk(GET_GLOBALFLAT(drive_gf->command),
                            USB_सूची_OUT, MAKE_FLATPTR(GET_SEG(SS), &ui),
                            माप(ui.hdr) + माप(ui.command));
    अगर (ret) अणु
        dम_लिखो(1, "uas: command send fail");
        जाओ fail;
    पूर्ण

    स_रखो(&ui, 0xff, माप(ui));
    ret = usb_send_bulk(GET_GLOBALFLAT(drive_gf->status),
                        USB_सूची_IN, MAKE_FLATPTR(GET_SEG(SS), &ui), माप(ui));
    अगर (ret) अणु
        dम_लिखो(1, "uas: status recv fail");
        जाओ fail;
    पूर्ण

    चयन (ui.hdr.id) अणु
    हाल UAS_UI_SENSE:
        जाओ have_sense;
    हाल UAS_UI_READ_READY:
        ret = usb_send_bulk(GET_GLOBALFLAT(drive_gf->data_in),
                            USB_सूची_IN, op->buf_fl, op->count * blocksize);
        अगर (ret) अणु
            dम_लिखो(1, "uas: data read fail");
            जाओ fail;
        पूर्ण
        अवरोध;
    हाल UAS_UI_WRITE_READY:
        ret = usb_send_bulk(GET_GLOBALFLAT(drive_gf->data_out),
                            USB_सूची_OUT, op->buf_fl, op->count * blocksize);
        अगर (ret) अणु
            dम_लिखो(1, "uas: data write fail");
            जाओ fail;
        पूर्ण
        अवरोध;
    शेष:
        dम_लिखो(1, "uas: unknown status ui id %d", ui.hdr.id);
        जाओ fail;
    पूर्ण

    स_रखो(&ui, 0xff, माप(ui));
    ret = usb_send_bulk(GET_GLOBALFLAT(drive_gf->status),
                        USB_सूची_IN, MAKE_FLATPTR(GET_SEG(SS), &ui), माप(ui));
    अगर (ret) अणु
        dम_लिखो(1, "uas: status recv fail");
        जाओ fail;
    पूर्ण
    अगर (ui.hdr.id != UAS_UI_SENSE) अणु
        dम_लिखो(1, "uas: expected sense ui, got ui id %d", ui.hdr.id);
        जाओ fail;
    पूर्ण

have_sense:
    अगर (ui.sense.status == 0) अणु
        वापस DISK_RET_SUCCESS;
    पूर्ण

fail:
    वापस DISK_RET_EBADTRACK;
पूर्ण

अटल व्योम
uas_init_lun(काष्ठा uasdrive_s *drive, काष्ठा usbdevice_s *usbdev,
             काष्ठा usb_pipe *command, काष्ठा usb_pipe *status,
             काष्ठा usb_pipe *data_in, काष्ठा usb_pipe *data_out,
             u32 lun)
अणु
    स_रखो(drive, 0, माप(*drive));
    अगर (usb_32bit_pipe(data_in))
        drive->drive.type = DTYPE_UAS_32;
    अन्यथा
        drive->drive.type = DTYPE_UAS;
    drive->usbdev = usbdev;
    drive->command = command;
    drive->status = status;
    drive->data_in = data_in;
    drive->data_out = data_out;
    drive->lun = lun;
पूर्ण

अटल पूर्णांक
uas_add_lun(u32 lun, काष्ठा drive_s *पंचांगpl_drv)
अणु
    काष्ठा uasdrive_s *पंचांगpl_lun =
        container_of(पंचांगpl_drv, काष्ठा uasdrive_s, drive);
    काष्ठा uasdrive_s *drive = दो_स्मृति_fseg(माप(*drive));
    अगर (!drive) अणु
        warn_noalloc();
        वापस -1;
    पूर्ण
    uas_init_lun(drive, पंचांगpl_lun->usbdev,
                 पंचांगpl_lun->command, पंचांगpl_lun->status,
                 पंचांगpl_lun->data_in, पंचांगpl_lun->data_out,
                 lun);

    पूर्णांक prio = bootprio_find_usb(drive->usbdev, drive->lun);
    पूर्णांक ret = scsi_drive_setup(&drive->drive, "USB UAS", prio);
    अगर (ret) अणु
        मुक्त(drive);
        वापस -1;
    पूर्ण
    वापस 0;
पूर्ण

पूर्णांक
usb_uas_setup(काष्ठा usbdevice_s *usbdev)
अणु
    अगर (!CONFIG_USB_UAS)
        वापस -1;

    // Verअगरy right kind of device
    काष्ठा usb_पूर्णांकerface_descriptor *अगरace = usbdev->अगरace;
    अगर (अगरace->bInterfaceSubClass != US_SC_SCSI ||
        अगरace->bInterfaceProtocol != US_PR_UAS) अणु
        dम_लिखो(1, "Unsupported UAS device (subclass=%02x proto=%02x)\n"
                , अगरace->bInterfaceSubClass, अगरace->bInterfaceProtocol);
        वापस -1;
    पूर्ण

    /* find & allocate pipes */
    काष्ठा usb_endpoपूर्णांक_descriptor *ep = शून्य;
    काष्ठा usb_pipe *command = शून्य;
    काष्ठा usb_pipe *status = शून्य;
    काष्ठा usb_pipe *data_in = शून्य;
    काष्ठा usb_pipe *data_out = शून्य;
    u8 *desc = (u8*)अगरace;
    जबतक (desc) अणु
        desc += desc[0];
        चयन (desc[1]) अणु
        हाल USB_DT_ENDPOINT:
            ep = (व्योम*)desc;
            अवरोध;
        हाल USB_DT_ENDPOINT_COMPANION:
            /* No support (yet) क्रम usb3 streams */
            dम_लिखो(1, "Superspeed UAS devices not supported (yet)\n");
            जाओ fail;
        हाल 0x24:
            चयन (desc[2]) अणु
            हाल UAS_PIPE_ID_COMMAND:
                command = usb_alloc_pipe(usbdev, ep);
                अवरोध;
            हाल UAS_PIPE_ID_STATUS:
                status = usb_alloc_pipe(usbdev, ep);
                अवरोध;
            हाल UAS_PIPE_ID_DATA_IN:
                data_in = usb_alloc_pipe(usbdev, ep);
                अवरोध;
            हाल UAS_PIPE_ID_DATA_OUT:
                data_out = usb_alloc_pipe(usbdev, ep);
                अवरोध;
            शेष:
                जाओ fail;
            पूर्ण
            अवरोध;
        शेष:
            desc = शून्य;
            अवरोध;
        पूर्ण
    पूर्ण
    अगर (!command || !status || !data_in || !data_out)
        जाओ fail;

    काष्ठा uasdrive_s lun0;
    uas_init_lun(&lun0, usbdev, command, status, data_in, data_out, 0);
    पूर्णांक ret = scsi_rep_luns_scan(&lun0.drive, uas_add_lun);
    अगर (ret <= 0) अणु
        dम_लिखो(1, "Unable to configure UAS drive.\n");
        जाओ fail;
    पूर्ण

    वापस 0;

fail:
    usb_मुक्त_pipe(usbdev, command);
    usb_मुक्त_pipe(usbdev, status);
    usb_मुक्त_pipe(usbdev, data_in);
    usb_मुक्त_pipe(usbdev, data_out);
    वापस -1;
पूर्ण

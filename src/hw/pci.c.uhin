<शैली गुरु>
// PCI config space access functions.
//
// Copyright (C) 2008  Kevin O'Connor <kevin@koconnor.net>
// Copyright (C) 2002  MandrakeSoft S.A.
//
// This file may be distributed under the terms of the GNU LGPLv3 license.

#समावेश "output.h" // dम_लिखो
#समावेश "pci.h" // pci_config_ग_लिखोl
#समावेश "pci_regs.h" // PCI_VENDOR_ID
#समावेश "util.h" // udelay
#समावेश "x86.h" // outl

#घोषणा PORT_PCI_CMD           0x0cf8
#घोषणा PORT_PCI_DATA          0x0cfc

अटल u32 mmconfig;

अटल व्योम *mmconfig_addr(u16 bdf, u32 addr)
अणु
    वापस (व्योम*)(mmconfig + ((u32)bdf << 12) + addr);
पूर्ण

अटल u32 ioconfig_cmd(u16 bdf, u32 addr)
अणु
    वापस 0x80000000 | (bdf << 8) | (addr & 0xfc);
पूर्ण

व्योम pci_config_ग_लिखोl(u16 bdf, u32 addr, u32 val)
अणु
    अगर (!MODESEGMENT && mmconfig) अणु
        ग_लिखोl(mmconfig_addr(bdf, addr), val);
    पूर्ण अन्यथा अणु
        outl(ioconfig_cmd(bdf, addr), PORT_PCI_CMD);
        outl(val, PORT_PCI_DATA);
    पूर्ण
पूर्ण

व्योम pci_config_ग_लिखोw(u16 bdf, u32 addr, u16 val)
अणु
    अगर (!MODESEGMENT && mmconfig) अणु
        ग_लिखोw(mmconfig_addr(bdf, addr), val);
    पूर्ण अन्यथा अणु
        outl(ioconfig_cmd(bdf, addr), PORT_PCI_CMD);
        outw(val, PORT_PCI_DATA + (addr & 2));
    पूर्ण
पूर्ण

व्योम pci_config_ग_लिखोb(u16 bdf, u32 addr, u8 val)
अणु
    अगर (!MODESEGMENT && mmconfig) अणु
        ग_लिखोb(mmconfig_addr(bdf, addr), val);
    पूर्ण अन्यथा अणु
        outl(ioconfig_cmd(bdf, addr), PORT_PCI_CMD);
        outb(val, PORT_PCI_DATA + (addr & 3));
    पूर्ण
पूर्ण

u32 pci_config_पढ़ोl(u16 bdf, u32 addr)
अणु
    अगर (!MODESEGMENT && mmconfig) अणु
        वापस पढ़ोl(mmconfig_addr(bdf, addr));
    पूर्ण अन्यथा अणु
        outl(ioconfig_cmd(bdf, addr), PORT_PCI_CMD);
        वापस inl(PORT_PCI_DATA);
    पूर्ण
पूर्ण

u16 pci_config_पढ़ोw(u16 bdf, u32 addr)
अणु
    अगर (!MODESEGMENT && mmconfig) अणु
        वापस पढ़ोw(mmconfig_addr(bdf, addr));
    पूर्ण अन्यथा अणु
        outl(ioconfig_cmd(bdf, addr), PORT_PCI_CMD);
        वापस inw(PORT_PCI_DATA + (addr & 2));
    पूर्ण
पूर्ण

u8 pci_config_पढ़ोb(u16 bdf, u32 addr)
अणु
    अगर (!MODESEGMENT && mmconfig) अणु
        वापस पढ़ोb(mmconfig_addr(bdf, addr));
    पूर्ण अन्यथा अणु
        outl(ioconfig_cmd(bdf, addr), PORT_PCI_CMD);
        वापस inb(PORT_PCI_DATA + (addr & 3));
    पूर्ण
पूर्ण

व्योम
pci_config_maskw(u16 bdf, u32 addr, u16 off, u16 on)
अणु
    u16 val = pci_config_पढ़ोw(bdf, addr);
    val = (val & ~off) | on;
    pci_config_ग_लिखोw(bdf, addr, val);
पूर्ण

व्योम
pci_enable_mmconfig(u64 addr, स्थिर अक्षर *name)
अणु
    अगर (addr >= 0x100000000ll)
        वापस;
    dम_लिखो(1, "PCIe: using %s mmconfig at 0x%llx\n", name, addr);
    mmconfig = addr;
पूर्ण

u8 pci_find_capability(u16 bdf, u8 cap_id, u8 cap)
अणु
    पूर्णांक i;
    u16 status = pci_config_पढ़ोw(bdf, PCI_STATUS);

    अगर (!(status & PCI_STATUS_CAP_LIST))
        वापस 0;

    अगर (cap == 0) अणु
        /* find first */
        cap = pci_config_पढ़ोb(bdf, PCI_CAPABILITY_LIST);
    पूर्ण अन्यथा अणु
        /* find next */
        cap = pci_config_पढ़ोb(bdf, cap + PCI_CAP_LIST_NEXT);
    पूर्ण
    क्रम (i = 0; cap && i <= 0xff; i++) अणु
        अगर (pci_config_पढ़ोb(bdf, cap + PCI_CAP_LIST_ID) == cap_id)
            वापस cap;
        cap = pci_config_पढ़ोb(bdf, cap + PCI_CAP_LIST_NEXT);
    पूर्ण

    वापस 0;
पूर्ण

// Helper function क्रम क्रमeachbdf() macro - वापस next device
पूर्णांक
pci_next(पूर्णांक bdf, पूर्णांक bus)
अणु
    अगर (pci_bdf_to_fn(bdf) == 0
        && (pci_config_पढ़ोb(bdf, PCI_HEADER_TYPE) & 0x80) == 0)
        // Last found device wasn't a multi-function device - skip to
        // the next device.
        bdf += 8;
    अन्यथा
        bdf += 1;

    क्रम (;;) अणु
        अगर (pci_bdf_to_bus(bdf) != bus)
            वापस -1;

        u16 v = pci_config_पढ़ोw(bdf, PCI_VENDOR_ID);
        अगर (v != 0x0000 && v != 0xffff)
            // Device is present.
            वापस bdf;

        अगर (pci_bdf_to_fn(bdf) == 0)
            bdf += 8;
        अन्यथा
            bdf += 1;
    पूर्ण
पूर्ण

// Check अगर PCI is available at all
पूर्णांक
pci_probe_host(व्योम)
अणु
    outl(0x80000000, PORT_PCI_CMD);
    अगर (inl(PORT_PCI_CMD) != 0x80000000) अणु
        dम_लिखो(1, "Detected non-PCI system\n");
        वापस -1;
    पूर्ण
    वापस 0;
पूर्ण

व्योम
pci_reboot(व्योम)
अणु
    u8 v = inb(PORT_PCI_REBOOT) & ~6;
    outb(v|2, PORT_PCI_REBOOT); /* Request hard reset */
    udelay(50);
    outb(v|6, PORT_PCI_REBOOT); /* Actually करो the reset */
    udelay(50);
पूर्ण

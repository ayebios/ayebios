<शैली गुरु>
/*
 * Copyright (C) 2001, Novell Inc.
 * Copyright (C) 2010  Kevin O'Connor <kevin@koconnor.net>
 * All rights reserved.
 * 
 * Redistribution and use in source and binary क्रमms, with or without
 * modअगरication, are permitted provided that the following conditions 
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary क्रमm must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    करोcumentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of Novell nor the names of the contributors may 
 *    be used to enकरोrse or promote products derived from this software
 *    without specअगरic prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY सूचीECT,
 * INसूचीECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 */

/*
 * a tiny jpeg decoder.
 *
 * written in August 2001 by Michael Schroeder <mls@suse.de>
 *
 */

#घोषणा __LITTLE_ENDIAN
#समावेश "malloc.h"
#समावेश "string.h"
#समावेश "util.h"
#घोषणा ISHIFT 11

#घोषणा IFIX(a) ((पूर्णांक)((a) * (1 << ISHIFT) + .5))
#घोषणा IMULT(a, b) (((a) * (b)) >> ISHIFT)
#घोषणा ITOINT(a) ((a) >> ISHIFT)

#अगर_अघोषित __P
# define __P(x) x
#पूर्ण_अगर

/* special markers */
#घोषणा M_BADHUFF        -1
#घोषणा M_खातापूर्ण                0x80

काष्ठा in अणु
    अचिन्हित अक्षर *p;
    अचिन्हित पूर्णांक bits;
    पूर्णांक left;
    पूर्णांक marker;

    पूर्णांक (*func) __P((व्योम *));
    व्योम *data;
पूर्ण;

/*********************************/
काष्ठा dec_hufftbl;
काष्ठा enc_hufftbl;

जोड़ hufftblp अणु
    काष्ठा dec_hufftbl *dhuff;
    काष्ठा enc_hufftbl *ehuff;
पूर्ण;

काष्ठा scan अणु
    पूर्णांक dc;               /* old dc value */

    जोड़ hufftblp hudc;
    जोड़ hufftblp huac;
    पूर्णांक next;             /* when to चयन to next scan */

    पूर्णांक cid;              /* component id */
    पूर्णांक hv;               /* horiz/vert, copied from comp */
    पूर्णांक tq;               /* quant tbl, copied from comp */
पूर्ण;

/*********************************/

#घोषणा DECBITS 10        /* seems to be the optimum */

काष्ठा dec_hufftbl अणु
    पूर्णांक maxcode[17];
    पूर्णांक valptr[16];
    अचिन्हित अक्षर vals[256];
    अचिन्हित पूर्णांक llvals[1 << DECBITS];
पूर्ण;

अटल व्योम decode_mcus __P((काष्ठा in *, पूर्णांक *, पूर्णांक, काष्ठा scan *, पूर्णांक *));
अटल पूर्णांक dec_पढ़ोmarker __P((काष्ठा in *));
अटल व्योम dec_makehuff __P((काष्ठा dec_hufftbl *, पूर्णांक *, अचिन्हित अक्षर *));

अटल व्योम setinput __P((काष्ठा in *, अचिन्हित अक्षर *));
/*********************************/

#अघोषित PREC
#घोषणा PREC पूर्णांक

अटल व्योम idctqtab __P((अचिन्हित अक्षर *, PREC *));
अटल व्योम idct __P((पूर्णांक *, पूर्णांक *, PREC *, PREC, पूर्णांक));
अटल व्योम scaleidctqtab __P((PREC *, PREC));

/*********************************/

अटल व्योम initcol __P((PREC[][64]));

अटल व्योम col221111 __P((पूर्णांक *, अचिन्हित अक्षर *, पूर्णांक));
अटल व्योम col221111_16 __P((पूर्णांक *, अचिन्हित अक्षर *, पूर्णांक));
अटल व्योम col221111_32 __P((पूर्णांक *, अचिन्हित अक्षर *, पूर्णांक));

/*********************************/

#घोषणा ERR_NO_SOI 1
#घोषणा ERR_NOT_8BIT 2
#घोषणा ERR_HEIGHT_MISMATCH 3
#घोषणा ERR_WIDTH_MISMATCH 4
#घोषणा ERR_BAD_WIDTH_OR_HEIGHT 5
#घोषणा ERR_TOO_MANY_COMPPS 6
#घोषणा ERR_ILLEGAL_HV 7
#घोषणा ERR_QUANT_TABLE_SELECTOR 8
#घोषणा ERR_NOT_YCBCR_221111 9
#घोषणा ERR_UNKNOWN_CID_IN_SCAN 10
#घोषणा ERR_NOT_SEQUENTIAL_DCT 11
#घोषणा ERR_WRONG_MARKER 12
#घोषणा ERR_NO_EOI 13
#घोषणा ERR_BAD_TABLES 14
#घोषणा ERR_DEPTH_MISMATCH 15

/*********************************/

#घोषणा M_SOI   0xd8
#घोषणा M_APP0  0xe0
#घोषणा M_DQT   0xdb
#घोषणा M_SOF0  0xc0
#घोषणा M_DHT   0xc4
#घोषणा M_DRI   0xdd
#घोषणा M_SOS   0xda
#घोषणा M_RST0  0xd0
#घोषणा M_EOI   0xd9
#घोषणा M_COM   0xfe

काष्ठा comp अणु
    पूर्णांक cid;
    पूर्णांक hv;
    पूर्णांक tq;
पूर्ण;

#घोषणा MAXCOMP 4
काष्ठा jpginfo अणु
    पूर्णांक nc;   /* number of components */
    पूर्णांक ns;   /* number of scans */
    पूर्णांक dri;  /* restart पूर्णांकerval */
    पूर्णांक nm;   /* mcus til next marker */
    पूर्णांक rm;   /* next restart marker */
पूर्ण;

काष्ठा jpeg_decdata अणु
    पूर्णांक dcts[6 * 64 + 16];
    पूर्णांक out[64 * 6];
    पूर्णांक dquant[3][64];

    अचिन्हित अक्षर *datap;
    काष्ठा jpginfo info;
    काष्ठा comp comps[MAXCOMP];
    काष्ठा scan dscans[MAXCOMP];
    अचिन्हित अक्षर quant[4][64];
    काष्ठा dec_hufftbl dhuff[4];
    काष्ठा in in;

    पूर्णांक height, width;
पूर्ण;

अटल पूर्णांक getbyte(काष्ठा jpeg_decdata *jpeg)
अणु
    वापस *jpeg->datap++;
पूर्ण

अटल पूर्णांक getword(काष्ठा jpeg_decdata *jpeg)
अणु
    पूर्णांक c1, c2;
    c1 = *jpeg->datap++;
    c2 = *jpeg->datap++;
    वापस c1 << 8 | c2;
पूर्ण

अटल पूर्णांक पढ़ोtables(काष्ठा jpeg_decdata *jpeg, पूर्णांक till)
अणु
    पूर्णांक m, l, i, j, lq, pq, tq;
    पूर्णांक tc, th, tt;

    क्रम (;;) अणु
        अगर (getbyte(jpeg) != 0xff)
            वापस -1;
        अगर ((m = getbyte(jpeg)) == till)
            अवरोध;

        चयन (m) अणु
        हाल 0xc2:
            वापस 0;

        हाल M_DQT:
            lq = getword(jpeg);
            जबतक (lq > 2) अणु
                pq = getbyte(jpeg);
                tq = pq & 15;
                अगर (tq > 3)
                    वापस -1;
                pq >>= 4;
                अगर (pq != 0)
                    वापस -1;
                क्रम (i = 0; i < 64; i++)
                    jpeg->quant[tq][i] = getbyte(jpeg);
                lq -= 64 + 1;
            पूर्ण
            अवरोध;

        हाल M_DHT:
            l = getword(jpeg);
            जबतक (l > 2) अणु
                पूर्णांक hufflen[16], k;
                अचिन्हित अक्षर huffvals[256];

                tc = getbyte(jpeg);
                th = tc & 15;
                tc >>= 4;
                tt = tc * 2 + th;
                अगर (tc > 1 || th > 1)
                    वापस -1;
                क्रम (i = 0; i < 16; i++)
                    hufflen[i] = getbyte(jpeg);
                l -= 1 + 16;
                k = 0;
                क्रम (i = 0; i < 16; i++) अणु
                    क्रम (j = 0; j < hufflen[i]; j++)
                        huffvals[k++] = getbyte(jpeg);
                    l -= hufflen[i];
                पूर्ण
                dec_makehuff(jpeg->dhuff + tt, hufflen, huffvals);
            पूर्ण
            अवरोध;

        हाल M_DRI:
            l = getword(jpeg);
            jpeg->info.dri = getword(jpeg);
            अवरोध;

        शेष:
            l = getword(jpeg);
            जबतक (l-- > 2)
                getbyte(jpeg);
            अवरोध;
        पूर्ण
    पूर्ण
    वापस 0;
पूर्ण

अटल व्योम dec_initscans(काष्ठा jpeg_decdata *jpeg)
अणु
    पूर्णांक i;

    jpeg->info.nm = jpeg->info.dri + 1;
    jpeg->info.rm = M_RST0;
    क्रम (i = 0; i < jpeg->info.ns; i++)
        jpeg->dscans[i].dc = 0;
पूर्ण

अटल पूर्णांक dec_checkmarker(काष्ठा jpeg_decdata *jpeg)
अणु
    पूर्णांक i;

    अगर (dec_पढ़ोmarker(&jpeg->in) != jpeg->info.rm)
        वापस -1;
    jpeg->info.nm = jpeg->info.dri;
    jpeg->info.rm = (jpeg->info.rm + 1) & ~0x08;
    क्रम (i = 0; i < jpeg->info.ns; i++)
        jpeg->dscans[i].dc = 0;
    वापस 0;
पूर्ण

काष्ठा jpeg_decdata *jpeg_alloc(व्योम)
अणु
    काष्ठा jpeg_decdata *jpeg = दो_स्मृति_पंचांगphigh(माप(*jpeg));
    वापस jpeg;
पूर्ण

पूर्णांक jpeg_decode(काष्ठा jpeg_decdata *jpeg, अचिन्हित अक्षर *buf)
अणु
    पूर्णांक i, j, m, tac, tdc;

    अगर (!jpeg || !buf)
        वापस -1;
    jpeg->datap = buf;
    अगर (getbyte(jpeg) != 0xff)
        वापस ERR_NO_SOI;
    अगर (getbyte(jpeg) != M_SOI)
        वापस ERR_NO_SOI;
    अगर (पढ़ोtables(jpeg, M_SOF0))
        वापस ERR_BAD_TABLES;
    getword(jpeg);
    i = getbyte(jpeg);
    अगर (i != 8)
        वापस ERR_NOT_8BIT;
    jpeg->height = getword(jpeg);
    jpeg->width = getword(jpeg);
    अगर ((jpeg->height & 15) || (jpeg->width & 15))
        वापस ERR_BAD_WIDTH_OR_HEIGHT;
    jpeg->info.nc = getbyte(jpeg);
    अगर (jpeg->info.nc > MAXCOMP)
        वापस ERR_TOO_MANY_COMPPS;
    क्रम (i = 0; i < jpeg->info.nc; i++) अणु
        पूर्णांक h, v;
        jpeg->comps[i].cid = getbyte(jpeg);
        jpeg->comps[i].hv = getbyte(jpeg);
        v = jpeg->comps[i].hv & 15;
        h = jpeg->comps[i].hv >> 4;
        jpeg->comps[i].tq = getbyte(jpeg);
        अगर (h > 3 || v > 3)
            वापस ERR_ILLEGAL_HV;
        अगर (jpeg->comps[i].tq > 3)
            वापस ERR_QUANT_TABLE_SELECTOR;
    पूर्ण
    अगर (पढ़ोtables(jpeg, M_SOS))
        वापस ERR_BAD_TABLES;
    getword(jpeg);
    jpeg->info.ns = getbyte(jpeg);
    अगर (jpeg->info.ns != 3)
        वापस ERR_NOT_YCBCR_221111;
    क्रम (i = 0; i < 3; i++) अणु
        jpeg->dscans[i].cid = getbyte(jpeg);
        tdc = getbyte(jpeg);
        tac = tdc & 15;
        tdc >>= 4;
        अगर (tdc > 1 || tac > 1)
            वापस ERR_QUANT_TABLE_SELECTOR;
        क्रम (j = 0; j < jpeg->info.nc; j++)
            अगर (jpeg->comps[j].cid == jpeg->dscans[i].cid)
                अवरोध;
        अगर (j == jpeg->info.nc)
            वापस ERR_UNKNOWN_CID_IN_SCAN;
        jpeg->dscans[i].hv = jpeg->comps[j].hv;
        jpeg->dscans[i].tq = jpeg->comps[j].tq;
        jpeg->dscans[i].hudc.dhuff = &jpeg->dhuff[tdc];
        jpeg->dscans[i].huac.dhuff = &jpeg->dhuff[2 + tac];
    पूर्ण

    i = getbyte(jpeg);
    j = getbyte(jpeg);
    m = getbyte(jpeg);

    अगर (i != 0 || j != 63 || m != 0)
        वापस ERR_NOT_SEQUENTIAL_DCT;

    अगर (jpeg->dscans[0].cid != 1 || jpeg->dscans[1].cid != 2
        || jpeg->dscans[2].cid != 3)
        वापस ERR_NOT_YCBCR_221111;

    अगर (jpeg->dscans[0].hv != 0x22 || jpeg->dscans[1].hv != 0x11
        || jpeg->dscans[2].hv != 0x11)
        वापस ERR_NOT_YCBCR_221111;

    idctqtab(jpeg->quant[jpeg->dscans[0].tq], jpeg->dquant[0]);
    idctqtab(jpeg->quant[jpeg->dscans[1].tq], jpeg->dquant[1]);
    idctqtab(jpeg->quant[jpeg->dscans[2].tq], jpeg->dquant[2]);
    initcol(jpeg->dquant);
    setinput(&jpeg->in, jpeg->datap);

#अगर 0
    /* landing zone */
    img[len] = 0;
    img[len + 1] = 0xff;
    img[len + 2] = M_खातापूर्ण;
#पूर्ण_अगर

    dec_initscans(jpeg);

    वापस 0;
पूर्ण

व्योम jpeg_get_size(काष्ठा jpeg_decdata *jpeg, पूर्णांक *width, पूर्णांक *height)
अणु
    *width = jpeg->width;
    *height = jpeg->height;
पूर्ण

पूर्णांक jpeg_show(काष्ठा jpeg_decdata *jpeg, अचिन्हित अक्षर *pic, पूर्णांक width
              , पूर्णांक height, पूर्णांक depth, पूर्णांक bytes_per_line_dest)
अणु
    पूर्णांक m, mcusx, mcusy, mx, my, mloffset, jpgbpl;
    पूर्णांक max[6];

    अगर (jpeg->height != height)
        वापस ERR_HEIGHT_MISMATCH;
    अगर (jpeg->width != width)
        वापस ERR_WIDTH_MISMATCH;

    jpgbpl = width * depth / 8;
    mloffset = bytes_per_line_dest > jpgbpl ? bytes_per_line_dest : jpgbpl;

    mcusx = jpeg->width >> 4;
    mcusy = jpeg->height >> 4;

    jpeg->dscans[0].next = 6 - 4;
    jpeg->dscans[1].next = 6 - 4 - 1;
    jpeg->dscans[2].next = 6 - 4 - 1 - 1;        /* 411 encoding */
    क्रम (my = 0; my < mcusy; my++) अणु
        क्रम (mx = 0; mx < mcusx; mx++) अणु
            अगर (jpeg->info.dri && !--jpeg->info.nm)
                अगर (dec_checkmarker(jpeg))
                    वापस ERR_WRONG_MARKER;

            decode_mcus(&jpeg->in, jpeg->dcts, 6, jpeg->dscans, max);
            idct(jpeg->dcts, jpeg->out, jpeg->dquant[0],
                 IFIX(128.5), max[0]);
            idct(jpeg->dcts + 64, jpeg->out + 64, jpeg->dquant[0],
                 IFIX(128.5), max[1]);
            idct(jpeg->dcts + 128, jpeg->out + 128, jpeg->dquant[0],
                 IFIX(128.5), max[2]);
            idct(jpeg->dcts + 192, jpeg->out + 192, jpeg->dquant[0],
                 IFIX(128.5), max[3]);
            idct(jpeg->dcts + 256, jpeg->out + 256, jpeg->dquant[1],
                 IFIX(0.5), max[4]);
            idct(jpeg->dcts + 320, jpeg->out + 320, jpeg->dquant[2],
                 IFIX(0.5), max[5]);

            चयन (depth) अणु
            हाल 32:
                col221111_32(jpeg->out,
                             pic + (my * 16 * mloffset + mx * 16 * 4),
                             mloffset);
                अवरोध;
            हाल 24:
                col221111(jpeg->out,
                          pic + (my * 16 * mloffset + mx * 16 * 3),
                          mloffset);
                अवरोध;
            हाल 16:
                col221111_16(jpeg->out,
                             pic + (my * 16 * mloffset + mx * 16 * 2),
                             mloffset);
                अवरोध;
            शेष:
                वापस ERR_DEPTH_MISMATCH;
                अवरोध;
            पूर्ण
        पूर्ण
    पूर्ण

    m = dec_पढ़ोmarker(&jpeg->in);
    अगर (m != M_EOI)
        वापस ERR_NO_EOI;

    वापस 0;
पूर्ण

/****************************************************************/
/**************       huffman decoder             ***************/
/****************************************************************/

अटल पूर्णांक fillbits __P((काष्ठा in *, पूर्णांक, अचिन्हित पूर्णांक));
अटल पूर्णांक dec_rec2 __P((काष्ठा in *, काष्ठा dec_hufftbl *, पूर्णांक *, पूर्णांक, पूर्णांक));

अटल व्योम setinput(काष्ठा in *in, अचिन्हित अक्षर *p)
अणु
    in->p = p;
    in->left = 0;
    in->bits = 0;
    in->marker = 0;
पूर्ण

अटल पूर्णांक fillbits(काष्ठा in *in, पूर्णांक le, अचिन्हित पूर्णांक bi)
अणु
    पूर्णांक b, m;

    अगर (in->marker) अणु
        अगर (le <= 16)
            in->bits = bi << 16, le += 16;
        वापस le;
    पूर्ण
    जबतक (le <= 24) अणु
        b = *in->p++;
        अगर (b == 0xff && (m = *in->p++) != 0) अणु
            अगर (m == M_खातापूर्ण) अणु
                अगर (in->func && (m = in->func(in->data)) == 0)
                    जारी;
            पूर्ण
            in->marker = m;
            अगर (le <= 16)
                bi = bi << 16, le += 16;
            अवरोध;
        पूर्ण
        bi = bi << 8 | b;
        le += 8;
    पूर्ण
    in->bits = bi;                /* पंचांगp... 2 वापस values needed */
    वापस le;
पूर्ण

अटल पूर्णांक dec_पढ़ोmarker(काष्ठा in *in)
अणु
    पूर्णांक m;

    in->left = fillbits(in, in->left, in->bits);
    अगर ((m = in->marker) == 0)
        वापस 0;
    in->left = 0;
    in->marker = 0;
    वापस m;
पूर्ण

#घोषणा LEBI_DCL       पूर्णांक le, bi
#घोषणा LEBI_GET(in)   (le = in->left, bi = in->bits)
#घोषणा LEBI_PUT(in)   (in->left = le, in->bits = bi)

#घोषणा GETBITS(in, n) (                                     \
  (le < (n) ? le = fillbits(in, le, bi), bi = in->bits : 0), \
  (le -= (n)),                                               \
  bi >> le & ((1 << (n)) - 1)                                \
)

#घोषणा UNGETBITS(in, n) ( \
  le += (n)                \
)


अटल पूर्णांक dec_rec2(काष्ठा in *in, काष्ठा dec_hufftbl *hu, पूर्णांक *runp,
                    पूर्णांक c, पूर्णांक i)
अणु
    LEBI_DCL;

    LEBI_GET(in);
    अगर (i) अणु
        UNGETBITS(in, i & 127);
        *runp = i >> 8 & 15;
        i >>= 16;
    पूर्ण अन्यथा अणु
        क्रम (i = DECBITS;
             (c = ((c << 1) | GETBITS(in, 1))) >= (hu->maxcode[i]); i++);
        अगर (i >= 16) अणु
            in->marker = M_BADHUFF;
            वापस 0;
        पूर्ण
        i = hu->vals[hu->valptr[i] + c - hu->maxcode[i - 1] * 2];
        *runp = i >> 4;
        i &= 15;
    पूर्ण
    अगर (i == 0) अणु                /* sigh, 0xf0 is 11 bit */
        LEBI_PUT(in);
        वापस 0;
    पूर्ण
    /* receive part */
    c = GETBITS(in, i);
    अगर (c < (1 << (i - 1)))
        c += (-1 << i) + 1;
    LEBI_PUT(in);
    वापस c;
पूर्ण

#घोषणा DEC_REC(in, hu, r, i)         (  \
  r = GETBITS(in, DECBITS),              \
  i = hu->llvals[r],                     \
  i & 128 ?                              \
    (                                    \
      UNGETBITS(in, i & 127),            \
      r = i >> 8 & 15,                   \
      i >> 16                            \
    )                                    \
  :                                      \
    (                                    \
      LEBI_PUT(in),                      \
      i = dec_rec2(in, hu, &r, r, i),    \
      LEBI_GET(in),                      \
      i                                  \
    )                                    \
)

अटल व्योम decode_mcus(काष्ठा in *in, पूर्णांक *dct, पूर्णांक n, काष्ठा scan *sc,
                        पूर्णांक *maxp)
अणु
    काष्ठा dec_hufftbl *hu;
    पूर्णांक i, r, t;
    LEBI_DCL;

    स_रखो(dct, 0, n * 64 * माप(*dct));
    LEBI_GET(in);
    जबतक (n-- > 0) अणु
        hu = sc->hudc.dhuff;
        *dct++ = (sc->dc += DEC_REC(in, hu, r, t));

        hu = sc->huac.dhuff;
        i = 63;
        जबतक (i > 0) अणु
            t = DEC_REC(in, hu, r, t);
            अगर (t == 0 && r == 0) अणु
                dct += i;
                अवरोध;
            पूर्ण
            dct += r;
            *dct++ = t;
            i -= r + 1;
        पूर्ण
        *maxp++ = 64 - i;
        अगर (n == sc->next)
            sc++;
    पूर्ण
    LEBI_PUT(in);
पूर्ण

अटल व्योम dec_makehuff(काष्ठा dec_hufftbl *hu, पूर्णांक *hufflen,
                         अचिन्हित अक्षर *huffvals)
अणु
    पूर्णांक code, k, i, j, d, x, c, v;
    क्रम (i = 0; i < (1 << DECBITS); i++)
        hu->llvals[i] = 0;

    /*
     * llvals layout:
     *
     * value v alपढ़ोy known, run r, backup u bits:
     *  vvvvvvvvvvvvvvvv 0000 rrrr 1 uuuuuuu
     * value unknown, size b bits, run r, backup u bits:
     *  000000000000bbbb 0000 rrrr 0 uuuuuuu
     * value and size unknown:
     *  0000000000000000 0000 0000 0 0000000
     */

    code = 0;
    k = 0;
    क्रम (i = 0; i < 16; i++, code <<= 1) अणु        /* sizes */
        hu->valptr[i] = k;
        क्रम (j = 0; j < hufflen[i]; j++) अणु
            hu->vals[k] = *huffvals++;
            अगर (i < DECBITS) अणु
                c = code << (DECBITS - 1 - i);
                v = hu->vals[k] & 0x0f;        /* size */
                क्रम (d = 1 << (DECBITS - 1 - i); --d >= 0;) अणु
                    अगर (v + i < DECBITS) अणु        /* both fit in table */
                        x = d >> (DECBITS - 1 - v - i);
                        अगर (v && x < (1 << (v - 1)))
                            x += (-1 << v) + 1;
                        x = x << 16 | (hu->vals[k] & 0xf0) << 4 |
                            (DECBITS - (i + 1 + v)) | 128;
                    पूर्ण अन्यथा
                        x = v << 16 | (hu->vals[k] & 0xf0) << 4 |
                            (DECBITS - (i + 1));
                    hu->llvals[c | d] = x;
                पूर्ण
            पूर्ण
            code++;
            k++;
        पूर्ण
        hu->maxcode[i] = code;
    पूर्ण
    hu->maxcode[16] = 0x20000;        /* always terminate decode */
पूर्ण

/****************************************************************/
/**************             idct                  ***************/
/****************************************************************/

#घोषणा ONE ((PREC)IFIX(1.))
#घोषणा S2  ((PREC)IFIX(0.382683432))
#घोषणा C2  ((PREC)IFIX(0.923879532))
#घोषणा C4  ((PREC)IFIX(0.707106781))

#घोषणा S22 ((PREC)IFIX(2 * 0.382683432))
#घोषणा C22 ((PREC)IFIX(2 * 0.923879532))
#घोषणा IC4 ((PREC)IFIX(1 / 0.707106781))

#घोषणा C3IC1 ((PREC)IFIX(0.847759065))        /* c3/c1 */
#घोषणा C5IC1 ((PREC)IFIX(0.566454497))        /* c5/c1 */
#घोषणा C7IC1 ((PREC)IFIX(0.198912367))        /* c7/c1 */

#घोषणा XPP(a,b) (t = a + b, b = a - b, a = t)
#घोषणा XMP(a,b) (t = a - b, b = a + b, a = t)
#घोषणा XPM(a,b) (t = a + b, b = b - a, a = t)

#घोषणा ROT(a,b,s,c) (  t = IMULT(a + b, s),      \
                        a = IMULT(a, c - s) + t,  \
                        b = IMULT(b, c + s) - t)

#घोषणा IDCT                \
(                           \
  XPP(t0, t1),              \
  XMP(t2, t3),              \
  t2 = IMULT(t2, IC4) - t3, \
  XPP(t0, t3),              \
  XPP(t1, t2),              \
  XMP(t4, t7),              \
  XPP(t5, t6),              \
  XMP(t5, t7),              \
  t5 = IMULT(t5, IC4),      \
  ROT(t4, t6, S22, C22),    \
  t6 -= t7,                 \
  t5 -= t6,                 \
  t4 -= t5,                 \
  XPP(t0, t7),              \
  XPP(t1, t6),              \
  XPP(t2, t5),              \
  XPP(t3, t4)               \
)

अटल अचिन्हित अक्षर zig2[64] = अणु
     0,  2,  3,  9, 10, 20, 21, 35,
    14, 16, 25, 31, 39, 46, 50, 57,
     5,  7, 12, 18, 23, 33, 37, 48,
    27, 29, 41, 44, 52, 55, 59, 62,
    15, 26, 30, 40, 45, 51, 56, 58,
     1,  4,  8, 11, 19, 22, 34, 36,
    28, 42, 43, 53, 54, 60, 61, 63,
     6, 13, 17, 24, 32, 38, 47, 49
पूर्ण;

अटल व्योम idct(पूर्णांक *in, पूर्णांक *out, PREC * quant, PREC off, पूर्णांक max)
अणु
    PREC t0, t1, t2, t3, t4, t5, t6, t7, t;
    PREC पंचांगp[64], *पंचांगpp;
    पूर्णांक i, j;
    अचिन्हित अक्षर *zig2p;

    t0 = off;
    अगर (max == 1) अणु
        t0 += in[0] * quant[0];
        क्रम (i = 0; i < 64; i++)
            out[i] = ITOINT(t0);
        वापस;
    पूर्ण
    zig2p = zig2;
    पंचांगpp = पंचांगp;
    क्रम (i = 0; i < 8; i++) अणु
        j = *zig2p++;
        t0 += in[j] * quant[j];
        j = *zig2p++;
        t5 = in[j] * quant[j];
        j = *zig2p++;
        t2 = in[j] * quant[j];
        j = *zig2p++;
        t7 = in[j] * quant[j];
        j = *zig2p++;
        t1 = in[j] * quant[j];
        j = *zig2p++;
        t4 = in[j] * quant[j];
        j = *zig2p++;
        t3 = in[j] * quant[j];
        j = *zig2p++;
        t6 = in[j] * quant[j];
        IDCT;
        पंचांगpp[0 * 8] = t0;
        पंचांगpp[1 * 8] = t1;
        पंचांगpp[2 * 8] = t2;
        पंचांगpp[3 * 8] = t3;
        पंचांगpp[4 * 8] = t4;
        पंचांगpp[5 * 8] = t5;
        पंचांगpp[6 * 8] = t6;
        पंचांगpp[7 * 8] = t7;
        पंचांगpp++;
        t0 = 0;
    पूर्ण
    क्रम (i = 0; i < 8; i++) अणु
        t0 = पंचांगp[8 * i + 0];
        t1 = पंचांगp[8 * i + 1];
        t2 = पंचांगp[8 * i + 2];
        t3 = पंचांगp[8 * i + 3];
        t4 = पंचांगp[8 * i + 4];
        t5 = पंचांगp[8 * i + 5];
        t6 = पंचांगp[8 * i + 6];
        t7 = पंचांगp[8 * i + 7];
        IDCT;
        out[8 * i + 0] = ITOINT(t0);
        out[8 * i + 1] = ITOINT(t1);
        out[8 * i + 2] = ITOINT(t2);
        out[8 * i + 3] = ITOINT(t3);
        out[8 * i + 4] = ITOINT(t4);
        out[8 * i + 5] = ITOINT(t5);
        out[8 * i + 6] = ITOINT(t6);
        out[8 * i + 7] = ITOINT(t7);
    पूर्ण
पूर्ण

अटल अचिन्हित अक्षर zig[64] = अणु
     0,  1,  5,  6, 14, 15, 27, 28,
     2,  4,  7, 13, 16, 26, 29, 42,
     3,  8, 12, 17, 25, 30, 41, 43,
     9, 11, 18, 24, 31, 40, 44, 53,
    10, 19, 23, 32, 39, 45, 52, 54,
    20, 22, 33, 38, 46, 51, 55, 60,
    21, 34, 37, 47, 50, 56, 59, 61,
    35, 36, 48, 49, 57, 58, 62, 63
पूर्ण;

अटल PREC aaidct[8] = अणु
    IFIX(0.3535533906), IFIX(0.4903926402),
    IFIX(0.4619397663), IFIX(0.4157348062),
    IFIX(0.3535533906), IFIX(0.2777851165),
    IFIX(0.1913417162), IFIX(0.0975451610)
पूर्ण;


अटल व्योम idctqtab(अचिन्हित अक्षर *qin, PREC * qout)
अणु
    पूर्णांक i, j;

    क्रम (i = 0; i < 8; i++)
        क्रम (j = 0; j < 8; j++)
            qout[zig[i * 8 + j]] = qin[zig[i * 8 + j]] *
                IMULT(aaidct[i], aaidct[j]);
पूर्ण

अटल व्योम scaleidctqtab(PREC * q, PREC sc)
अणु
    पूर्णांक i;

    क्रम (i = 0; i < 64; i++)
        q[i] = IMULT(q[i], sc);
पूर्ण

/****************************************************************/
/**************          color decoder            ***************/
/****************************************************************/

#घोषणा ROUND

/*
 * YCbCr Color transक्रमmation:
 *
 * y:0..255   Cb:-128..127   Cr:-128..127
 *
 *      R = Y                + 1.40200 * Cr
 *      G = Y - 0.34414 * Cb - 0.71414 * Cr
 *      B = Y + 1.77200 * Cb
 *
 * =>
 *      Cr *= 1.40200;
 *      Cb *= 1.77200;
 *      Cg = 0.19421 * Cb + .50937 * Cr;
 *      R = Y + Cr;
 *      G = Y - Cg;
 *      B = Y + Cb;
 *
 * =>
 *      Cg = (50 * Cb + 130 * Cr + 128) >> 8;
 */

अटल व्योम initcol(PREC q[][64])
अणु
    scaleidctqtab(q[1], IFIX(1.77200));
    scaleidctqtab(q[2], IFIX(1.40200));
पूर्ण

/* This is optimized क्रम the stupid sun SUNWspro compiler. */
#घोषणा STORECLAMP(a,x)                          \
(                                                \
  (a) = (x),                                     \
  (अचिन्हित पूर्णांक)(x) >= 256 ?                     \
    ((a) = (x) < 0 ? 0 : 255)                    \
  :                                              \
    0                                            \
)

#घोषणा CLAMP(x) ((अचिन्हित पूर्णांक)(x) >= 256 ? ((x) < 0 ? 0 : 255) : (x))

#अगर_घोषित ROUND

#घोषणा CBCRCG(yin, xin)                         \
(                                                \
  cb = outc[0 +yin*8+xin],                       \
  cr = outc[64+yin*8+xin],                       \
  cg = (50 * cb + 130 * cr + 128) >> 8           \
)

#अन्यथा

#घोषणा CBCRCG(yin, xin)                         \
(                                                \
  cb = outc[0 +yin*8+xin],                       \
  cr = outc[64+yin*8+xin],                       \
  cg = (3 * cb + 8 * cr) >> 4                    \
)

#पूर्ण_अगर

#अगर_घोषित __LITTLE_ENDIAN
#घोषणा PIC(yin, xin, p, xout)                   \
(                                                \
  y = outy[(yin) * 8 + xin],                     \
  STORECLAMP(p[(xout) * 3 + 2], y + cr),         \
  STORECLAMP(p[(xout) * 3 + 1], y - cg),         \
  STORECLAMP(p[(xout) * 3 + 0], y + cb)          \
)
#अन्यथा
#घोषणा PIC(yin, xin, p, xout)                   \
(                                                \
  y = outy[(yin) * 8 + xin],                     \
  STORECLAMP(p[(xout) * 3 + 0], y + cr),         \
  STORECLAMP(p[(xout) * 3 + 1], y - cg),         \
  STORECLAMP(p[(xout) * 3 + 2], y + cb)          \
)
#पूर्ण_अगर

#अगर_घोषित __LITTLE_ENDIAN
#घोषणा PIC_16(yin, xin, p, xout, add)           \
(                                                \
  y = outy[(yin) * 8 + xin],                     \
  y = ((CLAMP(y + cr + add*2+1) & 0xf8) <<  8) | \
      ((CLAMP(y - cg + add    ) & 0xfc) <<  3) | \
      ((CLAMP(y + cb + add*2+1)       ) >>  3),  \
  p[(xout) * 2 + 0] = y & 0xff,                  \
  p[(xout) * 2 + 1] = y >> 8                     \
)
#अन्यथा
#अगर_घोषित CONFIG_PPC
#घोषणा PIC_16(yin, xin, p, xout, add)           \
(                                                \
  y = outy[(yin) * 8 + xin],                     \
  y = ((CLAMP(y + cr + add*2+1) & 0xf8) <<  7) | \
      ((CLAMP(y - cg + add*2+1) & 0xf8) <<  2) | \
      ((CLAMP(y + cb + add*2+1)       ) >>  3),  \
  p[(xout) * 2 + 0] = y >> 8,                    \
  p[(xout) * 2 + 1] = y & 0xff                   \
)
#अन्यथा
#घोषणा PIC_16(yin, xin, p, xout, add)           \
(                                                \
  y = outy[(yin) * 8 + xin],                     \
  y = ((CLAMP(y + cr + add*2+1) & 0xf8) <<  8) | \
      ((CLAMP(y - cg + add    ) & 0xfc) <<  3) | \
      ((CLAMP(y + cb + add*2+1)       ) >>  3),  \
  p[(xout) * 2 + 0] = y >> 8,                    \
  p[(xout) * 2 + 1] = y & 0xff                   \
)
#पूर्ण_अगर
#पूर्ण_अगर

#घोषणा PIC_32(yin, xin, p, xout)               \
(                                               \
  y = outy[(yin) * 8 + xin],                    \
  STORECLAMP(p[(xout) * 4 + 0], y + cr),        \
  STORECLAMP(p[(xout) * 4 + 1], y - cg),        \
  STORECLAMP(p[(xout) * 4 + 2], y + cb),        \
  p[(xout) * 4 + 3] = 0                         \
)

#घोषणा PIC221111(xin)                                              \
(                                                                   \
  CBCRCG(0, xin),                                                   \
  PIC(xin / 4 * 8 + 0, (xin & 3) * 2 + 0, pic0, xin * 2 + 0),       \
  PIC(xin / 4 * 8 + 0, (xin & 3) * 2 + 1, pic0, xin * 2 + 1),       \
  PIC(xin / 4 * 8 + 1, (xin & 3) * 2 + 0, pic1, xin * 2 + 0),       \
  PIC(xin / 4 * 8 + 1, (xin & 3) * 2 + 1, pic1, xin * 2 + 1)        \
)

#घोषणा PIC221111_16(xin)                                           \
(                                                                   \
  CBCRCG(0, xin),                                                   \
  PIC_16(xin / 4 * 8 + 0, (xin & 3) * 2 + 0, pic0, xin * 2 + 0, 3), \
  PIC_16(xin / 4 * 8 + 0, (xin & 3) * 2 + 1, pic0, xin * 2 + 1, 0), \
  PIC_16(xin / 4 * 8 + 1, (xin & 3) * 2 + 0, pic1, xin * 2 + 0, 1), \
  PIC_16(xin / 4 * 8 + 1, (xin & 3) * 2 + 1, pic1, xin * 2 + 1, 2)  \
)

#घोषणा PIC221111_32(xin)                                           \
(                                                                   \
  CBCRCG(0, xin),                                                   \
  PIC_32(xin / 4 * 8 + 0, (xin & 3) * 2 + 0, pic0, xin * 2 + 0),    \
  PIC_32(xin / 4 * 8 + 0, (xin & 3) * 2 + 1, pic0, xin * 2 + 1),    \
  PIC_32(xin / 4 * 8 + 1, (xin & 3) * 2 + 0, pic1, xin * 2 + 0),    \
  PIC_32(xin / 4 * 8 + 1, (xin & 3) * 2 + 1, pic1, xin * 2 + 1)     \
)

अटल व्योम col221111(पूर्णांक *out, अचिन्हित अक्षर *pic, पूर्णांक width)
अणु
    पूर्णांक i, j, k;
    अचिन्हित अक्षर *pic0, *pic1;
    पूर्णांक *outy, *outc;
    पूर्णांक cr, cg, cb, y;

    pic0 = pic;
    pic1 = pic + width;
    outy = out;
    outc = out + 64 * 4;
    क्रम (i = 2; i > 0; i--) अणु
        क्रम (j = 4; j > 0; j--) अणु
            क्रम (k = 0; k < 8; k++) अणु
                PIC221111(k);
            पूर्ण
            outc += 8;
            outy += 16;
            pic0 += 2 * width;
            pic1 += 2 * width;
        पूर्ण
        outy += 64 * 2 - 16 * 4;
    पूर्ण
पूर्ण

अटल व्योम col221111_16(पूर्णांक *out, अचिन्हित अक्षर *pic, पूर्णांक width)
अणु
    पूर्णांक i, j, k;
    अचिन्हित अक्षर *pic0, *pic1;
    पूर्णांक *outy, *outc;
    पूर्णांक cr, cg, cb, y;

    pic0 = pic;
    pic1 = pic + width;
    outy = out;
    outc = out + 64 * 4;
    क्रम (i = 2; i > 0; i--) अणु
        क्रम (j = 4; j > 0; j--) अणु
            क्रम (k = 0; k < 8; k++) अणु
                PIC221111_16(k);
            पूर्ण
            outc += 8;
            outy += 16;
            pic0 += 2 * width;
            pic1 += 2 * width;
        पूर्ण
        outy += 64 * 2 - 16 * 4;
    पूर्ण
पूर्ण

अटल व्योम col221111_32(पूर्णांक *out, अचिन्हित अक्षर *pic, पूर्णांक width)
अणु
    पूर्णांक i, j, k;
    अचिन्हित अक्षर *pic0, *pic1;
    पूर्णांक *outy, *outc;
    पूर्णांक cr, cg, cb, y;

    pic0 = pic;
    pic1 = pic + width;
    outy = out;
    outc = out + 64 * 4;
    क्रम (i = 2; i > 0; i--) अणु
        क्रम (j = 4; j > 0; j--) अणु
            क्रम (k = 0; k < 8; k++) अणु
                PIC221111_32(k);
            पूर्ण
            outc += 8;
            outy += 16;
            pic0 += 2 * width;
            pic1 += 2 * width;
        पूर्ण
        outy += 64 * 2 - 16 * 4;
    पूर्ण
पूर्ण

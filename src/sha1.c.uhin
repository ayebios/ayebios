<शैली गुरु>
//  Support क्रम Calculation of SHA1 in SW
//
//  Copyright (C) 2006-2011 IBM Corporation
//
//  Authors:
//      Stefan Berger <stefanb@linux.vnet.ibm.com>
//
// This file may be distributed under the terms of the GNU LGPLv3 license.
//
//  See: http://www.itl.nist.gov/fipspubs/fip180-1.hपंचांग
//       RFC3174, Wikipedia's SHA1 alogrithm description
//

#समावेश "config.h"
#समावेश "byteorder.h" // cpu_to_*, __swab64
#समावेश "sha.h" // sha1
#समावेश "string.h" // स_नकल
#समावेश "x86.h" // rol

प्रकार काष्ठा _sha1_ctx अणु
    u32 h[5];
पूर्ण sha1_ctx;


अटल व्योम
sha1_block(u32 *w, sha1_ctx *ctx)
अणु
    u32 i;
    u32 a,b,c,d,e,f;
    u32 पंचांगp;
    u32 idx;

    अटल स्थिर u32 sha_ko[4] = अणु
        0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 पूर्ण;

    /* change endianness of given data */
    क्रम (i = 0; i < 16; i++)
        w[i] = be32_to_cpu(w[i]);

    क्रम (i = 16; i <= 79; i++) अणु
        पंचांगp = w[i-3] ^ w[i-8] ^ w[i-14] ^ w[i-16];
        w[i] = rol(पंचांगp,1);
    पूर्ण

    a = ctx->h[0];
    b = ctx->h[1];
    c = ctx->h[2];
    d = ctx->h[3];
    e = ctx->h[4];

    क्रम (i = 0; i <= 79; i++) अणु
        अगर (i <= 19) अणु
            f = (b & c) | ((b ^ 0xffffffff) & d);
            idx = 0;
        पूर्ण अन्यथा अगर (i <= 39) अणु
            f = b ^ c ^ d;
            idx = 1;
        पूर्ण अन्यथा अगर (i <= 59) अणु
            f = (b & c) | (b & d) | (c & d);
            idx = 2;
        पूर्ण अन्यथा अणु
            f = b ^ c ^ d;
            idx = 3;
        पूर्ण

        पंचांगp = rol(a, 5) +
              f +
              e +
              sha_ko[idx] +
              w[i];
        e = d;
        d = c;
        c = rol(b, 30);
        b = a;
        a = पंचांगp;
    पूर्ण

    ctx->h[0] += a;
    ctx->h[1] += b;
    ctx->h[2] += c;
    ctx->h[3] += d;
    ctx->h[4] += e;
पूर्ण


अटल व्योम
sha1_करो(sha1_ctx *ctx, स्थिर u8 *data32, u32 length)
अणु
    u32 offset;
    u16 num;
    u32 bits = 0;
    u32 w[80];
    u64 पंचांगp;

    /* treat data in 64-byte chunks */
    क्रम (offset = 0; length - offset >= 64; offset += 64) अणु
        स_नकल(w, data32 + offset, 64);
        sha1_block((u32 *)w, ctx);
        bits += (64 * 8);
    पूर्ण

    /* last block with less than 64 bytes */
    num = length - offset;
    bits += (num << 3);

    स_नकल(w, data32 + offset, num);
    ((u8 *)w)[num] = 0x80;
    अगर (64 - (num + 1) > 0)
        स_रखो( &((u8 *)w)[num + 1], 0x0, 64 - (num + 1));

    अगर (num >= 56) अणु
        /* cannot append number of bits here */
        sha1_block((u32 *)w, ctx);
        स_रखो(w, 0x0, 60);
    पूर्ण

    /* ग_लिखो number of bits to end of block */
    पंचांगp = __swab64(bits);
    स_नकल(&w[14], &पंचांगp, 8);

    sha1_block(w, ctx);

    /* need to चयन result's endianness */
    क्रम (num = 0; num < 5; num++)
        ctx->h[num] = cpu_to_be32(ctx->h[num]);
पूर्ण


व्योम
sha1(स्थिर u8 *data, u32 length, u8 *hash)
अणु
    अगर (!CONFIG_TCGBIOS)
        वापस;

    sha1_ctx ctx = अणु
        .h[0] = 0x67452301,
        .h[1] = 0xefcdab89,
        .h[2] = 0x98badcfe,
        .h[3] = 0x10325476,
        .h[4] = 0xc3d2e1f0,
    पूर्ण;

    sha1_करो(&ctx, data, length);
    स_नकल(hash, &ctx.h[0], 20);

    वापस;
पूर्ण

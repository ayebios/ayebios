<शैली गुरु>
// 16bit code to handle प्रणाली घड़ीs.
//
// Copyright (C) 2008-2010  Kevin O'Connor <kevin@koconnor.net>
// Copyright (C) 2002  MandrakeSoft S.A.
//
// This file may be distributed under the terms of the GNU LGPLv3 license.

#समावेश "biosvar.h" // SET_BDA
#समावेश "bregs.h" // काष्ठा bregs
#समावेश "hw/pic.h" // pic_eoi1
#समावेश "hw/ps2port.h" // ps2_check_event
#समावेश "hw/rtc.h" // rtc_पढ़ो
#समावेश "hw/usb-hid.h" // usb_check_event
#समावेश "output.h" // debug_enter
#समावेश "stacks.h" // yield
#समावेश "string.h" // स_रखो
#समावेश "util.h" // घड़ी_setup


/****************************************************************
 * Init
 ****************************************************************/

अटल u32
bcd2bin(u8 val)
अणु
    वापस (val & 0xf) + ((val >> 4) * 10);
पूर्ण

u8 Century VARLOW;

व्योम
घड़ी_setup(व्योम)
अणु
    dम_लिखो(3, "init timer\n");
    pit_setup();

    rtc_setup();
    rtc_updating();
    u32 seconds = bcd2bin(rtc_पढ़ो(CMOS_RTC_SECONDS));
    u32 minutes = bcd2bin(rtc_पढ़ो(CMOS_RTC_MINUTES));
    u32 hours = bcd2bin(rtc_पढ़ो(CMOS_RTC_HOURS));
    u32 ticks = ticks_from_ms(((hours * 60 + minutes) * 60 + seconds) * 1000);
    SET_BDA(समयr_counter, ticks % TICKS_PER_DAY);

    // Setup Century storage
    अगर (CONFIG_QEMU) अणु
        Century = rtc_पढ़ो(CMOS_CENTURY);
    पूर्ण अन्यथा अणु
        // Infer current century from the year.
        u8 year = rtc_पढ़ो(CMOS_RTC_YEAR);
        अगर (year > 0x80)
            Century = 0x19;
        अन्यथा
            Century = 0x20;
    पूर्ण

    enable_hwirq(0, FUNC16(entry_08));
    अगर (CONFIG_RTC_TIMER)
        enable_hwirq(8, FUNC16(entry_70));
पूर्ण


/****************************************************************
 * Standard घड़ी functions
 ****************************************************************/

// get current घड़ी count
अटल व्योम
handle_1a00(काष्ठा bregs *regs)
अणु
    yield();
    u32 ticks = GET_BDA(समयr_counter);
    regs->cx = ticks >> 16;
    regs->dx = ticks;
    regs->al = GET_BDA(समयr_rollover);
    SET_BDA(समयr_rollover, 0); // reset flag
    set_success(regs);
पूर्ण

// Set Current Clock Count
अटल व्योम
handle_1a01(काष्ठा bregs *regs)
अणु
    u32 ticks = (regs->cx << 16) | regs->dx;
    SET_BDA(समयr_counter, ticks);
    SET_BDA(समयr_rollover, 0); // reset flag
    // XXX - should use set_code_success()?
    regs->ah = 0;
    set_success(regs);
पूर्ण

// Read CMOS Time
अटल व्योम
handle_1a02(काष्ठा bregs *regs)
अणु
    अगर (rtc_updating()) अणु
        set_invalid(regs);
        वापस;
    पूर्ण

    regs->dh = rtc_पढ़ो(CMOS_RTC_SECONDS);
    regs->cl = rtc_पढ़ो(CMOS_RTC_MINUTES);
    regs->ch = rtc_पढ़ो(CMOS_RTC_HOURS);
    regs->dl = rtc_पढ़ो(CMOS_STATUS_B) & RTC_B_DSE;
    regs->ah = 0;
    regs->al = regs->ch;
    set_success(regs);
पूर्ण

// Set CMOS Time
अटल व्योम
handle_1a03(काष्ठा bregs *regs)
अणु
    // Using a debugger, I notice the following masking/setting
    // of bits in Status Register B, by setting Reg B to
    // a few values and getting its value after INT 1A was called.
    //
    //        try#1       try#2       try#3
    // beक्रमe 1111 1101   0111 1101   0000 0000
    // after  0110 0010   0110 0010   0000 0010
    //
    // Bit4 in try#1 flipped in hardware (क्रमced low) due to bit7=1
    // My assumption: RegB = ((RegB & 01100000b) | 00000010b)
    अगर (rtc_updating()) अणु
        rtc_setup();
        // fall through as अगर an update were not in progress
    पूर्ण
    rtc_ग_लिखो(CMOS_RTC_SECONDS, regs->dh);
    rtc_ग_लिखो(CMOS_RTC_MINUTES, regs->cl);
    rtc_ग_लिखो(CMOS_RTC_HOURS, regs->ch);
    // Set Daylight Savings समय enabled bit to requested value
    u8 val8 = ((rtc_पढ़ो(CMOS_STATUS_B) & (RTC_B_PIE|RTC_B_AIE))
               | RTC_B_24HR | (regs->dl & RTC_B_DSE));
    rtc_ग_लिखो(CMOS_STATUS_B, val8);
    regs->ah = 0;
    regs->al = val8; // val last written to Reg B
    set_success(regs);
पूर्ण

// Read CMOS Date
अटल व्योम
handle_1a04(काष्ठा bregs *regs)
अणु
    regs->ah = 0;
    अगर (rtc_updating()) अणु
        set_invalid(regs);
        वापस;
    पूर्ण
    regs->cl = rtc_पढ़ो(CMOS_RTC_YEAR);
    regs->dh = rtc_पढ़ो(CMOS_RTC_MONTH);
    regs->dl = rtc_पढ़ो(CMOS_RTC_DAY_MONTH);
    regs->ch = GET_LOW(Century);
    regs->al = regs->ch;
    set_success(regs);
पूर्ण

// Set CMOS Date
अटल व्योम
handle_1a05(काष्ठा bregs *regs)
अणु
    // Using a debugger, I notice the following masking/setting
    // of bits in Status Register B, by setting Reg B to
    // a few values and getting its value after INT 1A was called.
    //
    //        try#1       try#2       try#3       try#4
    // beक्रमe 1111 1101   0111 1101   0000 0010   0000 0000
    // after  0110 1101   0111 1101   0000 0010   0000 0000
    //
    // Bit4 in try#1 flipped in hardware (क्रमced low) due to bit7=1
    // My assumption: RegB = (RegB & 01111111b)
    अगर (rtc_updating()) अणु
        rtc_setup();
        set_invalid(regs);
        वापस;
    पूर्ण
    rtc_ग_लिखो(CMOS_RTC_YEAR, regs->cl);
    rtc_ग_लिखो(CMOS_RTC_MONTH, regs->dh);
    rtc_ग_लिखो(CMOS_RTC_DAY_MONTH, regs->dl);
    SET_LOW(Century, regs->ch);
    // clear halt-घड़ी bit
    u8 val8 = rtc_पढ़ो(CMOS_STATUS_B) & ~RTC_B_SET;
    rtc_ग_लिखो(CMOS_STATUS_B, val8);
    regs->ah = 0;
    regs->al = val8; // AL = val last written to Reg B
    set_success(regs);
पूर्ण

// Set Alarm Time in CMOS
अटल व्योम
handle_1a06(काष्ठा bregs *regs)
अणु
    // Using a debugger, I notice the following masking/setting
    // of bits in Status Register B, by setting Reg B to
    // a few values and getting its value after INT 1A was called.
    //
    //        try#1       try#2       try#3
    // beक्रमe 1101 1111   0101 1111   0000 0000
    // after  0110 1111   0111 1111   0010 0000
    //
    // Bit4 in try#1 flipped in hardware (क्रमced low) due to bit7=1
    // My assumption: RegB = ((RegB & 01111111b) | 00100000b)
    u8 val8 = rtc_पढ़ो(CMOS_STATUS_B); // Get Status Reg B
    regs->ax = 0;
    अगर (val8 & RTC_B_AIE) अणु
        // Alarm पूर्णांकerrupt enabled alपढ़ोy
        set_invalid(regs);
        वापस;
    पूर्ण
    अगर (rtc_updating()) अणु
        rtc_setup();
        // fall through as अगर an update were not in progress
    पूर्ण
    rtc_ग_लिखो(CMOS_RTC_SECONDS_ALARM, regs->dh);
    rtc_ग_लिखो(CMOS_RTC_MINUTES_ALARM, regs->cl);
    rtc_ग_लिखो(CMOS_RTC_HOURS_ALARM, regs->ch);
    // enable Status Reg B alarm bit, clear halt घड़ी bit
    rtc_ग_लिखो(CMOS_STATUS_B, (val8 & ~RTC_B_SET) | RTC_B_AIE);
    set_success(regs);
पूर्ण

// Turn off Alarm
अटल व्योम
handle_1a07(काष्ठा bregs *regs)
अणु
    // Using a debugger, I notice the following masking/setting
    // of bits in Status Register B, by setting Reg B to
    // a few values and getting its value after INT 1A was called.
    //
    //        try#1       try#2       try#3       try#4
    // beक्रमe 1111 1101   0111 1101   0010 0000   0010 0010
    // after  0100 0101   0101 0101   0000 0000   0000 0010
    //
    // Bit4 in try#1 flipped in hardware (क्रमced low) due to bit7=1
    // My assumption: RegB = (RegB & 01010111b)
    u8 val8 = rtc_पढ़ो(CMOS_STATUS_B); // Get Status Reg B
    // clear घड़ी-halt bit, disable alarm bit
    rtc_ग_लिखो(CMOS_STATUS_B, val8 & ~(RTC_B_SET|RTC_B_AIE));
    regs->ah = 0;
    regs->al = val8; // val last written to Reg B
    set_success(regs);
पूर्ण

अटल व्योम
handle_1abb(काष्ठा bregs *regs)
अणु
    अगर (!CONFIG_TCGBIOS)
        वापस;

    dम_लिखो(DEBUG_tcg, "16: Calling tpm_interrupt_handler\n");
    call32(tpm_पूर्णांकerrupt_handler32, MAKE_FLATPTR(GET_SEG(SS), regs), 0);
पूर्ण

// Unsupported
अटल व्योम
handle_1aXX(काष्ठा bregs *regs)
अणु
    set_unimplemented(regs);
पूर्ण

// INT 1Ah Time-of-day Service Entry Poपूर्णांक
व्योम VISIBLE16
handle_1a(काष्ठा bregs *regs)
अणु
    debug_enter(regs, DEBUG_HDL_1a);
    चयन (regs->ah) अणु
    हाल 0x00: handle_1a00(regs); अवरोध;
    हाल 0x01: handle_1a01(regs); अवरोध;
    हाल 0x02: handle_1a02(regs); अवरोध;
    हाल 0x03: handle_1a03(regs); अवरोध;
    हाल 0x04: handle_1a04(regs); अवरोध;
    हाल 0x05: handle_1a05(regs); अवरोध;
    हाल 0x06: handle_1a06(regs); अवरोध;
    हाल 0x07: handle_1a07(regs); अवरोध;
    हाल 0xbb: handle_1abb(regs); अवरोध;
    शेष:   handle_1aXX(regs); अवरोध;
    पूर्ण
पूर्ण

// Update मुख्य tick counter
अटल व्योम
घड़ी_update(व्योम)
अणु
    u32 counter = GET_BDA(समयr_counter);
    counter++;
    // compare to one days worth of समयr ticks at 18.2 hz
    अगर (counter >= TICKS_PER_DAY) अणु
        // there has been a midnight rollover at this poपूर्णांक
        counter = 0;
        SET_BDA(समयr_rollover, GET_BDA(समयr_rollover) + 1);
    पूर्ण
    SET_BDA(समयr_counter, counter);

    // Check क्रम पूर्णांकernal events.
    floppy_tick();
    usb_check_event();
    ps2_check_event();
    sercon_check_event();
पूर्ण

// INT 08h System Timer ISR Entry Poपूर्णांक
व्योम VISIBLE16
handle_08(व्योम)
अणु
    debug_isr(DEBUG_ISR_08);
    घड़ी_update();

    // chain to user समयr tick INT #0x1c
    काष्ठा bregs br;
    स_रखो(&br, 0, माप(br));
    br.flags = F_IF;
    call16_पूर्णांक(0x1c, &br);

    pic_eoi1();
पूर्ण

u32 last_समयr_check VARLOW;

// Simulate समयr irq on machines without hardware irqs
व्योम
घड़ी_poll_irq(व्योम)
अणु
    अगर (CONFIG_HARDWARE_IRQ)
        वापस;
    अगर (!समयr_check(GET_LOW(last_समयr_check)))
        वापस;
    SET_LOW(last_समयr_check, समयr_calc(ticks_to_ms(1)));
    घड़ी_update();
पूर्ण


/****************************************************************
 * IRQ based समयr
 ****************************************************************/

// Calculate the समयr value at 'count' number of full समयr ticks in
// the future.
u32
irqसमयr_calc_ticks(u32 count)
अणु
    वापस (GET_BDA(समयr_counter) + count + 1) % TICKS_PER_DAY;
पूर्ण

// Return the समयr value that is 'msecs' समय in the future.
u32
irqसमयr_calc(u32 msecs)
अणु
    अगर (!msecs)
        वापस GET_BDA(समयr_counter);
    वापस irqसमयr_calc_ticks(ticks_from_ms(msecs));
पूर्ण

// Check अगर the given समयr value has passed.
पूर्णांक
irqसमयr_check(u32 end)
अणु
    वापस (((GET_BDA(समयr_counter) + TICKS_PER_DAY - end) % TICKS_PER_DAY)
            < (TICKS_PER_DAY/2));
पूर्ण


/****************************************************************
 * Periodic समयr
 ****************************************************************/

अटल पूर्णांक
set_userसमयr(u32 usecs, u16 seg, u16 offset)
अणु
    अगर (GET_BDA(rtc_रुको_flag) & RWS_WAIT_PENDING)
        वापस -1;

    // Interval not alपढ़ोy set.
    SET_BDA(rtc_रुको_flag, RWS_WAIT_PENDING);  // Set status byte.
    SET_BDA(user_रुको_complete_flag, SEGOFF(seg, offset));
    SET_BDA(user_रुको_समयout, usecs);
    rtc_use();
    वापस 0;
पूर्ण

अटल व्योम
clear_userसमयr(व्योम)
अणु
    अगर (!(GET_BDA(rtc_रुको_flag) & RWS_WAIT_PENDING))
        वापस;
    // Turn off status byte.
    SET_BDA(rtc_रुको_flag, 0);
    rtc_release();
पूर्ण

#घोषणा RET_ECLOCKINUSE  0x83

// Wait क्रम CX:DX microseconds
व्योम
handle_1586(काष्ठा bregs *regs)
अणु
    अगर (!CONFIG_RTC_TIMER) अणु
        set_code_unimplemented(regs, RET_EUNSUPPORTED);
        वापस;
    पूर्ण
    // Use the rtc to रुको क्रम the specअगरied समय.
    u8 statusflag = 0;
    u32 count = (regs->cx << 16) | regs->dx;
    पूर्णांक ret = set_userसमयr(count, GET_SEG(SS), (u32)&statusflag);
    अगर (ret) अणु
        set_code_invalid(regs, RET_ECLOCKINUSE);
        वापस;
    पूर्ण
    जबतक (!statusflag)
        yield_toirq();
    set_success(regs);
पूर्ण

// Set Interval requested.
अटल व्योम
handle_158300(काष्ठा bregs *regs)
अणु
    पूर्णांक ret = set_userसमयr((regs->cx << 16) | regs->dx, regs->es, regs->bx);
    अगर (ret)
        // Interval alपढ़ोy set.
        set_code_invalid(regs, RET_EUNSUPPORTED);
    अन्यथा
        set_success(regs);
पूर्ण

// Clear पूर्णांकerval requested
अटल व्योम
handle_158301(काष्ठा bregs *regs)
अणु
    clear_userसमयr();
    set_success(regs);
पूर्ण

अटल व्योम
handle_1583XX(काष्ठा bregs *regs)
अणु
    set_code_unimplemented(regs, RET_EUNSUPPORTED);
    regs->al--;
पूर्ण

व्योम
handle_1583(काष्ठा bregs *regs)
अणु
    अगर (!CONFIG_RTC_TIMER) अणु
        handle_1583XX(regs);
        वापस;
    पूर्ण
    चयन (regs->al) अणु
    हाल 0x00: handle_158300(regs); अवरोध;
    हाल 0x01: handle_158301(regs); अवरोध;
    शेष:   handle_1583XX(regs); अवरोध;
    पूर्ण
पूर्ण

#घोषणा USEC_PER_RTC DIV_ROUND_CLOSEST(1000000, 1024)

// पूर्णांक70h: IRQ8 - CMOS RTC
व्योम VISIBLE16
handle_70(व्योम)
अणु
    अगर (!CONFIG_RTC_TIMER)
        वापस;
    debug_isr(DEBUG_ISR_70);

    // Check which modes are enabled and have occurred.
    u8 रेजिस्टरB = rtc_पढ़ो(CMOS_STATUS_B);
    u8 रेजिस्टरC = rtc_पढ़ो(CMOS_STATUS_C);

    अगर (!(रेजिस्टरB & (RTC_B_PIE|RTC_B_AIE)))
        जाओ करोne;
    अगर (रेजिस्टरC & RTC_B_AIE) अणु
        // Handle Alarm Interrupt.
        काष्ठा bregs br;
        स_रखो(&br, 0, माप(br));
        br.flags = F_IF;
        call16_पूर्णांक(0x4a, &br);
    पूर्ण
    अगर (!(रेजिस्टरC & RTC_B_PIE))
        जाओ करोne;

    // Handle Periodic Interrupt.

    check_preempt();

    अगर (!GET_BDA(rtc_रुको_flag))
        जाओ करोne;

    // Wait Interval (Int 15, AH=83) active.
    u32 समय = GET_BDA(user_रुको_समयout);  // Time left in microseconds.
    अगर (समय < USEC_PER_RTC) अणु
        // Done रुकोing - ग_लिखो to specअगरied flag byte.
        काष्ठा segoff_s segoff = GET_BDA(user_रुको_complete_flag);
        u16 ptr_seg = segoff.seg;
        u8 *ptr_far = (u8*)(segoff.offset+0);
        u8 oldval = GET_FARVAR(ptr_seg, *ptr_far);
        SET_FARVAR(ptr_seg, *ptr_far, oldval | 0x80);

        clear_userसमयr();
    पूर्ण अन्यथा अणु
        // Continue रुकोing.
        समय -= USEC_PER_RTC;
        SET_BDA(user_रुको_समयout, समय);
    पूर्ण

करोne:
    pic_eoi2();
पूर्ण

<शैली गुरु>
/* A Bison parser, made by GNU Bison 2.5.  */

/* Bison implementation क्रम Yacc-like parsers in C
   
      Copyright (C) 1984, 1989-1990, 2000-2011 Free Software Foundation, Inc.
   
   This program is मुक्त software: you can redistribute it and/or modअगरy
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License क्रम more details.
   
   You should have received a copy of the GNU General Public License
   aदीर्घ with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so दीर्घ as that work isn't itself a
   parser generator using the skeleton or a modअगरied version thereof
   as a parser skeleton.  Alternatively, अगर you modअगरy or redistribute
   the parser skeleton itself, you may (at your option) हटाओ this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Riअक्षरd Stallman, by
   simplअगरying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to aव्योम
   infringing on user name space.  This should be करोne even क्रम local
   variables, as they might otherwise be expanded by user macros.
   There are some unaव्योमable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identअगरy Bison output.  */
#घोषणा YYBISON 1

/* Bison version.  */
#घोषणा YYBISON_VERSION "2.5"

/* Skeleton name.  */
#घोषणा YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#घोषणा YYPURE 0

/* Push parsers.  */
#घोषणा YYPUSH 0

/* Pull parsers.  */
#घोषणा YYPULL 1

/* Using locations.  */
#घोषणा YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#घोषणा yyparse         zconfparse
#घोषणा yylex           zconflex
#घोषणा yyerror         zconख_त्रुटि
#घोषणा yylval          zconflval
#घोषणा yyअक्षर          zconfअक्षर
#घोषणा yydebug         zconfdebug
#घोषणा yynerrs         zconfnerrs


/* Copy the first part of user declarations.  */


/*
 * Copyright (C) 2002 Roman Zippel <zippel@linux-m68k.org>
 * Released under the terms of the GNU GPL v2.0.
 */

#समावेश <प्रकार.स>
#समावेश <मानकतर्क.स>
#समावेश <मानकपन.स>
#समावेश <मानककोष.स>
#समावेश <माला.स>
#समावेश <stdbool.h>

#समावेश "lkc.h"

#घोषणा prपूर्णांकd(mask, fmt...) अगर (cdebug & (mask)) sम_लिखो(fmt)

#घोषणा PRINTD		0x0001
#घोषणा DEBUG_PARSE	0x0002

पूर्णांक cdebug = PRINTD;

बाह्य पूर्णांक zconflex(व्योम);
अटल व्योम zconfprपूर्णांक(स्थिर अक्षर *err, ...);
अटल व्योम zconf_error(स्थिर अक्षर *err, ...);
अटल व्योम zconख_त्रुटि(स्थिर अक्षर *err);
अटल bool zconf_endtoken(स्थिर काष्ठा kconf_id *id, पूर्णांक starttoken, पूर्णांक endtoken);

काष्ठा symbol *symbol_hash[SYMBOL_HASHSIZE];

अटल काष्ठा menu *current_menu, *current_entry;




/* Enabling traces.  */
#अगर_अघोषित YYDEBUG
# define YYDEBUG 1
#पूर्ण_अगर

/* Enabling verbose error messages.  */
#अगर_घोषित YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#अन्यथा
# define YYERROR_VERBOSE 0
#पूर्ण_अगर

/* Enabling the token table.  */
#अगर_अघोषित YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#पूर्ण_अगर


/* Tokens.  */
#अगर_अघोषित YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens पूर्णांकo the symbol table, so that GDB and other debuggers
      know about them.  */
   क्रमागत yytokentype अणु
     T_MAINMENU = 258,
     T_MENU = 259,
     T_ENDMENU = 260,
     T_SOURCE = 261,
     T_CHOICE = 262,
     T_ENDCHOICE = 263,
     T_COMMENT = 264,
     T_CONFIG = 265,
     T_MENUCONFIG = 266,
     T_HELP = 267,
     T_HELPTEXT = 268,
     T_IF = 269,
     T_ENDIF = 270,
     T_DEPENDS = 271,
     T_OPTIONAL = 272,
     T_PROMPT = 273,
     T_TYPE = 274,
     T_DEFAULT = 275,
     T_SELECT = 276,
     T_RANGE = 277,
     T_VISIBLE = 278,
     T_OPTION = 279,
     T_ON = 280,
     T_WORD = 281,
     T_WORD_QUOTE = 282,
     T_UNEQUAL = 283,
     T_CLOSE_PAREN = 284,
     T_OPEN_PAREN = 285,
     T_EOL = 286,
     T_OR = 287,
     T_AND = 288,
     T_EQUAL = 289,
     T_NOT = 290
   पूर्ण;
#पूर्ण_अगर



#अगर ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
प्रकार जोड़ YYSTYPE
अणु


	अक्षर *string;
	काष्ठा file *file;
	काष्ठा symbol *symbol;
	काष्ठा expr *expr;
	काष्ठा menu *menu;
	स्थिर काष्ठा kconf_id *id;



पूर्ण YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#पूर्ण_अगर


/* Copy the second part of user declarations.  */


/* Include zconf.hash.c here so it can see the token स्थिरants. */
#समावेश "zconf.hash.c"



#अगर_घोषित लघु
# undef लघु
#पूर्ण_अगर

#अगर_घोषित YYTYPE_UINT8
प्रकार YYTYPE_UINT8 yytype_uपूर्णांक8;
#अन्यथा
प्रकार अचिन्हित अक्षर yytype_uपूर्णांक8;
#पूर्ण_अगर

#अगर_घोषित YYTYPE_INT8
प्रकार YYTYPE_INT8 yytype_पूर्णांक8;
#या_अगर (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
प्रकार चिन्हित अक्षर yytype_पूर्णांक8;
#अन्यथा
प्रकार लघु पूर्णांक yytype_पूर्णांक8;
#पूर्ण_अगर

#अगर_घोषित YYTYPE_UINT16
प्रकार YYTYPE_UINT16 yytype_uपूर्णांक16;
#अन्यथा
प्रकार अचिन्हित लघु पूर्णांक yytype_uपूर्णांक16;
#पूर्ण_अगर

#अगर_घोषित YYTYPE_INT16
प्रकार YYTYPE_INT16 yytype_पूर्णांक16;
#अन्यथा
प्रकार लघु पूर्णांक yytype_पूर्णांक16;
#पूर्ण_अगर

#अगर_अघोषित YYSIZE_T
# अगरdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elअगर defined माप_प्रकार
#  define YYSIZE_T माप_प्रकार
# elअगर ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <मानकघोष.स> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T माप_प्रकार
# अन्यथा
#  define YYSIZE_T अचिन्हित पूर्णांक
# endअगर
#पूर्ण_अगर

#घोषणा YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#अगर_अघोषित YY_
# अगर defined YYENABLE_NLS && YYENABLE_NLS
#  अगर ENABLE_NLS
#   include <libपूर्णांकl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endअगर
# endअगर
# अगरndef YY_
#  define YY_(msgid) msgid
# endअगर
#पूर्ण_अगर

/* Suppress unused-variable warnings by "using" E.  */
#अगर ! defined lपूर्णांक || defined __GNUC__
# define YYUSE(e) ((व्योम) (e))
#अन्यथा
# define YYUSE(e) /* empty */
#पूर्ण_अगर

/* Identity function, used to suppress warnings about स्थिरant conditions.  */
#अगर_अघोषित lपूर्णांक
# define YYID(n) (n)
#अन्यथा
#अगर (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
अटल पूर्णांक
YYID (पूर्णांक yyi)
#अन्यथा
अटल पूर्णांक
YYID (yyi)
    पूर्णांक yyi;
#पूर्ण_अगर
अणु
  वापस yyi;
पूर्ण
#पूर्ण_अगर

#अगर ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or दो_स्मृति; define the necessary symbols.  */

# अगरdef YYSTACK_USE_ALLOCA
#  अगर YYSTACK_USE_ALLOCA
#   अगरdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elअगर defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elअगर defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elअगर defined _MSC_VER
#    include <दो_स्मृति.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   अन्यथा
#    define YYSTACK_ALLOC alloca
#    अगर ! defined _ALLOCA_H && ! defined निकास_सफल && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <मानककोष.स> /* INFRINGES ON USER NAME SPACE */
#     अगरndef निकास_सफल
#      define निकास_सफल 0
#     endअगर
#    endअगर
#   endअगर
#  endअगर
# endअगर

# अगरdef YYSTACK_ALLOC
   /* Pacअगरy GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) करो अणु /* empty */; पूर्ण जबतक (YYID (0))
#  अगरndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) अगर N exceeds 4096.  Use a slightly smaller number
       to allow क्रम a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endअगर
# अन्यथा
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  अगरndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endअगर
#  अगर (defined __cplusplus && ! defined निकास_सफल \
       && ! ((defined YYMALLOC || defined दो_स्मृति) \
	     && (defined YYFREE || defined मुक्त)))
#   include <मानककोष.स> /* INFRINGES ON USER NAME SPACE */
#   अगरndef निकास_सफल
#    define निकास_सफल 0
#   endअगर
#  endअगर
#  अगरndef YYMALLOC
#   define YYMALLOC दो_स्मृति
#   अगर ! defined दो_स्मृति && ! defined निकास_सफल && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
व्योम *दो_स्मृति (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endअगर
#  endअगर
#  अगरndef YYFREE
#   define YYFREE मुक्त
#   अगर ! defined मुक्त && ! defined निकास_सफल && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
व्योम मुक्त (व्योम *); /* INFRINGES ON USER NAME SPACE */
#   endअगर
#  endअगर
# endअगर
#पूर्ण_अगर /* ! defined yyoverflow || YYERROR_VERBOSE */


#अगर (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned क्रम any stack member.  */
जोड़ yyalloc
अणु
  yytype_पूर्णांक16 yyss_alloc;
  YYSTYPE yyvs_alloc;
पूर्ण;

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (माप (जोड़ yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (माप (yytype_पूर्णांक16) + माप (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location क्रम the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    करो									\
      अणु									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * माप (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / माप (*yyptr);				\
      पूर्ण									\
    जबतक (YYID (0))

#पूर्ण_अगर

#अगर defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from FROM to TO.  The source and destination करो
   not overlap.  */
# अगरndef YYCOPY
#  अगर defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_स_नकल (To, From, (Count) * माप (*(From)))
#  अन्यथा
#   define YYCOPY(To, From, Count)		\
      करो					\
	अणु					\
	  YYSIZE_T yyi;				\
	  क्रम (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	पूर्ण					\
      जबतक (YYID (0))
#  endअगर
# endअगर
#पूर्ण_अगर /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#घोषणा YYFINAL  11
/* YYLAST -- Last index in YYTABLE.  */
#घोषणा YYLAST   290

/* YYNTOKENS -- Number of terminals.  */
#घोषणा YYNTOKENS  36
/* YYNNTS -- Number of nonterminals.  */
#घोषणा YYNNTS  50
/* YYNRULES -- Number of rules.  */
#घोषणा YYNRULES  118
/* YYNRULES -- Number of states.  */
#घोषणा YYNSTATES  191

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#घोषणा YYUNDEFTOK  2
#घोषणा YYMAXUTOK   290

#घोषणा YYTRANSLATE(YYX)						\
  ((अचिन्हित पूर्णांक) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
अटल स्थिर yytype_uपूर्णांक8 yytranslate[] =
अणु
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35
पूर्ण;

#अगर YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
अटल स्थिर yytype_uपूर्णांक16 yyprhs[] =
अणु
       0,     0,     3,     6,     8,    11,    13,    14,    17,    20,
      23,    26,    31,    36,    40,    42,    44,    46,    48,    50,
      52,    54,    56,    58,    60,    62,    64,    66,    68,    72,
      75,    79,    82,    86,    89,    90,    93,    96,    99,   102,
     105,   108,   112,   117,   122,   127,   133,   137,   138,   142,
     143,   146,   150,   153,   155,   159,   160,   163,   166,   169,
     172,   175,   180,   184,   187,   192,   193,   196,   200,   202,
     206,   207,   210,   213,   216,   220,   224,   228,   230,   234,
     235,   238,   241,   244,   248,   252,   255,   258,   261,   262,
     265,   268,   271,   276,   277,   280,   283,   286,   287,   290,
     292,   294,   297,   300,   303,   305,   308,   309,   312,   314,
     318,   322,   326,   329,   333,   337,   339,   341,   342
पूर्ण;

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
अटल स्थिर yytype_पूर्णांक8 yyrhs[] =
अणु
      37,     0,    -1,    81,    38,    -1,    38,    -1,    63,    39,
      -1,    39,    -1,    -1,    39,    41,    -1,    39,    55,    -1,
      39,    67,    -1,    39,    80,    -1,    39,    26,     1,    31,
      -1,    39,    40,     1,    31,    -1,    39,     1,    31,    -1,
      16,    -1,    18,    -1,    19,    -1,    21,    -1,    17,    -1,
      22,    -1,    20,    -1,    23,    -1,    31,    -1,    61,    -1,
      71,    -1,    44,    -1,    46,    -1,    69,    -1,    26,     1,
      31,    -1,     1,    31,    -1,    10,    26,    31,    -1,    43,
      47,    -1,    11,    26,    31,    -1,    45,    47,    -1,    -1,
      47,    48,    -1,    47,    49,    -1,    47,    75,    -1,    47,
      73,    -1,    47,    42,    -1,    47,    31,    -1,    19,    78,
      31,    -1,    18,    79,    82,    31,    -1,    20,    83,    82,
      31,    -1,    21,    26,    82,    31,    -1,    22,    84,    84,
      82,    31,    -1,    24,    50,    31,    -1,    -1,    50,    26,
      51,    -1,    -1,    34,    79,    -1,     7,    85,    31,    -1,
      52,    56,    -1,    80,    -1,    53,    58,    54,    -1,    -1,
      56,    57,    -1,    56,    75,    -1,    56,    73,    -1,    56,
      31,    -1,    56,    42,    -1,    18,    79,    82,    31,    -1,
      19,    78,    31,    -1,    17,    31,    -1,    20,    26,    82,
      31,    -1,    -1,    58,    41,    -1,    14,    83,    81,    -1,
      80,    -1,    59,    62,    60,    -1,    -1,    62,    41,    -1,
      62,    67,    -1,    62,    55,    -1,     3,    79,    81,    -1,
       4,    79,    31,    -1,    64,    76,    74,    -1,    80,    -1,
      65,    68,    66,    -1,    -1,    68,    41,    -1,    68,    67,
      -1,    68,    55,    -1,     6,    79,    31,    -1,     9,    79,
      31,    -1,    70,    74,    -1,    12,    31,    -1,    72,    13,
      -1,    -1,    74,    75,    -1,    74,    31,    -1,    74,    42,
      -1,    16,    25,    83,    31,    -1,    -1,    76,    77,    -1,
      76,    31,    -1,    23,    82,    -1,    -1,    79,    82,    -1,
      26,    -1,    27,    -1,     5,    31,    -1,     8,    31,    -1,
      15,    31,    -1,    31,    -1,    81,    31,    -1,    -1,    14,
      83,    -1,    84,    -1,    84,    34,    84,    -1,    84,    28,
      84,    -1,    30,    83,    29,    -1,    35,    83,    -1,    83,
      32,    83,    -1,    83,    33,    83,    -1,    26,    -1,    27,
      -1,    -1,    26,    -1
पूर्ण;

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
अटल स्थिर yytype_uपूर्णांक16 yyrline[] =
अणु
       0,   103,   103,   103,   105,   105,   107,   109,   110,   111,
     112,   113,   114,   118,   122,   122,   122,   122,   122,   122,
     122,   122,   126,   127,   128,   129,   130,   131,   135,   136,
     142,   150,   156,   164,   174,   176,   177,   178,   179,   180,
     181,   184,   192,   198,   208,   214,   220,   223,   225,   236,
     237,   242,   251,   256,   264,   267,   269,   270,   271,   272,
     273,   276,   282,   293,   299,   309,   311,   316,   324,   332,
     335,   337,   338,   339,   344,   351,   358,   363,   371,   374,
     376,   377,   378,   381,   389,   396,   403,   409,   416,   418,
     419,   420,   423,   431,   433,   434,   437,   444,   446,   451,
     452,   455,   456,   457,   461,   462,   465,   466,   469,   470,
     471,   472,   473,   474,   475,   478,   479,   482,   483
पूर्ण;
#पूर्ण_अगर

#अगर YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
अटल स्थिर अक्षर *स्थिर yytname[] =
अणु
  "$end", "error", "$undefined", "T_MAINMENU", "T_MENU", "T_ENDMENU",
  "T_SOURCE", "T_CHOICE", "T_ENDCHOICE", "T_COMMENT", "T_CONFIG",
  "T_MENUCONFIG", "T_HELP", "T_HELPTEXT", "T_IF", "T_ENDIF", "T_DEPENDS",
  "T_OPTIONAL", "T_PROMPT", "T_TYPE", "T_DEFAULT", "T_SELECT", "T_RANGE",
  "T_VISIBLE", "T_OPTION", "T_ON", "T_WORD", "T_WORD_QUOTE", "T_UNEQUAL",
  "T_CLOSE_PAREN", "T_OPEN_PAREN", "T_EOL", "T_OR", "T_AND", "T_EQUAL",
  "T_NOT", "$accept", "input", "start", "stmt_list", "option_name",
  "common_stmt", "option_error", "config_entry_start", "config_stmt",
  "menuconfig_entry_start", "menuconfig_stmt", "config_option_list",
  "config_option", "symbol_option", "symbol_option_list",
  "symbol_option_arg", "choice", "choice_entry", "choice_end",
  "choice_stmt", "choice_option_list", "choice_option", "choice_block",
  "if_entry", "if_end", "if_stmt", "if_block", "mainmenu_stmt", "menu",
  "menu_entry", "menu_end", "menu_stmt", "menu_block", "source_stmt",
  "comment", "comment_stmt", "help_start", "help", "depends_list",
  "depends", "visibility_list", "visible", "prompt_stmt_opt", "prompt",
  "end", "nl", "if_expr", "expr", "symbol", "word_opt", 0
पूर्ण;
#पूर्ण_अगर

# अगरdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
अटल स्थिर yytype_uपूर्णांक16 yytoknum[] =
अणु
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290
पूर्ण;
# endअगर

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
अटल स्थिर yytype_uपूर्णांक8 yyr1[] =
अणु
       0,    36,    37,    37,    38,    38,    39,    39,    39,    39,
      39,    39,    39,    39,    40,    40,    40,    40,    40,    40,
      40,    40,    41,    41,    41,    41,    41,    41,    42,    42,
      43,    44,    45,    46,    47,    47,    47,    47,    47,    47,
      47,    48,    48,    48,    48,    48,    49,    50,    50,    51,
      51,    52,    53,    54,    55,    56,    56,    56,    56,    56,
      56,    57,    57,    57,    57,    58,    58,    59,    60,    61,
      62,    62,    62,    62,    63,    64,    65,    66,    67,    68,
      68,    68,    68,    69,    70,    71,    72,    73,    74,    74,
      74,    74,    75,    76,    76,    76,    77,    78,    78,    79,
      79,    80,    80,    80,    81,    81,    82,    82,    83,    83,
      83,    83,    83,    83,    83,    84,    84,    85,    85
पूर्ण;

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
अटल स्थिर yytype_uपूर्णांक8 yyr2[] =
अणु
       0,     2,     2,     1,     2,     1,     0,     2,     2,     2,
       2,     4,     4,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     2,
       3,     2,     3,     2,     0,     2,     2,     2,     2,     2,
       2,     3,     4,     4,     4,     5,     3,     0,     3,     0,
       2,     3,     2,     1,     3,     0,     2,     2,     2,     2,
       2,     4,     3,     2,     4,     0,     2,     3,     1,     3,
       0,     2,     2,     2,     3,     3,     3,     1,     3,     0,
       2,     2,     2,     3,     3,     2,     2,     2,     0,     2,
       2,     2,     4,     0,     2,     2,     2,     0,     2,     1,
       1,     2,     2,     2,     1,     2,     0,     2,     1,     3,
       3,     3,     2,     3,     3,     1,     1,     0,     1
पूर्ण;

/* YYDEFACT[STATE-NAME] -- Default reduction number in state STATE-NUM.
   Perक्रमmed when YYTABLE करोesn't specअगरy something अन्यथा to करो.  Zero
   means the शेष is an error.  */
अटल स्थिर yytype_uपूर्णांक8 yydefact[] =
अणु
       6,     0,   104,     0,     3,     0,     6,     6,    99,   100,
       0,     1,     0,     0,     0,     0,   117,     0,     0,     0,
       0,     0,     0,    14,    18,    15,    16,    20,    17,    19,
      21,     0,    22,     0,     7,    34,    25,    34,    26,    55,
      65,     8,    70,    23,    93,    79,     9,    27,    88,    24,
      10,     0,   105,     2,    74,    13,     0,   101,     0,   118,
       0,   102,     0,     0,     0,   115,   116,     0,     0,     0,
     108,   103,     0,     0,     0,     0,     0,     0,     0,    88,
       0,     0,    75,    83,    51,    84,    30,    32,     0,   112,
       0,     0,    67,     0,     0,    11,    12,     0,     0,     0,
       0,    97,     0,     0,     0,    47,     0,    40,    39,    35,
      36,     0,    38,    37,     0,     0,    97,     0,    59,    60,
      56,    58,    57,    66,    54,    53,    71,    73,    69,    72,
      68,   106,    95,     0,    94,    80,    82,    78,    81,    77,
      90,    91,    89,   111,   113,   114,   110,   109,    29,    86,
       0,   106,     0,   106,   106,   106,     0,     0,     0,    87,
      63,   106,     0,   106,     0,    96,     0,     0,    41,    98,
       0,     0,   106,    49,    46,    28,     0,    62,     0,   107,
      92,    42,    43,    44,     0,     0,    48,    61,    64,    45,
      50
पूर्ण;

/* YYDEFGOTO[NTERM-NUM].  */
अटल स्थिर yytype_पूर्णांक16 yydefजाओ[] =
अणु
      -1,     3,     4,     5,    33,    34,   108,    35,    36,    37,
      38,    74,   109,   110,   157,   186,    39,    40,   124,    41,
      76,   120,    77,    42,   128,    43,    78,     6,    44,    45,
     137,    46,    80,    47,    48,    49,   111,   112,    81,   113,
      79,   134,   152,   153,    50,     7,   165,    69,    70,    60
पूर्ण;

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#घोषणा YYPACT_NINF -90
अटल स्थिर yytype_पूर्णांक16 yypact[] =
अणु
       4,    42,   -90,    96,   -90,   111,   -90,    15,   -90,   -90,
      75,   -90,    82,    42,   104,    42,   110,   107,    42,   115,
     125,    -4,   121,   -90,   -90,   -90,   -90,   -90,   -90,   -90,
     -90,   162,   -90,   163,   -90,   -90,   -90,   -90,   -90,   -90,
     -90,   -90,   -90,   -90,   -90,   -90,   -90,   -90,   -90,   -90,
     -90,   139,   -90,   -90,   138,   -90,   142,   -90,   143,   -90,
     152,   -90,   164,   167,   168,   -90,   -90,    -4,    -4,    77,
     -18,   -90,   177,   185,    33,    71,   195,   247,   236,    -2,
     236,   171,   -90,   -90,   -90,   -90,   -90,   -90,    41,   -90,
      -4,    -4,   138,    97,    97,   -90,   -90,   186,   187,   194,
      42,    42,    -4,   196,    97,   -90,   219,   -90,   -90,   -90,
     -90,   210,   -90,   -90,   204,    42,    42,   199,   -90,   -90,
     -90,   -90,   -90,   -90,   -90,   -90,   -90,   -90,   -90,   -90,
     -90,   222,   -90,   223,   -90,   -90,   -90,   -90,   -90,   -90,
     -90,   -90,   -90,   -90,   215,   -90,   -90,   -90,   -90,   -90,
      -4,   222,   228,   222,    -5,   222,    97,    35,   229,   -90,
     -90,   222,   232,   222,    -4,   -90,   135,   233,   -90,   -90,
     234,   235,   222,   240,   -90,   -90,   237,   -90,   239,   -13,
     -90,   -90,   -90,   -90,   244,    42,   -90,   -90,   -90,   -90,
     -90
पूर्ण;

/* YYPGOTO[NTERM-NUM].  */
अटल स्थिर yytype_पूर्णांक16 yypजाओ[] =
अणु
     -90,   -90,   269,   271,   -90,    23,   -70,   -90,   -90,   -90,
     -90,   243,   -90,   -90,   -90,   -90,   -90,   -90,   -90,   -48,
     -90,   -90,   -90,   -90,   -90,   -90,   -90,   -90,   -90,   -90,
     -90,   -20,   -90,   -90,   -90,   -90,   -90,   206,   205,   -68,
     -90,   -90,   169,    -1,    27,    -7,   118,   -66,   -89,   -90
पूर्ण;

/* YYTABLE[YYPACT[STATE-NUM]].  What to करो in state STATE-NUM.  If
   positive, shअगरt that token.  If negative, reduce the rule which
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
#घोषणा YYTABLE_NINF -86
अटल स्थिर yytype_पूर्णांक16 yytable[] =
अणु
      10,    88,    89,    54,   146,   147,   119,     1,   122,   164,
      93,   141,    56,   142,    58,   156,    94,    62,     1,    90,
      91,   131,    65,    66,   144,   145,    67,    90,    91,   132,
     127,    68,   136,   -31,    97,     2,   154,   -31,   -31,   -31,
     -31,   -31,   -31,   -31,   -31,    98,    52,   -31,   -31,    99,
     -31,   100,   101,   102,   103,   104,   -31,   105,   129,   106,
     138,   173,    92,   141,   107,   142,   174,   172,     8,     9,
     143,   -33,    97,    90,    91,   -33,   -33,   -33,   -33,   -33,
     -33,   -33,   -33,    98,   166,   -33,   -33,    99,   -33,   100,
     101,   102,   103,   104,   -33,   105,    11,   106,   179,   151,
     123,   126,   107,   135,   125,   130,     2,   139,     2,    90,
      91,    -5,    12,    55,   161,    13,    14,    15,    16,    17,
      18,    19,    20,    65,    66,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    57,    59,    31,    61,    -4,
      12,    63,    32,    13,    14,    15,    16,    17,    18,    19,
      20,    64,    71,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    72,    73,    31,   180,    90,    91,    52,
      32,   -85,    97,    82,    83,   -85,   -85,   -85,   -85,   -85,
     -85,   -85,   -85,    84,   190,   -85,   -85,    99,   -85,   -85,
     -85,   -85,   -85,   -85,   -85,    85,    97,   106,    86,    87,
     -52,   -52,   140,   -52,   -52,   -52,   -52,    98,    95,   -52,
     -52,    99,   114,   115,   116,   117,    96,   148,   149,   150,
     158,   106,   155,   159,    97,   163,   118,   -76,   -76,   -76,
     -76,   -76,   -76,   -76,   -76,   160,   164,   -76,   -76,    99,
      13,    14,    15,    16,    17,    18,    19,    20,    91,   106,
      21,    22,    14,    15,   140,    17,    18,    19,    20,   168,
     175,    21,    22,   177,   181,   182,   183,    32,   187,   167,
     188,   169,   170,   171,   185,   189,    53,    51,    32,   176,
      75,   178,   121,     0,   133,   162,     0,     0,     0,     0,
     184
पूर्ण;

#घोषणा yypact_value_is_शेष(yystate) \
  ((yystate) == (-90))

#घोषणा yytable_value_is_error(yytable_value) \
  YYID (0)

अटल स्थिर yytype_पूर्णांक16 yycheck[] =
अणु
       1,    67,    68,    10,    93,    94,    76,     3,    76,    14,
      28,    81,    13,    81,    15,   104,    34,    18,     3,    32,
      33,    23,    26,    27,    90,    91,    30,    32,    33,    31,
      78,    35,    80,     0,     1,    31,   102,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    31,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    78,    26,
      80,    26,    69,   133,    31,   133,    31,   156,    26,    27,
      29,     0,     1,    32,    33,     4,     5,     6,     7,     8,
       9,    10,    11,    12,   150,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,    26,   164,   100,
      77,    78,    31,    80,    77,    78,    31,    80,    31,    32,
      33,     0,     1,    31,   115,     4,     5,     6,     7,     8,
       9,    10,    11,    26,    27,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    31,    26,    26,    31,     0,
       1,    26,    31,     4,     5,     6,     7,     8,     9,    10,
      11,    26,    31,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,     1,     1,    26,    31,    32,    33,    31,
      31,     0,     1,    31,    31,     4,     5,     6,     7,     8,
       9,    10,    11,    31,   185,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    31,     1,    26,    31,    31,
       5,     6,    31,     8,     9,    10,    11,    12,    31,    14,
      15,    16,    17,    18,    19,    20,    31,    31,    31,    25,
       1,    26,    26,    13,     1,    26,    31,     4,     5,     6,
       7,     8,     9,    10,    11,    31,    14,    14,    15,    16,
       4,     5,     6,     7,     8,     9,    10,    11,    33,    26,
      14,    15,     5,     6,    31,     8,     9,    10,    11,    31,
      31,    14,    15,    31,    31,    31,    31,    31,    31,   151,
      31,   153,   154,   155,    34,    31,     7,     6,    31,   161,
      37,   163,    76,    -1,    79,   116,    -1,    -1,    -1,    -1,
     172
पूर्ण;

/* YYSTOS[STATE-NUM] -- The (पूर्णांकernal number of the) accessing
   symbol of state STATE-NUM.  */
अटल स्थिर yytype_uपूर्णांक8 yystos[] =
अणु
       0,     3,    31,    37,    38,    39,    63,    81,    26,    27,
      79,     0,     1,     4,     5,     6,     7,     8,     9,    10,
      11,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    26,    31,    40,    41,    43,    44,    45,    46,    52,
      53,    55,    59,    61,    64,    65,    67,    69,    70,    71,
      80,    39,    31,    38,    81,    31,    79,    31,    79,    26,
      85,    31,    79,    26,    26,    26,    27,    30,    35,    83,
      84,    31,     1,     1,    47,    47,    56,    58,    62,    76,
      68,    74,    31,    31,    31,    31,    31,    31,    83,    83,
      32,    33,    81,    28,    34,    31,    31,     1,    12,    16,
      18,    19,    20,    21,    22,    24,    26,    31,    42,    48,
      49,    72,    73,    75,    17,    18,    19,    20,    31,    42,
      57,    73,    75,    41,    54,    80,    41,    55,    60,    67,
      80,    23,    31,    74,    77,    41,    55,    66,    67,    80,
      31,    42,    75,    29,    83,    83,    84,    84,    31,    31,
      25,    79,    78,    79,    83,    26,    84,    50,     1,    13,
      31,    79,    78,    26,    14,    82,    83,    82,    31,    82,
      82,    82,    84,    26,    31,    31,    82,    31,    82,    83,
      31,    31,    31,    31,    82,    34,    51,    31,    31,    31,
      79
पूर्ण;

#घोषणा yyerrok		(yyerrstatus = 0)
#घोषणा yyclearin	(yyअक्षर = YYEMPTY)
#घोषणा YYEMPTY		(-2)
#घोषणा YYखातापूर्ण		0

#घोषणा YYACCEPT	जाओ yyacceptlab
#घोषणा YYABORT		जाओ yyपातlab
#घोषणा YYERROR		जाओ yyerrorlab


/* Like YYERROR except करो call yyerror.  This reमुख्यs here temporarily
   to ease the transition to the new meaning of YYERROR, क्रम GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is क्रमmally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */

#घोषणा YYFAIL		जाओ yyerrlab
#अगर defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we करोn't worry about that warning, but
     some users करो, and we want to make it easy क्रम users to हटाओ
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#पूर्ण_अगर

#घोषणा YYRECOVERING()  (!!yyerrstatus)

#घोषणा YYBACKUP(Token, Value)					\
करो								\
  अगर (yyअक्षर == YYEMPTY && yylen == 1)				\
    अणु								\
      yyअक्षर = (Token);						\
      yylval = (Value);						\
      YYPOPSTACK (1);						\
      जाओ yybackup;						\
    पूर्ण								\
  अन्यथा								\
    अणु								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    पूर्ण								\
जबतक (YYID (0))


#घोषणा YYTERROR	1
#घोषणा YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#घोषणा YYRHSLOC(Rhs, K) ((Rhs)[K])
#अगर_अघोषित YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    करो									\
      अगर (YYID (N))                                                    \
	अणु								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	पूर्ण								\
      अन्यथा								\
	अणु								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	पूर्ण								\
    जबतक (YYID (0))
#पूर्ण_अगर


/* This macro is provided क्रम backward compatibility. */

#अगर_अघोषित YY_LOCATION_PRINT
# define YY_LOCATION_PRINT(File, Loc) ((व्योम) 0)
#पूर्ण_अगर


/* YYLEX -- calling `yylex' with the right arguments.  */

#अगर_घोषित YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#अन्यथा
# define YYLEX yylex ()
#पूर्ण_अगर

/* Enable debugging अगर requested.  */
#अगर YYDEBUG

# अगरndef YYFPRINTF
#  include <मानकपन.स> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF ख_लिखो
# endअगर

# define YYDPRINTF(Args)			\
करो अणु						\
  अगर (yydebug)					\
    YYFPRINTF Args;				\
पूर्ण जबतक (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
करो अणु									  \
  अगर (yydebug)								  \
    अणु									  \
      YYFPRINTF (मानक_त्रुटि, "%s ", Title);					  \
      yy_symbol_prपूर्णांक (मानक_त्रुटि,						  \
		  Type, Value); \
      YYFPRINTF (मानक_त्रुटि, "\n");						  \
    पूर्ण									  \
पूर्ण जबतक (YYID (0))


/*--------------------------------.
| Prपूर्णांक this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#अगर (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
अटल व्योम
yy_symbol_value_prपूर्णांक (खाता *yyoutput, पूर्णांक yytype, YYSTYPE स्थिर * स्थिर yyvaluep)
#अन्यथा
अटल व्योम
yy_symbol_value_prपूर्णांक (yyoutput, yytype, yyvaluep)
    खाता *yyoutput;
    पूर्णांक yytype;
    YYSTYPE स्थिर * स्थिर yyvaluep;
#पूर्ण_अगर
अणु
  अगर (!yyvaluep)
    वापस;
# अगरdef YYPRINT
  अगर (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# अन्यथा
  YYUSE (yyoutput);
# endअगर
  चयन (yytype)
    अणु
      शेष:
	अवरोध;
    पूर्ण
पूर्ण


/*--------------------------------.
| Prपूर्णांक this symbol on YYOUTPUT.  |
`--------------------------------*/

#अगर (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
अटल व्योम
yy_symbol_prपूर्णांक (खाता *yyoutput, पूर्णांक yytype, YYSTYPE स्थिर * स्थिर yyvaluep)
#अन्यथा
अटल व्योम
yy_symbol_prपूर्णांक (yyoutput, yytype, yyvaluep)
    खाता *yyoutput;
    पूर्णांक yytype;
    YYSTYPE स्थिर * स्थिर yyvaluep;
#पूर्ण_अगर
अणु
  अगर (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  अन्यथा
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_prपूर्णांक (yyoutput, yytype, yyvaluep);
  YYFPRINTF (yyoutput, ")");
पूर्ण

/*------------------------------------------------------------------.
| yy_stack_prपूर्णांक -- Prपूर्णांक the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#अगर (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
अटल व्योम
yy_stack_prपूर्णांक (yytype_पूर्णांक16 *yybottom, yytype_पूर्णांक16 *yytop)
#अन्यथा
अटल व्योम
yy_stack_prपूर्णांक (yybottom, yytop)
    yytype_पूर्णांक16 *yybottom;
    yytype_पूर्णांक16 *yytop;
#पूर्ण_अगर
अणु
  YYFPRINTF (मानक_त्रुटि, "Stack now");
  क्रम (; yybottom <= yytop; yybottom++)
    अणु
      पूर्णांक yybot = *yybottom;
      YYFPRINTF (मानक_त्रुटि, " %d", yybot);
    पूर्ण
  YYFPRINTF (मानक_त्रुटि, "\n");
पूर्ण

# define YY_STACK_PRINT(Bottom, Top)				\
करो अणु								\
  अगर (yydebug)							\
    yy_stack_prपूर्णांक ((Bottom), (Top));				\
पूर्ण जबतक (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#अगर (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
अटल व्योम
yy_reduce_prपूर्णांक (YYSTYPE *yyvsp, पूर्णांक yyrule)
#अन्यथा
अटल व्योम
yy_reduce_prपूर्णांक (yyvsp, yyrule)
    YYSTYPE *yyvsp;
    पूर्णांक yyrule;
#पूर्ण_अगर
अणु
  पूर्णांक yynrhs = yyr2[yyrule];
  पूर्णांक yyi;
  अचिन्हित दीर्घ पूर्णांक yylno = yyrline[yyrule];
  YYFPRINTF (मानक_त्रुटि, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  क्रम (yyi = 0; yyi < yynrhs; yyi++)
    अणु
      YYFPRINTF (मानक_त्रुटि, "   $%d = ", yyi + 1);
      yy_symbol_prपूर्णांक (मानक_त्रुटि, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       );
      YYFPRINTF (मानक_त्रुटि, "\n");
    पूर्ण
पूर्ण

# define YY_REDUCE_PRINT(Rule)		\
करो अणु					\
  अगर (yydebug)				\
    yy_reduce_prपूर्णांक (yyvsp, Rule); \
पूर्ण जबतक (YYID (0))

/* Nonzero means prपूर्णांक parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
पूर्णांक yydebug;
#अन्यथा /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#पूर्ण_अगर /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#अगर_अघोषित	YYINITDEPTH
# define YYINITDEPTH 200
#पूर्ण_अगर

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   अगर the built-in stack extension method is used).

   Do not make this value too large; the results are undefined अगर
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision पूर्णांकeger arithmetic.  */

#अगर_अघोषित YYMAXDEPTH
# define YYMAXDEPTH 10000
#पूर्ण_अगर


#अगर YYERROR_VERBOSE

# अगरndef yyम_माप
#  अगर defined __GLIBC__ && defined _STRING_H
#   define yyम_माप म_माप
#  अन्यथा
/* Return the length of YYSTR.  */
#अगर (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
अटल YYSIZE_T
yyम_माप (स्थिर अक्षर *yystr)
#अन्यथा
अटल YYSIZE_T
yyम_माप (yystr)
    स्थिर अक्षर *yystr;
#पूर्ण_अगर
अणु
  YYSIZE_T yylen;
  क्रम (yylen = 0; yystr[yylen]; yylen++)
    जारी;
  वापस yylen;
पूर्ण
#  endअगर
# endअगर

# अगरndef yystpcpy
#  अगर defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  अन्यथा
/* Copy YYSRC to YYDEST, वापसing the address of the terminating '\0' in
   YYDEST.  */
#अगर (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
अटल अक्षर *
yystpcpy (अक्षर *yydest, स्थिर अक्षर *yysrc)
#अन्यथा
अटल अक्षर *
yystpcpy (yydest, yysrc)
    अक्षर *yydest;
    स्थिर अक्षर *yysrc;
#पूर्ण_अगर
अणु
  अक्षर *yyd = yydest;
  स्थिर अक्षर *yys = yysrc;

  जबतक ((*yyd++ = *yys++) != '\0')
    जारी;

  वापस yyd - 1;
पूर्ण
#  endअगर
# endअगर

# अगरndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable क्रम yyerror.  The
   heuristic is that द्विगुन-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, करो not copy; instead, वापस the length of what the result
   would have been.  */
अटल YYSIZE_T
yytnamerr (अक्षर *yyres, स्थिर अक्षर *yystr)
अणु
  अगर (*yystr == '"')
    अणु
      YYSIZE_T yyn = 0;
      अक्षर स्थिर *yyp = yystr;

      क्रम (;;)
	चयन (*++yyp)
	  अणु
	  हाल '\'':
	  हाल ',':
	    जाओ करो_not_strip_quotes;

	  हाल '\\':
	    अगर (*++yyp != '\\')
	      जाओ करो_not_strip_quotes;
	    /* Fall through.  */
	  शेष:
	    अगर (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    अवरोध;

	  हाल '"':
	    अगर (yyres)
	      yyres[yyn] = '\0';
	    वापस yyn;
	  पूर्ण
    करो_not_strip_quotes: ;
    पूर्ण

  अगर (! yyres)
    वापस yyम_माप (yystr);

  वापस yystpcpy (yyres, yystr) - yyres;
पूर्ण
# endअगर

/* Copy पूर्णांकo *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN क्रम the state stack whose top is
   YYSSP.

   Return 0 अगर *YYMSG was successfully written.  Return 1 अगर *YYMSG is
   not large enough to hold the message.  In that हाल, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 अगर the
   required number of bytes is too large to store.  */
अटल पूर्णांक
yysyntax_error (YYSIZE_T *yymsg_alloc, अक्षर **yymsg,
                yytype_पूर्णांक16 *yyssp, पूर्णांक yytoken)
अणु
  YYSIZE_T yysize0 = yytnamerr (0, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  YYSIZE_T yysize1;
  क्रमागत अणु YYERROR_VERBOSE_ARGS_MAXIMUM = 5 पूर्ण;
  /* Internationalized क्रमmat string. */
  स्थिर अक्षर *yyक्रमmat = 0;
  /* Arguments of yyक्रमmat. */
  अक्षर स्थिर *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one क्रम the "unexpected", one per
     "expected"). */
  पूर्णांक yycount = 0;

  /* There are many possibilities here to consider:
     - Assume YYFAIL is not used.  It's too flawed to consider.  See
       <http://lists.gnu.org/archive/hपंचांगl/bison-patches/2009-12/msg00024.hपंचांगl>
       क्रम details.  YYERROR is fine as it करोes not invoke this
       function.
     - If this state is a consistent state with a शेष action, then
       the only way this function was invoked is अगर the शेष action
       is an error action.  In that हाल, करोn't check क्रम expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yyअक्षर) is अगर
       this state is a consistent state with a शेष action.  Thus,
       detecting the असलence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       हाल, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a शेष action.  There might have been a
       previous inconsistent state, consistent state with a non-शेष
       action, or user semantic action that manipulated yyअक्षर.
     - Of course, the expected token list depends on states to have
       correct lookahead inक्रमmation, and it depends on the parser not
       to perक्रमm extra reductions after fetching a lookahead from the
       scanner and beक्रमe detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and शेष reductions corrupt the expected
       token list.  However, the list is correct क्रम canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  अगर (yytoken != YYEMPTY)
    अणु
      पूर्णांक yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      अगर (!yypact_value_is_शेष (yyn))
        अणु
          /* Start YYX at -YYN अगर negative to aव्योम negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions क्रम
             this state because they are शेष actions.  */
          पूर्णांक yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          पूर्णांक yychecklim = YYLAST - yyn + 1;
          पूर्णांक yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          पूर्णांक yyx;

          क्रम (yyx = yyxbegin; yyx < yyxend; ++yyx)
            अगर (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              अणु
                अगर (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  अणु
                    yycount = 1;
                    yysize = yysize0;
                    अवरोध;
                  पूर्ण
                yyarg[yycount++] = yytname[yyx];
                yysize1 = yysize + yytnamerr (0, yytname[yyx]);
                अगर (! (yysize <= yysize1
                       && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                  वापस 2;
                yysize = yysize1;
              पूर्ण
        पूर्ण
    पूर्ण

  चयन (yycount)
    अणु
# define YYCASE_(N, S)                      \
      हाल N:                               \
        yyक्रमmat = S;                       \
      अवरोध
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    पूर्ण

  yysize1 = yysize + yyम_माप (yyक्रमmat);
  अगर (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
    वापस 2;
  yysize = yysize1;

  अगर (*yymsg_alloc < yysize)
    अणु
      *yymsg_alloc = 2 * yysize;
      अगर (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      वापस 1;
    पूर्ण

  /* Aव्योम प्र_लिखो, as that infringes on the user's name space.
     Don't have undefined behavior even अगर the translation
     produced a string with the wrong number of "%s"s.  */
  अणु
    अक्षर *yyp = *yymsg;
    पूर्णांक yyi = 0;
    जबतक ((*yyp = *yyक्रमmat) != '\0')
      अगर (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        अणु
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyक्रमmat += 2;
        पूर्ण
      अन्यथा
        अणु
          yyp++;
          yyक्रमmat++;
        पूर्ण
  पूर्ण
  वापस 0;
पूर्ण
#पूर्ण_अगर /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#अगर (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
अटल व्योम
yydeकाष्ठा (स्थिर अक्षर *yymsg, पूर्णांक yytype, YYSTYPE *yyvaluep)
#अन्यथा
अटल व्योम
yydeकाष्ठा (yymsg, yytype, yyvaluep)
    स्थिर अक्षर *yymsg;
    पूर्णांक yytype;
    YYSTYPE *yyvaluep;
#पूर्ण_अगर
अणु
  YYUSE (yyvaluep);

  अगर (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  चयन (yytype)
    अणु
      हाल 53: /* "choice_entry" */

	अणु
	ख_लिखो(मानक_त्रुटि, "%s:%d: missing end statement for this entry\n",
		(yyvaluep->menu)->file->name, (yyvaluep->menu)->lineno);
	अगर (current_menu == (yyvaluep->menu))
		menu_end_menu();
पूर्ण;

	अवरोध;
      हाल 59: /* "if_entry" */

	अणु
	ख_लिखो(मानक_त्रुटि, "%s:%d: missing end statement for this entry\n",
		(yyvaluep->menu)->file->name, (yyvaluep->menu)->lineno);
	अगर (current_menu == (yyvaluep->menu))
		menu_end_menu();
पूर्ण;

	अवरोध;
      हाल 65: /* "menu_entry" */

	अणु
	ख_लिखो(मानक_त्रुटि, "%s:%d: missing end statement for this entry\n",
		(yyvaluep->menu)->file->name, (yyvaluep->menu)->lineno);
	अगर (current_menu == (yyvaluep->menu))
		menu_end_menu();
पूर्ण;

	अवरोध;

      शेष:
	अवरोध;
    पूर्ण
पूर्ण


/* Prevent warnings from -Wmissing-prototypes.  */
#अगर_घोषित YYPARSE_PARAM
#अगर defined __STDC__ || defined __cplusplus
पूर्णांक yyparse (व्योम *YYPARSE_PARAM);
#अन्यथा
पूर्णांक yyparse ();
#पूर्ण_अगर
#अन्यथा /* ! YYPARSE_PARAM */
#अगर defined __STDC__ || defined __cplusplus
पूर्णांक yyparse (व्योम);
#अन्यथा
पूर्णांक yyparse ();
#पूर्ण_अगर
#पूर्ण_अगर /* ! YYPARSE_PARAM */


/* The lookahead symbol.  */
पूर्णांक yyअक्षर;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
पूर्णांक yynerrs;


/*----------.
| yyparse.  |
`----------*/

#अगर_घोषित YYPARSE_PARAM
#अगर (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
पूर्णांक
yyparse (व्योम *YYPARSE_PARAM)
#अन्यथा
पूर्णांक
yyparse (YYPARSE_PARAM)
    व्योम *YYPARSE_PARAM;
#पूर्ण_अगर
#अन्यथा /* ! YYPARSE_PARAM */
#अगर (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
पूर्णांक
yyparse (व्योम)
#अन्यथा
पूर्णांक
yyparse ()

#पूर्ण_अगर
#पूर्ण_अगर
अणु
    पूर्णांक yystate;
    /* Number of tokens to shअगरt beक्रमe error messages enabled.  */
    पूर्णांक yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.

       Refer to the stacks thru separate poपूर्णांकers, to allow yyoverflow
       to पुनः_स्मृतिate them अन्यथाwhere.  */

    /* The state stack.  */
    yytype_पूर्णांक16 yyssa[YYINITDEPTH];
    yytype_पूर्णांक16 *yyss;
    yytype_पूर्णांक16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  पूर्णांक yyn;
  पूर्णांक yyresult;
  /* Lookahead token as an पूर्णांकernal (translated) token number.  */
  पूर्णांक yytoken;
  /* The variables used to वापस semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#अगर YYERROR_VERBOSE
  /* Buffer क्रम error messages, and its allocated size.  */
  अक्षर yymsgbuf[128];
  अक्षर *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = माप yymsgbuf;
#पूर्ण_अगर

#घोषणा YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  पूर्णांक yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((मानक_त्रुटि, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yyअक्षर = YYEMPTY; /* Cause a token to be पढ़ो.  */

  /* Initialize stack poपूर्णांकers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;

  जाओ yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all हालs, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  अगर (yyss + yystacksize - 1 <= yyssp)
    अणु
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#अगर_घोषित yyoverflow
      अणु
	/* Give user a chance to पुनः_स्मृतिate the stack.  Use copies of
	   these so that the &'s don't क्रमce the real ones पूर्णांकo
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_पूर्णांक16 *yyss1 = yyss;

	/* Each stack poपूर्णांकer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined अगर yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * माप (*yyssp),
		    &yyvs1, yysize * माप (*yyvsp),
		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      पूर्ण
#अन्यथा /* no yyoverflow */
# अगरndef YYSTACK_RELOCATE
      जाओ yyexhaustedlab;
# अन्यथा
      /* Extend the stack our own way.  */
      अगर (YYMAXDEPTH <= yystacksize)
	जाओ yyexhaustedlab;
      yystacksize *= 2;
      अगर (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      अणु
	yytype_पूर्णांक16 *yyss1 = yyss;
	जोड़ yyalloc *yyptr =
	  (जोड़ yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	अगर (! yyptr)
	  जाओ yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
	अगर (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      पूर्ण
# endअगर
#पूर्ण_अगर /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((मानक_त्रुटि, "Stack size increased to %lu\n",
		  (अचिन्हित दीर्घ पूर्णांक) yystacksize));

      अगर (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    पूर्ण

  YYDPRINTF ((मानक_त्रुटि, "Entering state %d\n", yystate));

  अगर (yystate == YYFINAL)
    YYACCEPT;

  जाओ yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token अगर we need one and करोn't alपढ़ोy have one.  */

  /* First try to decide what to करो without reference to lookahead token.  */
  yyn = yypact[yystate];
  अगर (yypact_value_is_शेष (yyn))
    जाओ yyशेष;

  /* Not known => get a lookahead token अगर करोn't alपढ़ोy have one.  */

  /* YYCHAR is either YYEMPTY or YYखातापूर्ण or a valid lookahead symbol.  */
  अगर (yyअक्षर == YYEMPTY)
    अणु
      YYDPRINTF ((मानक_त्रुटि, "Reading a token: "));
      yyअक्षर = YYLEX;
    पूर्ण

  अगर (yyअक्षर <= YYखातापूर्ण)
    अणु
      yyअक्षर = yytoken = YYखातापूर्ण;
      YYDPRINTF ((मानक_त्रुटि, "Now at end of input.\n"));
    पूर्ण
  अन्यथा
    अणु
      yytoken = YYTRANSLATE (yyअक्षर);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    पूर्ण

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  अगर (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    जाओ yyशेष;
  yyn = yytable[yyn];
  अगर (yyn <= 0)
    अणु
      अगर (yytable_value_is_error (yyn))
        जाओ yyerrlab;
      yyn = -yyn;
      जाओ yyreduce;
    पूर्ण

  /* Count tokens shअगरted since error; after three, turn off error
     status.  */
  अगर (yyerrstatus)
    yyerrstatus--;

  /* Shअगरt the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shअगरted token.  */
  yyअक्षर = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  जाओ yynewstate;


/*-----------------------------------------------------------.
| yyशेष -- करो the शेष action क्रम the current state.  |
`-----------------------------------------------------------*/
yyशेष:
  yyn = yydefact[yystate];
  अगर (yyn == 0)
    जाओ yyerrlab;
  जाओ yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the शेष value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is unकरोcumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it aव्योमs a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  चयन (yyn)
    अणु
        हाल 10:

    अणु zconf_error("unexpected end statement"); पूर्ण
    अवरोध;

  हाल 11:

    अणु zconf_error("unknown statement \"%s\"", (yyvsp[(2) - (4)].string)); पूर्ण
    अवरोध;

  हाल 12:

    अणु
	zconf_error("unexpected option \"%s\"", kconf_id_strings + (yyvsp[(2) - (4)].id)->name);
पूर्ण
    अवरोध;

  हाल 13:

    अणु zconf_error("invalid statement"); पूर्ण
    अवरोध;

  हाल 28:

    अणु zconf_error("unknown option \"%s\"", (yyvsp[(1) - (3)].string)); पूर्ण
    अवरोध;

  हाल 29:

    अणु zconf_error("invalid option"); पूर्ण
    अवरोध;

  हाल 30:

    अणु
	काष्ठा symbol *sym = sym_lookup((yyvsp[(2) - (3)].string), 0);
	sym->flags |= SYMBOL_OPTIONAL;
	menu_add_entry(sym);
	prपूर्णांकd(DEBUG_PARSE, "%s:%d:config %s\n", zconf_curname(), zconf_lineno(), (yyvsp[(2) - (3)].string));
पूर्ण
    अवरोध;

  हाल 31:

    अणु
	menu_end_entry();
	prपूर्णांकd(DEBUG_PARSE, "%s:%d:endconfig\n", zconf_curname(), zconf_lineno());
पूर्ण
    अवरोध;

  हाल 32:

    अणु
	काष्ठा symbol *sym = sym_lookup((yyvsp[(2) - (3)].string), 0);
	sym->flags |= SYMBOL_OPTIONAL;
	menu_add_entry(sym);
	prपूर्णांकd(DEBUG_PARSE, "%s:%d:menuconfig %s\n", zconf_curname(), zconf_lineno(), (yyvsp[(2) - (3)].string));
पूर्ण
    अवरोध;

  हाल 33:

    अणु
	अगर (current_entry->prompt)
		current_entry->prompt->type = P_MENU;
	अन्यथा
		zconfprपूर्णांक("warning: menuconfig statement without prompt");
	menu_end_entry();
	prपूर्णांकd(DEBUG_PARSE, "%s:%d:endconfig\n", zconf_curname(), zconf_lineno());
पूर्ण
    अवरोध;

  हाल 41:

    अणु
	menu_set_type((yyvsp[(1) - (3)].id)->stype);
	prपूर्णांकd(DEBUG_PARSE, "%s:%d:type(%u)\n",
		zconf_curname(), zconf_lineno(),
		(yyvsp[(1) - (3)].id)->stype);
पूर्ण
    अवरोध;

  हाल 42:

    अणु
	menu_add_prompt(P_PROMPT, (yyvsp[(2) - (4)].string), (yyvsp[(3) - (4)].expr));
	prपूर्णांकd(DEBUG_PARSE, "%s:%d:prompt\n", zconf_curname(), zconf_lineno());
पूर्ण
    अवरोध;

  हाल 43:

    अणु
	menu_add_expr(P_DEFAULT, (yyvsp[(2) - (4)].expr), (yyvsp[(3) - (4)].expr));
	अगर ((yyvsp[(1) - (4)].id)->stype != S_UNKNOWN)
		menu_set_type((yyvsp[(1) - (4)].id)->stype);
	prपूर्णांकd(DEBUG_PARSE, "%s:%d:default(%u)\n",
		zconf_curname(), zconf_lineno(),
		(yyvsp[(1) - (4)].id)->stype);
पूर्ण
    अवरोध;

  हाल 44:

    अणु
	menu_add_symbol(P_SELECT, sym_lookup((yyvsp[(2) - (4)].string), 0), (yyvsp[(3) - (4)].expr));
	prपूर्णांकd(DEBUG_PARSE, "%s:%d:select\n", zconf_curname(), zconf_lineno());
पूर्ण
    अवरोध;

  हाल 45:

    अणु
	menu_add_expr(P_RANGE, expr_alloc_comp(E_RANGE,(yyvsp[(2) - (5)].symbol), (yyvsp[(3) - (5)].symbol)), (yyvsp[(4) - (5)].expr));
	prपूर्णांकd(DEBUG_PARSE, "%s:%d:range\n", zconf_curname(), zconf_lineno());
पूर्ण
    अवरोध;

  हाल 48:

    अणु
	स्थिर काष्ठा kconf_id *id = kconf_id_lookup((yyvsp[(2) - (3)].string), म_माप((yyvsp[(2) - (3)].string)));
	अगर (id && id->flags & TF_OPTION)
		menu_add_option(id->token, (yyvsp[(3) - (3)].string));
	अन्यथा
		zconfprपूर्णांक("warning: ignoring unknown option %s", (yyvsp[(2) - (3)].string));
	मुक्त((yyvsp[(2) - (3)].string));
पूर्ण
    अवरोध;

  हाल 49:

    अणु (yyval.string) = शून्य; पूर्ण
    अवरोध;

  हाल 50:

    अणु (yyval.string) = (yyvsp[(2) - (2)].string); पूर्ण
    अवरोध;

  हाल 51:

    अणु
	काष्ठा symbol *sym = sym_lookup((yyvsp[(2) - (3)].string), SYMBOL_CHOICE);
	sym->flags |= SYMBOL_AUTO;
	menu_add_entry(sym);
	menu_add_expr(P_CHOICE, शून्य, शून्य);
	prपूर्णांकd(DEBUG_PARSE, "%s:%d:choice\n", zconf_curname(), zconf_lineno());
पूर्ण
    अवरोध;

  हाल 52:

    अणु
	(yyval.menu) = menu_add_menu();
पूर्ण
    अवरोध;

  हाल 53:

    अणु
	अगर (zconf_endtoken((yyvsp[(1) - (1)].id), T_CHOICE, T_ENDCHOICE)) अणु
		menu_end_menu();
		prपूर्णांकd(DEBUG_PARSE, "%s:%d:endchoice\n", zconf_curname(), zconf_lineno());
	पूर्ण
पूर्ण
    अवरोध;

  हाल 61:

    अणु
	menu_add_prompt(P_PROMPT, (yyvsp[(2) - (4)].string), (yyvsp[(3) - (4)].expr));
	prपूर्णांकd(DEBUG_PARSE, "%s:%d:prompt\n", zconf_curname(), zconf_lineno());
पूर्ण
    अवरोध;

  हाल 62:

    अणु
	अगर ((yyvsp[(1) - (3)].id)->stype == S_BOOLEAN || (yyvsp[(1) - (3)].id)->stype == S_TRISTATE) अणु
		menu_set_type((yyvsp[(1) - (3)].id)->stype);
		prपूर्णांकd(DEBUG_PARSE, "%s:%d:type(%u)\n",
			zconf_curname(), zconf_lineno(),
			(yyvsp[(1) - (3)].id)->stype);
	पूर्ण अन्यथा
		YYERROR;
पूर्ण
    अवरोध;

  हाल 63:

    अणु
	current_entry->sym->flags |= SYMBOL_OPTIONAL;
	prपूर्णांकd(DEBUG_PARSE, "%s:%d:optional\n", zconf_curname(), zconf_lineno());
पूर्ण
    अवरोध;

  हाल 64:

    अणु
	अगर ((yyvsp[(1) - (4)].id)->stype == S_UNKNOWN) अणु
		menu_add_symbol(P_DEFAULT, sym_lookup((yyvsp[(2) - (4)].string), 0), (yyvsp[(3) - (4)].expr));
		prपूर्णांकd(DEBUG_PARSE, "%s:%d:default\n",
			zconf_curname(), zconf_lineno());
	पूर्ण अन्यथा
		YYERROR;
पूर्ण
    अवरोध;

  हाल 67:

    अणु
	prपूर्णांकd(DEBUG_PARSE, "%s:%d:if\n", zconf_curname(), zconf_lineno());
	menu_add_entry(शून्य);
	menu_add_dep((yyvsp[(2) - (3)].expr));
	(yyval.menu) = menu_add_menu();
पूर्ण
    अवरोध;

  हाल 68:

    अणु
	अगर (zconf_endtoken((yyvsp[(1) - (1)].id), T_IF, T_ENDIF)) अणु
		menu_end_menu();
		prपूर्णांकd(DEBUG_PARSE, "%s:%d:endif\n", zconf_curname(), zconf_lineno());
	पूर्ण
पूर्ण
    अवरोध;

  हाल 74:

    अणु
	menu_add_prompt(P_MENU, (yyvsp[(2) - (3)].string), शून्य);
पूर्ण
    अवरोध;

  हाल 75:

    अणु
	menu_add_entry(शून्य);
	menu_add_prompt(P_MENU, (yyvsp[(2) - (3)].string), शून्य);
	prपूर्णांकd(DEBUG_PARSE, "%s:%d:menu\n", zconf_curname(), zconf_lineno());
पूर्ण
    अवरोध;

  हाल 76:

    अणु
	(yyval.menu) = menu_add_menu();
पूर्ण
    अवरोध;

  हाल 77:

    अणु
	अगर (zconf_endtoken((yyvsp[(1) - (1)].id), T_MENU, T_ENDMENU)) अणु
		menu_end_menu();
		prपूर्णांकd(DEBUG_PARSE, "%s:%d:endmenu\n", zconf_curname(), zconf_lineno());
	पूर्ण
पूर्ण
    अवरोध;

  हाल 83:

    अणु
	prपूर्णांकd(DEBUG_PARSE, "%s:%d:source %s\n", zconf_curname(), zconf_lineno(), (yyvsp[(2) - (3)].string));
	zconf_nextfile((yyvsp[(2) - (3)].string));
पूर्ण
    अवरोध;

  हाल 84:

    अणु
	menu_add_entry(शून्य);
	menu_add_prompt(P_COMMENT, (yyvsp[(2) - (3)].string), शून्य);
	prपूर्णांकd(DEBUG_PARSE, "%s:%d:comment\n", zconf_curname(), zconf_lineno());
पूर्ण
    अवरोध;

  हाल 85:

    अणु
	menu_end_entry();
पूर्ण
    अवरोध;

  हाल 86:

    अणु
	prपूर्णांकd(DEBUG_PARSE, "%s:%d:help\n", zconf_curname(), zconf_lineno());
	zconf_starthelp();
पूर्ण
    अवरोध;

  हाल 87:

    अणु
	current_entry->help = (yyvsp[(2) - (2)].string);
पूर्ण
    अवरोध;

  हाल 92:

    अणु
	menu_add_dep((yyvsp[(3) - (4)].expr));
	prपूर्णांकd(DEBUG_PARSE, "%s:%d:depends on\n", zconf_curname(), zconf_lineno());
पूर्ण
    अवरोध;

  हाल 96:

    अणु
	menu_add_visibility((yyvsp[(2) - (2)].expr));
पूर्ण
    अवरोध;

  हाल 98:

    अणु
	menu_add_prompt(P_PROMPT, (yyvsp[(1) - (2)].string), (yyvsp[(2) - (2)].expr));
पूर्ण
    अवरोध;

  हाल 101:

    अणु (yyval.id) = (yyvsp[(1) - (2)].id); पूर्ण
    अवरोध;

  हाल 102:

    अणु (yyval.id) = (yyvsp[(1) - (2)].id); पूर्ण
    अवरोध;

  हाल 103:

    अणु (yyval.id) = (yyvsp[(1) - (2)].id); पूर्ण
    अवरोध;

  हाल 106:

    अणु (yyval.expr) = शून्य; पूर्ण
    अवरोध;

  हाल 107:

    अणु (yyval.expr) = (yyvsp[(2) - (2)].expr); पूर्ण
    अवरोध;

  हाल 108:

    अणु (yyval.expr) = expr_alloc_symbol((yyvsp[(1) - (1)].symbol)); पूर्ण
    अवरोध;

  हाल 109:

    अणु (yyval.expr) = expr_alloc_comp(E_EQUAL, (yyvsp[(1) - (3)].symbol), (yyvsp[(3) - (3)].symbol)); पूर्ण
    अवरोध;

  हाल 110:

    अणु (yyval.expr) = expr_alloc_comp(E_UNEQUAL, (yyvsp[(1) - (3)].symbol), (yyvsp[(3) - (3)].symbol)); पूर्ण
    अवरोध;

  हाल 111:

    अणु (yyval.expr) = (yyvsp[(2) - (3)].expr); पूर्ण
    अवरोध;

  हाल 112:

    अणु (yyval.expr) = expr_alloc_one(E_NOT, (yyvsp[(2) - (2)].expr)); पूर्ण
    अवरोध;

  हाल 113:

    अणु (yyval.expr) = expr_alloc_two(E_OR, (yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr)); पूर्ण
    अवरोध;

  हाल 114:

    अणु (yyval.expr) = expr_alloc_two(E_AND, (yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr)); पूर्ण
    अवरोध;

  हाल 115:

    अणु (yyval.symbol) = sym_lookup((yyvsp[(1) - (1)].string), 0); मुक्त((yyvsp[(1) - (1)].string)); पूर्ण
    अवरोध;

  हाल 116:

    अणु (yyval.symbol) = sym_lookup((yyvsp[(1) - (1)].string), SYMBOL_CONST); मुक्त((yyvsp[(1) - (1)].string)); पूर्ण
    अवरोध;

  हाल 117:

    अणु (yyval.string) = शून्य; पूर्ण
    अवरोध;



      शेष: अवरोध;
    पूर्ण
  /* User semantic actions someबार alter yyअक्षर, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately beक्रमe every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed अगर the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yyअक्षर or
     अगर it invokes YYBACKUP.  In the हाल of YYABORT or YYACCEPT, an
     incorrect deकाष्ठाor might then be invoked immediately.  In the
     हाल of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect deकाष्ठाor call or verbose syntax error message
     beक्रमe the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now `shअगरt' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypजाओ[yyn - YYNTOKENS] + *yyssp;
  अगर (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  अन्यथा
    yystate = yydefजाओ[yyn - YYNTOKENS];

  जाओ yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions क्रम why this is necessary.  */
  yytoken = yyअक्षर == YYEMPTY ? YYEMPTY : YYTRANSLATE (yyअक्षर);

  /* If not alपढ़ोy recovering from an error, report this error.  */
  अगर (!yyerrstatus)
    अणु
      ++yynerrs;
#अगर ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#अन्यथा
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      अणु
        अक्षर स्थिर *yymsgp = YY_("syntax error");
        पूर्णांक yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        अगर (yysyntax_error_status == 0)
          yymsgp = yymsg;
        अन्यथा अगर (yysyntax_error_status == 1)
          अणु
            अगर (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (अक्षर *) YYSTACK_ALLOC (yymsg_alloc);
            अगर (!yymsg)
              अणु
                yymsg = yymsgbuf;
                yymsg_alloc = माप yymsgbuf;
                yysyntax_error_status = 2;
              पूर्ण
            अन्यथा
              अणु
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              पूर्ण
          पूर्ण
        yyerror (yymsgp);
        अगर (yysyntax_error_status == 2)
          जाओ yyexhaustedlab;
      पूर्ण
# undef YYSYNTAX_ERROR
#पूर्ण_अगर
    पूर्ण



  अगर (yyerrstatus == 3)
    अणु
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      अगर (yyअक्षर <= YYखातापूर्ण)
	अणु
	  /* Return failure अगर at end of input.  */
	  अगर (yyअक्षर == YYखातापूर्ण)
	    YYABORT;
	पूर्ण
      अन्यथा
	अणु
	  yydeकाष्ठा ("Error: discarding",
		      yytoken, &yylval);
	  yyअक्षर = YYEMPTY;
	पूर्ण
    पूर्ण

  /* Else will try to reuse lookahead token after shअगरting the error
     token.  */
  जाओ yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error उठाओd explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacअगरy compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab thereक्रमe never appears in user
     code.  */
  अगर (/*CONSTCOND*/ 0)
     जाओ yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  जाओ yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code क्रम both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shअगरted decrements this.  */

  क्रम (;;)
    अणु
      yyn = yypact[yystate];
      अगर (!yypact_value_is_शेष (yyn))
	अणु
	  yyn += YYTERROR;
	  अगर (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    अणु
	      yyn = yytable[yyn];
	      अगर (0 < yyn)
		अवरोध;
	    पूर्ण
	पूर्ण

      /* Pop the current state because it cannot handle the error token.  */
      अगर (yyssp == yyss)
	YYABORT;


      yydeकाष्ठा ("Error: popping",
		  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    पूर्ण

  *++yyvsp = yylval;


  /* Shअगरt the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  जाओ yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  जाओ yyवापस;

/*-----------------------------------.
| yyपातlab -- YYABORT comes here.  |
`-----------------------------------*/
yyपातlab:
  yyresult = 1;
  जाओ yyवापस;

#अगर !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#पूर्ण_अगर

yyवापस:
  अगर (yyअक्षर != YYEMPTY)
    अणु
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions क्रम why this is necessary.  */
      yytoken = YYTRANSLATE (yyअक्षर);
      yydeकाष्ठा ("Cleanup: discarding lookahead",
                  yytoken, &yylval);
    पूर्ण
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  जबतक (yyssp != yyss)
    अणु
      yydeकाष्ठा ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK (1);
    पूर्ण
#अगर_अघोषित yyoverflow
  अगर (yyss != yyssa)
    YYSTACK_FREE (yyss);
#पूर्ण_अगर
#अगर YYERROR_VERBOSE
  अगर (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#पूर्ण_अगर
  /* Make sure YYID is used.  */
  वापस YYID (yyresult);
पूर्ण





व्योम conf_parse(स्थिर अक्षर *name)
अणु
	काष्ठा symbol *sym;
	पूर्णांक i;

	zconf_initscan(name);

	sym_init();
	_menu_init();
	rooपंचांगenu.prompt = menu_add_prompt(P_MENU, "Linux Kernel Configuration", शून्य);

	अगर (दो_पर्या("ZCONF_DEBUG"))
		zconfdebug = 1;
	zconfparse();
	अगर (zconfnerrs)
		निकास(1);
	अगर (!modules_sym)
		modules_sym = sym_find( "n" );

	rooपंचांगenu.prompt->text = _(rooपंचांगenu.prompt->text);
	rooपंचांगenu.prompt->text = sym_expand_string_value(rooपंचांगenu.prompt->text);

	menu_finalize(&rooपंचांगenu);
	क्रम_all_symbols(i, sym) अणु
		अगर (sym_check_deps(sym))
			zconfnerrs++;
	पूर्ण
	अगर (zconfnerrs)
		निकास(1);
	sym_set_change_count(1);
पूर्ण

अटल स्थिर अक्षर *zconf_tokenname(पूर्णांक token)
अणु
	चयन (token) अणु
	हाल T_MENU:		वापस "menu";
	हाल T_ENDMENU:		वापस "endmenu";
	हाल T_CHOICE:		वापस "choice";
	हाल T_ENDCHOICE:	वापस "endchoice";
	हाल T_IF:		वापस "if";
	हाल T_ENDIF:		वापस "endif";
	हाल T_DEPENDS:		वापस "depends";
	हाल T_VISIBLE:		वापस "visible";
	पूर्ण
	वापस "<token>";
पूर्ण

अटल bool zconf_endtoken(स्थिर काष्ठा kconf_id *id, पूर्णांक starttoken, पूर्णांक endtoken)
अणु
	अगर (id->token != endtoken) अणु
		zconf_error("unexpected '%s' within %s block",
			kconf_id_strings + id->name, zconf_tokenname(starttoken));
		zconfnerrs++;
		वापस false;
	पूर्ण
	अगर (current_menu->file != current_file) अणु
		zconf_error("'%s' in different file than '%s'",
			kconf_id_strings + id->name, zconf_tokenname(starttoken));
		ख_लिखो(मानक_त्रुटि, "%s:%d: location of the '%s'\n",
			current_menu->file->name, current_menu->lineno,
			zconf_tokenname(starttoken));
		zconfnerrs++;
		वापस false;
	पूर्ण
	वापस true;
पूर्ण

अटल व्योम zconfprपूर्णांक(स्थिर अक्षर *err, ...)
अणु
	बहु_सूची ap;

	ख_लिखो(मानक_त्रुटि, "%s:%d: ", zconf_curname(), zconf_lineno());
	बहु_शुरू(ap, err);
	भख_लिखो(मानक_त्रुटि, err, ap);
	बहु_पूर्ण(ap);
	ख_लिखो(मानक_त्रुटि, "\n");
पूर्ण

अटल व्योम zconf_error(स्थिर अक्षर *err, ...)
अणु
	बहु_सूची ap;

	zconfnerrs++;
	ख_लिखो(मानक_त्रुटि, "%s:%d: ", zconf_curname(), zconf_lineno());
	बहु_शुरू(ap, err);
	भख_लिखो(मानक_त्रुटि, err, ap);
	बहु_पूर्ण(ap);
	ख_लिखो(मानक_त्रुटि, "\n");
पूर्ण

अटल व्योम zconख_त्रुटि(स्थिर अक्षर *err)
अणु
	ख_लिखो(मानक_त्रुटि, "%s:%d: %s\n", zconf_curname(), zconf_lineno() + 1, err);
पूर्ण

अटल व्योम prपूर्णांक_quoted_string(खाता *out, स्थिर अक्षर *str)
अणु
	स्थिर अक्षर *p;
	पूर्णांक len;

	अ_दो('"', out);
	जबतक ((p = म_अक्षर(str, '"'))) अणु
		len = p - str;
		अगर (len)
			ख_लिखो(out, "%.*s", len, str);
		ख_माला_दो("\\\"", out);
		str = p + 1;
	पूर्ण
	ख_माला_दो(str, out);
	अ_दो('"', out);
पूर्ण

अटल व्योम prपूर्णांक_symbol(खाता *out, काष्ठा menu *menu)
अणु
	काष्ठा symbol *sym = menu->sym;
	काष्ठा property *prop;

	अगर (sym_is_choice(sym))
		ख_लिखो(out, "\nchoice\n");
	अन्यथा
		ख_लिखो(out, "\nconfig %s\n", sym->name);
	चयन (sym->type) अणु
	हाल S_BOOLEAN:
		ख_माला_दो("  boolean\n", out);
		अवरोध;
	हाल S_TRISTATE:
		ख_माला_दो("  tristate\n", out);
		अवरोध;
	हाल S_STRING:
		ख_माला_दो("  string\n", out);
		अवरोध;
	हाल S_INT:
		ख_माला_दो("  integer\n", out);
		अवरोध;
	हाल S_HEX:
		ख_माला_दो("  hex\n", out);
		अवरोध;
	शेष:
		ख_माला_दो("  ???\n", out);
		अवरोध;
	पूर्ण
	क्रम (prop = sym->prop; prop; prop = prop->next) अणु
		अगर (prop->menu != menu)
			जारी;
		चयन (prop->type) अणु
		हाल P_PROMPT:
			ख_माला_दो("  prompt ", out);
			prपूर्णांक_quoted_string(out, prop->text);
			अगर (!expr_is_yes(prop->visible.expr)) अणु
				ख_माला_दो(" if ", out);
				expr_fprपूर्णांक(prop->visible.expr, out);
			पूर्ण
			ख_अक्षर_दो('\n', out);
			अवरोध;
		हाल P_DEFAULT:
			ख_माला_दो( "  default ", out);
			expr_fprपूर्णांक(prop->expr, out);
			अगर (!expr_is_yes(prop->visible.expr)) अणु
				ख_माला_दो(" if ", out);
				expr_fprपूर्णांक(prop->visible.expr, out);
			पूर्ण
			ख_अक्षर_दो('\n', out);
			अवरोध;
		हाल P_CHOICE:
			ख_माला_दो("  #choice value\n", out);
			अवरोध;
		हाल P_SELECT:
			ख_माला_दो( "  select ", out);
			expr_fprपूर्णांक(prop->expr, out);
			ख_अक्षर_दो('\n', out);
			अवरोध;
		हाल P_RANGE:
			ख_माला_दो( "  range ", out);
			expr_fprपूर्णांक(prop->expr, out);
			ख_अक्षर_दो('\n', out);
			अवरोध;
		हाल P_MENU:
			ख_माला_दो( "  menu ", out);
			prपूर्णांक_quoted_string(out, prop->text);
			ख_अक्षर_दो('\n', out);
			अवरोध;
		शेष:
			ख_लिखो(out, "  unknown prop %d!\n", prop->type);
			अवरोध;
		पूर्ण
	पूर्ण
	अगर (menu->help) अणु
		पूर्णांक len = म_माप(menu->help);
		जबतक (menu->help[--len] == '\n')
			menu->help[len] = 0;
		ख_लिखो(out, "  help\n%s\n", menu->help);
	पूर्ण
पूर्ण

व्योम zconfdump(खाता *out)
अणु
	काष्ठा property *prop;
	काष्ठा symbol *sym;
	काष्ठा menu *menu;

	menu = rooपंचांगenu.list;
	जबतक (menu) अणु
		अगर ((sym = menu->sym))
			prपूर्णांक_symbol(out, menu);
		अन्यथा अगर ((prop = menu->prompt)) अणु
			चयन (prop->type) अणु
			हाल P_COMMENT:
				ख_माला_दो("\ncomment ", out);
				prपूर्णांक_quoted_string(out, prop->text);
				ख_माला_दो("\n", out);
				अवरोध;
			हाल P_MENU:
				ख_माला_दो("\nmenu ", out);
				prपूर्णांक_quoted_string(out, prop->text);
				ख_माला_दो("\n", out);
				अवरोध;
			शेष:
				;
			पूर्ण
			अगर (!expr_is_yes(prop->visible.expr)) अणु
				ख_माला_दो("  depends ", out);
				expr_fprपूर्णांक(prop->visible.expr, out);
				ख_अक्षर_दो('\n', out);
			पूर्ण
		पूर्ण

		अगर (menu->list)
			menu = menu->list;
		अन्यथा अगर (menu->next)
			menu = menu->next;
		अन्यथा जबतक ((menu = menu->parent)) अणु
			अगर (menu->prompt && menu->prompt->type == P_MENU)
				ख_माला_दो("\nendmenu\n", out);
			अगर (menu->next) अणु
				menu = menu->next;
				अवरोध;
			पूर्ण
		पूर्ण
	पूर्ण
पूर्ण

#समावेश "zconf.lex.c"
#समावेश "util.c"
#समावेश "confdata.c"
#समावेश "expr.c"
#समावेश "symbol.c"
#समावेश "menu.c"

